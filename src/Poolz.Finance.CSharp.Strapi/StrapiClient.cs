// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
#endif

namespace Poolz.Finance.CSharp.Strapi
{
    #region base classes
    public struct GraphQlFieldMetadata
    {
        public string Name { get; set; }
        public string DefaultAlias { get; set; }
        public bool IsComplex { get; set; }
        public bool RequiresParameters { get; set; }
        public global::System.Type QueryBuilderType { get; set; }
    }
    
    public enum Formatting
    {
        None,
        Indented
    }
    
    public class GraphQlObjectTypeAttribute : global::System.Attribute
    {
        public string TypeName { get; }
    
        public GraphQlObjectTypeAttribute(string typeName) => TypeName = typeName;
    }
    
    #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
    public class QueryBuilderParameterConverter<T> : global::Newtonsoft.Json.JsonConverter
    {
        public override object ReadJson(JsonReader reader, global::System.Type objectType, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.Null:
                    return null;
    
                default:
                    return (QueryBuilderParameter<T>)(T)serializer.Deserialize(reader, typeof(T));
            }
        }
    
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            if (value == null)
                writer.WriteNull();
            else
                serializer.Serialize(writer, ((QueryBuilderParameter<T>)value).Value, typeof(T));
        }
    
        public override bool CanConvert(global::System.Type objectType) => objectType.IsSubclassOf(typeof(QueryBuilderParameter));
    }
    
    public class GraphQlInterfaceJsonConverter : global::Newtonsoft.Json.JsonConverter
    {
        private const string FieldNameType = "__typename";
    
        private static readonly Dictionary<string, global::System.Type> InterfaceTypeMapping =
            typeof(GraphQlInterfaceJsonConverter).Assembly.GetTypes()
                .Select(t => new { Type = t, Attribute = t.GetCustomAttribute<GraphQlObjectTypeAttribute>() })
                .Where(x => x.Attribute != null && x.Type.Namespace == typeof(GraphQlInterfaceJsonConverter).Namespace)
                .ToDictionary(x => x.Attribute.TypeName, x => x.Type);
    
        public override bool CanConvert(global::System.Type objectType) => objectType.IsInterface || objectType.IsArray;
    
        public override object ReadJson(JsonReader reader, global::System.Type objectType, object existingValue, JsonSerializer serializer)
        {
            while (reader.TokenType == JsonToken.Comment)
                reader.Read();
    
            switch (reader.TokenType)
            {
                case JsonToken.Null:
                    return null;
    
                case JsonToken.StartObject:
                    var jObject = JObject.Load(reader);
                    if (!jObject.TryGetValue(FieldNameType, out var token) || token.Type != JTokenType.String)
                        throw CreateJsonReaderException(reader, $"\"{GetType().FullName}\" requires JSON object to contain \"{FieldNameType}\" field with type name");
    
                    var typeName = token.Value<string>();
                    if (!InterfaceTypeMapping.TryGetValue(typeName, out var type))
                        throw CreateJsonReaderException(reader, $"type \"{typeName}\" not found");
    
                    using (reader = CloneReader(jObject, reader))
                        return serializer.Deserialize(reader, type);
    
                case JsonToken.StartArray:
                    var elementType = GetElementType(objectType);
                    if (elementType == null)
                        throw CreateJsonReaderException(reader, $"array element type could not be resolved for type \"{objectType.FullName}\"");
    
                    return ReadArray(reader, objectType, elementType, serializer);
    
                default:
                    throw CreateJsonReaderException(reader, $"unrecognized token: {reader.TokenType}");
            }
        }
    
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) => serializer.Serialize(writer, value);
    
        private static JsonReader CloneReader(JToken jToken, JsonReader reader)
        {
            var jObjectReader = jToken.CreateReader();
            jObjectReader.Culture = reader.Culture;
            jObjectReader.CloseInput = reader.CloseInput;
            jObjectReader.SupportMultipleContent = reader.SupportMultipleContent;
            jObjectReader.DateTimeZoneHandling = reader.DateTimeZoneHandling;
            jObjectReader.FloatParseHandling = reader.FloatParseHandling;
            jObjectReader.DateFormatString = reader.DateFormatString;
            jObjectReader.DateParseHandling = reader.DateParseHandling;
            return jObjectReader;
        }
    
        private static JsonReaderException CreateJsonReaderException(JsonReader reader, string message)
        {
            if (reader is IJsonLineInfo lineInfo && lineInfo.HasLineInfo())
                return new JsonReaderException(message, reader.Path, lineInfo.LineNumber, lineInfo.LinePosition, null);
    
            return new JsonReaderException(message);
        }
    
        private static global::System.Type GetElementType(global::System.Type arrayOrGenericContainer) =>
            arrayOrGenericContainer.IsArray ? arrayOrGenericContainer.GetElementType() : arrayOrGenericContainer.GenericTypeArguments.FirstOrDefault();
    
        private IList ReadArray(JsonReader reader, global::System.Type targetType, global::System.Type elementType, JsonSerializer serializer)
        {
            var list = CreateCompatibleList(targetType, elementType);
            while (reader.Read() && reader.TokenType != JsonToken.EndArray)
                list.Add(ReadJson(reader, elementType, null, serializer));
    
            if (!targetType.IsArray)
                return list;
    
            var array = Array.CreateInstance(elementType, list.Count);
            list.CopyTo(array, 0);
            return array;
        }
    
        private static IList CreateCompatibleList(global::System.Type targetContainerType, global::System.Type elementType) =>
            (IList)Activator.CreateInstance(targetContainerType.IsArray || targetContainerType.IsAbstract ? typeof(List<>).MakeGenericType(elementType) : targetContainerType);
    }
    #endif
    
    internal static class GraphQlQueryHelper
    {
        private static readonly Regex RegexGraphQlIdentifier = new Regex(@"^[_A-Za-z][_0-9A-Za-z]*$", RegexOptions.Compiled);
        private static readonly Regex RegexEscapeGraphQlString = new Regex(@"[\\\""/\b\f\n\r\t]", RegexOptions.Compiled);
    
        public static string GetIndentation(int level, byte indentationSize)
        {
            return new String(' ', level * indentationSize);
        }
    
        public static string EscapeGraphQlStringValue(string value)
        {
            return RegexEscapeGraphQlString.Replace(value, m => @$"\{GetEscapeSequence(m.Value)}");
        }
    
        private static string GetEscapeSequence(string input)
        {
            switch (input)
            {
                case "\\":
                    return "\\";
                case "\"":
                    return "\"";
                case "/":
                    return "/";
                case "\b":
                    return "b";
                case "\f":
                    return "f";
                case "\n":
                    return "n";
                case "\r":
                    return "r";
                case "\t":
                    return "t";
                default:
                    throw new InvalidOperationException($"invalid character: {input}");
            }
        }
    
        public static string BuildArgumentValue(object value, string formatMask, GraphQlBuilderOptions options, int level)
        {
            var serializer = options.ArgumentBuilder ?? DefaultGraphQlArgumentBuilder.Instance;
            if (serializer.TryBuild(new GraphQlArgumentBuilderContext { Value = value, FormatMask = formatMask, Options = options, Level = level }, out var serializedValue))
                return serializedValue;
    
            if (value is null)
                return "null";
    
            var enumerable = value as IEnumerable;
            if (!String.IsNullOrEmpty(formatMask) && enumerable == null)
                return
                    value is IFormattable formattable
                        ? $"\"{EscapeGraphQlStringValue(formattable.ToString(formatMask, CultureInfo.InvariantCulture))}\""
                        : throw new ArgumentException($"Value must implement {nameof(IFormattable)} interface to use a format mask. ", nameof(value));
    
            if (value is Enum @enum)
                return ConvertEnumToString(@enum);
    
            if (value is bool @bool)
                return @bool ? "true" : "false";
    
            if (value is DateTime dateTime)
                return $"\"{dateTime.ToString("O")}\"";
    
            if (value is DateTimeOffset dateTimeOffset)
                return $"\"{dateTimeOffset.ToString("O")}\"";
    
            if (value is IGraphQlInputObject inputObject)
                return BuildInputObject(inputObject, options, level + 2);
    
            if (value is Guid)
                return $"\"{value}\"";
    
            if (value is String @string)
                return $"\"{EscapeGraphQlStringValue(@string)}\"";
    
            if (enumerable != null)
                return BuildEnumerableArgument(enumerable, formatMask, options, level, '[', ']');
    
            if (value is short || value is ushort || value is byte || value is int || value is uint || value is long || value is ulong || value is float || value is double || value is decimal)
                return Convert.ToString(value, CultureInfo.InvariantCulture);
    
            var argumentValue = EscapeGraphQlStringValue(Convert.ToString(value, CultureInfo.InvariantCulture));
            return $"\"{argumentValue}\"";
        }
    
        public static string BuildEnumerableArgument(IEnumerable enumerable, string formatMask, GraphQlBuilderOptions options, int level, char openingSymbol, char closingSymbol)
        {
            var builder = new StringBuilder();
            builder.Append(openingSymbol);
            var delimiter = String.Empty;
            foreach (var item in enumerable)
            {
                builder.Append(delimiter);
    
                if (options.Formatting == Formatting.Indented)
                {
                    builder.AppendLine();
                    builder.Append(GetIndentation(level + 1, options.IndentationSize));
                }
    
                builder.Append(BuildArgumentValue(item, formatMask, options, level));
                delimiter = ",";
            }
    
            builder.Append(closingSymbol);
            return builder.ToString();
        }
    
        public static string BuildInputObject(IGraphQlInputObject inputObject, GraphQlBuilderOptions options, int level)
        {
            var builder = new StringBuilder();
            builder.Append("{");
    
            var isIndentedFormatting = options.Formatting == Formatting.Indented;
            string valueSeparator;
            if (isIndentedFormatting)
            {
                builder.AppendLine();
                valueSeparator = ": ";
            }
            else
                valueSeparator = ":";
    
            var separator = String.Empty;
            foreach (var propertyValue in inputObject.GetPropertyValues())
            {
                var queryBuilderParameter = propertyValue.Value as QueryBuilderParameter;
                var value =
                    queryBuilderParameter?.Name != null
                        ? $"${queryBuilderParameter.Name}"
                        : BuildArgumentValue(queryBuilderParameter == null ? propertyValue.Value : queryBuilderParameter.Value, propertyValue.FormatMask, options, level);
    
                builder.Append(isIndentedFormatting ? GetIndentation(level, options.IndentationSize) : separator);
                builder.Append(propertyValue.Name);
                builder.Append(valueSeparator);
                builder.Append(value);
    
                separator = ",";
    
                if (isIndentedFormatting)
                    builder.AppendLine();
            }
    
            if (isIndentedFormatting)
                builder.Append(GetIndentation(level - 1, options.IndentationSize));
    
            builder.Append("}");
    
            return builder.ToString();
        }
    
        public static string BuildDirective(GraphQlDirective directive, GraphQlBuilderOptions options, int level)
        {
            if (directive == null)
                return String.Empty;
    
            var isIndentedFormatting = options.Formatting == Formatting.Indented;
            var indentationSpace = isIndentedFormatting ? " " : String.Empty;
            var builder = new StringBuilder();
            builder.Append(indentationSpace);
            builder.Append("@");
            builder.Append(directive.Name);
            builder.Append("(");
    
            string separator = null;
            foreach (var kvp in directive.Arguments)
            {
                var argumentName = kvp.Key;
                var argument = kvp.Value;
    
                builder.Append(separator);
                builder.Append(argumentName);
                builder.Append(":");
                builder.Append(indentationSpace);
    
                if (argument.Name == null)
                    builder.Append(BuildArgumentValue(argument.Value, null, options, level));
                else
                {
                    builder.Append("$");
                    builder.Append(argument.Name);
                }
    
                separator = isIndentedFormatting ? ", " : ",";
            }
    
            builder.Append(")");
            return builder.ToString();
        }
    
        public static void ValidateGraphQlIdentifier(string name, string identifier)
        {
            if (identifier != null && !RegexGraphQlIdentifier.IsMatch(identifier))
                throw new ArgumentException("value must match " + RegexGraphQlIdentifier, name);
        }
    
        private static string ConvertEnumToString(Enum @enum)
        {
            var enumMember = @enum.GetType().GetField(@enum.ToString());
            if (enumMember == null)
                throw new InvalidOperationException("enum member resolution failed");
    
            var enumMemberAttribute = (EnumMemberAttribute)enumMember.GetCustomAttribute(typeof(EnumMemberAttribute));
    
            return enumMemberAttribute == null
                ? @enum.ToString()
                : enumMemberAttribute.Value;
        }
    }
    
    public interface IGraphQlArgumentBuilder
    {
        bool TryBuild(GraphQlArgumentBuilderContext context, out string graphQlString);
    }
    
    public class GraphQlArgumentBuilderContext
    {
        public object Value { get; set; }
        public string FormatMask { get; set; }
        public GraphQlBuilderOptions Options { get; set; }
        public int Level { get; set; }
    }
    
    public class DefaultGraphQlArgumentBuilder : IGraphQlArgumentBuilder
    {
        private static readonly Regex RegexWhiteSpace = new Regex(@"\s", RegexOptions.Compiled);
    
        public static readonly DefaultGraphQlArgumentBuilder Instance = new();
    
        public bool TryBuild(GraphQlArgumentBuilderContext context, out string graphQlString)
        {
    #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
            if (context.Value is JValue jValue)
            {
                switch (jValue.Type)
                {
                    case JTokenType.Null:
                        graphQlString = "null";
                        return true;
    
                    case JTokenType.Integer:
                    case JTokenType.Float:
                    case JTokenType.Boolean:
                        graphQlString = GraphQlQueryHelper.BuildArgumentValue(jValue.Value, null, context.Options, context.Level);
                        return true;
    
                    case JTokenType.String:
                        graphQlString = $"\"{GraphQlQueryHelper.EscapeGraphQlStringValue((string)jValue.Value)}\"";
                        return true;
    
                    default:
                        graphQlString = $"\"{jValue.Value}\"";
                        return true;
                }
            }
    
            if (context.Value is JProperty jProperty)
            {
                if (RegexWhiteSpace.IsMatch(jProperty.Name))
                    throw new ArgumentException($"JSON object keys used as GraphQL arguments must not contain whitespace; key: {jProperty.Name}");
    
                graphQlString = $"{jProperty.Name}:{(context.Options.Formatting == Formatting.Indented ? " " : null)}{GraphQlQueryHelper.BuildArgumentValue(jProperty.Value, null, context.Options, context.Level)}";
                return true;
            }
    
            if (context.Value is JObject jObject)
            {
                graphQlString = GraphQlQueryHelper.BuildEnumerableArgument(jObject, null, context.Options, context.Level + 1, '{', '}');
                return true;
            }
    #endif
    
            graphQlString = null;
            return false;
        }
    }
    
    internal struct InputPropertyInfo
    {
        public string Name { get; set; }
        public object Value { get; set; }
        public string FormatMask { get; set; }
    }
    
    internal interface IGraphQlInputObject
    {
        IEnumerable<InputPropertyInfo> GetPropertyValues();
    }
    
    public interface IGraphQlQueryBuilder
    {
        void Clear();
        void IncludeAllFields();
        string Build(Formatting formatting = Formatting.None, byte indentationSize = 2);
    }
    
    public struct QueryBuilderArgumentInfo
    {
        public string ArgumentName { get; set; }
        public QueryBuilderParameter ArgumentValue { get; set; }
        public string FormatMask { get; set; }
    }
    
    public abstract class QueryBuilderParameter
    {
        private string _name;
    
        internal string GraphQlTypeName { get; }
        internal object Value { get; set; }
    
        public string Name
        {
            get => _name;
            set
            {
                GraphQlQueryHelper.ValidateGraphQlIdentifier(nameof(Name), value);
                _name = value;
            }
        }
    
        protected QueryBuilderParameter(string name, string graphQlTypeName, object value)
        {
            Name = name?.Trim();
            GraphQlTypeName = graphQlTypeName?.Replace(" ", null).Replace("\t", null).Replace("\n", null).Replace("\r", null);
            Value = value;
        }
    
        protected QueryBuilderParameter(object value) => Value = value;
    }
    
    public class QueryBuilderParameter<T> : QueryBuilderParameter
    {
        public new T Value
        {
            get => base.Value == null ? default : (T)base.Value;
            set => base.Value = value;
        }
    
        protected QueryBuilderParameter(string name, string graphQlTypeName, T value) : base(name, graphQlTypeName, value)
        {
            EnsureGraphQlTypeName(graphQlTypeName);
        }
    
        protected QueryBuilderParameter(string name, string graphQlTypeName) : base(name, graphQlTypeName, null)
        {
            EnsureGraphQlTypeName(graphQlTypeName);
        }
    
        private QueryBuilderParameter(T value) : base(value)
        {
        }
    
        public void ResetValue() => base.Value = null;
    
        public static implicit operator QueryBuilderParameter<T>(T value) => new QueryBuilderParameter<T>(value);
    
        public static implicit operator T(QueryBuilderParameter<T> parameter) => parameter.Value;
    
        private static void EnsureGraphQlTypeName(string graphQlTypeName)
        {
            if (String.IsNullOrWhiteSpace(graphQlTypeName))
                throw new ArgumentException("value required", nameof(graphQlTypeName));
        }
    }
    
    public class GraphQlQueryParameter<T> : QueryBuilderParameter<T>
    {
        private string _formatMask;
    
        public string FormatMask
        {
            get => _formatMask;
            set => _formatMask =
                typeof(IFormattable).IsAssignableFrom(typeof(T))
                    ? value
                    : throw new InvalidOperationException($"Value must be of {nameof(IFormattable)} type. ");
        }
    
        public GraphQlQueryParameter(string name, string graphQlTypeName = null)
            : base(name, graphQlTypeName ?? GetGraphQlTypeName(typeof(T)))
        {
        }
    
        public GraphQlQueryParameter(string name, string graphQlTypeName, T defaultValue)
            : base(name, graphQlTypeName, defaultValue)
        {
        }
    
        public GraphQlQueryParameter(string name, T defaultValue, bool isNullable = true)
            : base(name, GetGraphQlTypeName(typeof(T), isNullable), defaultValue)
        {
        }
    
        private static string GetGraphQlTypeName(global::System.Type valueType, bool isNullable)
        {
            var graphQlTypeName = GetGraphQlTypeName(valueType);
            if (!isNullable)
                graphQlTypeName += "!";
    
            return graphQlTypeName;
        }
    
        private static string GetGraphQlTypeName(global::System.Type valueType)
        {
            var nullableUnderlyingType = Nullable.GetUnderlyingType(valueType);
            valueType = nullableUnderlyingType ?? valueType;
    
            if (valueType.IsArray)
            {
                var arrayItemType = GetGraphQlTypeName(valueType.GetElementType());
                return arrayItemType == null ? null : "[" + arrayItemType + "]";
            }
    
            if (typeof(IEnumerable).IsAssignableFrom(valueType))
            {
                var genericArguments = valueType.GetGenericArguments();
                if (genericArguments.Length == 1)
                {
                    var listItemType = GetGraphQlTypeName(valueType.GetGenericArguments()[0]);
                    return listItemType == null ? null : "[" + listItemType + "]";
                }
            }
    
            if (GraphQlTypes.ReverseMapping.TryGetValue(valueType, out var graphQlTypeName))
                return graphQlTypeName;
    
            if (valueType == typeof(string))
                return "String";
    
            var nullableSuffix = nullableUnderlyingType == null ? null : "?";
            graphQlTypeName = GetValueTypeGraphQlTypeName(valueType);
            return graphQlTypeName == null ? null : graphQlTypeName + nullableSuffix;
        }
    
        private static string GetValueTypeGraphQlTypeName(global::System.Type valueType)
        {
            if (valueType == typeof(bool))
                return "Boolean";
    
            if (valueType == typeof(float) || valueType == typeof(double) || valueType == typeof(decimal))
                return "Float";
    
            if (valueType == typeof(Guid))
                return "ID";
    
            if (valueType == typeof(sbyte) || valueType == typeof(byte) || valueType == typeof(short) || valueType == typeof(ushort) || valueType == typeof(int) || valueType == typeof(uint) ||
                valueType == typeof(long) || valueType == typeof(ulong))
                return "Int";
    
            return null;
        }
    }
    
    public abstract class GraphQlDirective
    {
        private readonly Dictionary<string, QueryBuilderParameter> _arguments = new Dictionary<string, QueryBuilderParameter>();
    
        internal IEnumerable<KeyValuePair<string, QueryBuilderParameter>> Arguments => _arguments;
    
        public string Name { get; }
    
        protected GraphQlDirective(string name)
        {
            GraphQlQueryHelper.ValidateGraphQlIdentifier(nameof(name), name);
            Name = name;
        }
    
        protected void AddArgument(string name, QueryBuilderParameter value)
        {
            if (value != null)
                _arguments[name] = value;
        }
    }
    
    public class GraphQlBuilderOptions
    {
        public Formatting Formatting { get; set; }
        public byte IndentationSize { get; set; } = 2;
        public IGraphQlArgumentBuilder ArgumentBuilder { get; set; }
    }
    
    public abstract partial class GraphQlQueryBuilder : IGraphQlQueryBuilder
    {
        private readonly Dictionary<string, GraphQlFieldCriteria> _fieldCriteria = new Dictionary<string, GraphQlFieldCriteria>();
    
        private readonly string _operationType;
        private readonly string _operationName;
        private Dictionary<string, GraphQlFragmentCriteria> _fragments;
        private List<QueryBuilderArgumentInfo> _queryParameters;
    
        protected abstract string TypeName { get; }
    
        public abstract IReadOnlyList<GraphQlFieldMetadata> AllFields { get; }
    
        protected GraphQlQueryBuilder(string operationType, string operationName)
        {
            GraphQlQueryHelper.ValidateGraphQlIdentifier(nameof(operationName), operationName);
            _operationType = operationType;
            _operationName = operationName;
        }
    
        public virtual void Clear()
        {
            _fieldCriteria.Clear();
            _fragments?.Clear();
            _queryParameters?.Clear();
        }
    
        void IGraphQlQueryBuilder.IncludeAllFields()
        {
            IncludeAllFields();
        }
    
        public string Build(Formatting formatting = Formatting.None, byte indentationSize = 2)
        {
            return Build(new GraphQlBuilderOptions { Formatting = formatting, IndentationSize = indentationSize });
        }
    
        public string Build(GraphQlBuilderOptions options)
        {
            return Build(options, 1);
        }
    
        protected void IncludeAllFields()
        {
            IncludeFields(AllFields.Where(f => !f.RequiresParameters));
        }
    
        protected virtual string Build(GraphQlBuilderOptions options, int level)
        {
            var isIndentedFormatting = options.Formatting == Formatting.Indented;
            var separator = String.Empty;
            var indentationSpace = isIndentedFormatting ? " " : String.Empty;
            var builder = new StringBuilder();
    
            BuildOperationSignature(builder, options, indentationSpace, level);
    
            if (builder.Length > 0 || level > 1)
                builder.Append(indentationSpace);
    
            builder.Append("{");
    
            if (isIndentedFormatting)
                builder.AppendLine();
    
            separator = String.Empty;
    
            foreach (var criteria in _fieldCriteria.Values.Concat(_fragments?.Values ?? Enumerable.Empty<GraphQlFragmentCriteria>()))
            {
                var fieldCriteria = criteria.Build(options, level);
                if (isIndentedFormatting)
                    builder.AppendLine(fieldCriteria);
                else if (!String.IsNullOrEmpty(fieldCriteria))
                {
                    builder.Append(separator);
                    builder.Append(fieldCriteria);
                }
    
                separator = ",";
            }
    
            if (isIndentedFormatting)
                builder.Append(GraphQlQueryHelper.GetIndentation(level - 1, options.IndentationSize));
    
            builder.Append("}");
    
            return builder.ToString();
        }
    
        private void BuildOperationSignature(StringBuilder builder, GraphQlBuilderOptions options, string indentationSpace, int level)
        {
            if (String.IsNullOrEmpty(_operationType))
                return;
    
            builder.Append(_operationType);
    
            if (!String.IsNullOrEmpty(_operationName))
            {
                builder.Append(" ");
                builder.Append(_operationName);
            }
    
            if (_queryParameters?.Count > 0)
            {
                builder.Append(indentationSpace);
                builder.Append("(");
    
                var separator = String.Empty;
                var isIndentedFormatting = options.Formatting == Formatting.Indented;
    
                foreach (var queryParameterInfo in _queryParameters)
                {
                    if (isIndentedFormatting)
                    {
                        builder.AppendLine(separator);
                        builder.Append(GraphQlQueryHelper.GetIndentation(level, options.IndentationSize));
                    }
                    else
                        builder.Append(separator);
    
                    builder.Append("$");
                    builder.Append(queryParameterInfo.ArgumentValue.Name);
                    builder.Append(":");
                    builder.Append(indentationSpace);
    
                    builder.Append(queryParameterInfo.ArgumentValue.GraphQlTypeName);
    
                    if (!queryParameterInfo.ArgumentValue.GraphQlTypeName.EndsWith("!") && queryParameterInfo.ArgumentValue.Value is not null)
                    {
                        builder.Append(indentationSpace);
                        builder.Append("=");
                        builder.Append(indentationSpace);
                        builder.Append(GraphQlQueryHelper.BuildArgumentValue(queryParameterInfo.ArgumentValue.Value, queryParameterInfo.FormatMask, options, 0));
                    }
    
                    if (!isIndentedFormatting)
                        separator = ",";
                }
    
                builder.Append(")");
            }
        }
    
        protected void IncludeScalarField(string fieldName, string alias, IList<QueryBuilderArgumentInfo> args, GraphQlDirective[] directives)
        {
            _fieldCriteria[alias ?? fieldName] = new GraphQlScalarFieldCriteria(fieldName, alias, args, directives);
        }
    
        protected void IncludeObjectField(string fieldName, string alias, GraphQlQueryBuilder objectFieldQueryBuilder, IList<QueryBuilderArgumentInfo> args, GraphQlDirective[] directives)
        {
            _fieldCriteria[alias ?? fieldName] = new GraphQlObjectFieldCriteria(fieldName, alias, objectFieldQueryBuilder, args, directives);
        }
    
        protected void IncludeFragment(GraphQlQueryBuilder objectFieldQueryBuilder, GraphQlDirective[] directives)
        {
            _fragments = _fragments ?? new Dictionary<string, GraphQlFragmentCriteria>();
            _fragments[objectFieldQueryBuilder.TypeName] = new GraphQlFragmentCriteria(objectFieldQueryBuilder, directives);
        }
    
        protected void ExcludeField(string fieldName)
        {
            if (fieldName == null)
                throw new ArgumentNullException(nameof(fieldName));
    
            _fieldCriteria.Remove(fieldName);
        }
    
        protected void IncludeFields(IEnumerable<GraphQlFieldMetadata> fields)
        {
            IncludeFields(fields, 0, new Dictionary<global::System.Type, int>());
        }
    
        private void IncludeFields(IEnumerable<GraphQlFieldMetadata> fields, int level, Dictionary<global::System.Type, int> parentTypeLevel)
        {
            global::System.Type builderType = null;
    
            foreach (var field in fields)
            {
                if (field.QueryBuilderType == null)
                    IncludeScalarField(field.Name, field.DefaultAlias, null, null);
                else
                {
                    int parentLevel;
                    if (_operationType != null && GetType() == field.QueryBuilderType ||
                        parentTypeLevel.TryGetValue(field.QueryBuilderType, out parentLevel) && parentLevel < level)
                        continue;
    
                    if (builderType == null)
                    {
                        builderType = GetType();
                        parentLevel = parentTypeLevel.TryGetValue(builderType, out parentLevel) ? parentLevel : level;
                        parentTypeLevel[builderType] = Math.Min(level, parentLevel);
                    }
    
                    var queryBuilder = InitializeChildQueryBuilder(field.QueryBuilderType, level, parentTypeLevel);
    
                    foreach (var includeFragmentMethod in field.QueryBuilderType.GetMethods().Where(IsIncludeFragmentMethod))
                    {
                        var includeFragmentParameterInfo = includeFragmentMethod.GetParameters();
                        var includeFragmentQueryBuilderType = includeFragmentParameterInfo[0].ParameterType;
                        if (parentTypeLevel.TryGetValue(includeFragmentQueryBuilderType, out parentLevel))
                            continue;
    
                        var includeFragmentParameters = new object[includeFragmentParameterInfo.Length];
                        includeFragmentParameters[0] = InitializeChildQueryBuilder(includeFragmentQueryBuilderType, level, parentTypeLevel);
                        includeFragmentMethod.Invoke(queryBuilder, includeFragmentParameters);
                    }
    
                    if (queryBuilder._fieldCriteria.Count > 0 || queryBuilder._fragments != null)
                        IncludeObjectField(field.Name, field.DefaultAlias, queryBuilder, null, null);
                }
            }
        }
    
        private static GraphQlQueryBuilder InitializeChildQueryBuilder(global::System.Type queryBuilderType, int level, Dictionary<global::System.Type, int> parentTypeLevel)
        {
            var queryBuilder = (GraphQlQueryBuilder)Activator.CreateInstance(queryBuilderType);
            queryBuilder.IncludeFields(
                queryBuilder.AllFields.Where(f => !f.RequiresParameters),
                level + 1,
                parentTypeLevel);
    
            return queryBuilder;
        }
    
        private static bool IsIncludeFragmentMethod(MethodInfo methodInfo)
        {
            if (!methodInfo.Name.StartsWith("With") || !methodInfo.Name.EndsWith("Fragment"))
                return false;
    
            var parameters = methodInfo.GetParameters();
            return parameters.Count(p => !p.IsOptional) == 1 && parameters[0].ParameterType.IsSubclassOf(typeof(GraphQlQueryBuilder));
        }
    
        protected void AddParameter<T>(GraphQlQueryParameter<T> parameter)
        {
            if (_queryParameters == null)
                _queryParameters = new List<QueryBuilderArgumentInfo>();
    
            _queryParameters.Add(new QueryBuilderArgumentInfo { ArgumentValue = parameter, FormatMask = parameter.FormatMask });
        }
    
        private abstract class GraphQlFieldCriteria
        {
            private readonly IList<QueryBuilderArgumentInfo> _args;
            private readonly GraphQlDirective[] _directives;
    
            protected readonly string FieldName;
            protected readonly string Alias;
    
            protected static string GetIndentation(Formatting formatting, int level, byte indentationSize) =>
                formatting == Formatting.Indented ? GraphQlQueryHelper.GetIndentation(level, indentationSize) : null;
    
            protected GraphQlFieldCriteria(string fieldName, string alias, IList<QueryBuilderArgumentInfo> args, GraphQlDirective[] directives)
            {
                GraphQlQueryHelper.ValidateGraphQlIdentifier(nameof(alias), alias);
                FieldName = fieldName;
                Alias = alias;
                _args = args;
                _directives = directives;
            }
    
            public abstract string Build(GraphQlBuilderOptions options, int level);
    
            protected string BuildArgumentClause(GraphQlBuilderOptions options, int level)
            {
                var separator = options.Formatting == Formatting.Indented ? " " : null;
                var argumentCount = _args?.Count ?? 0;
                if (argumentCount == 0)
                    return String.Empty;
    
                var arguments =
                    _args.Select(
                        a => $"{a.ArgumentName}:{separator}{(a.ArgumentValue.Name == null ? GraphQlQueryHelper.BuildArgumentValue(a.ArgumentValue.Value, a.FormatMask, options, level) : $"${a.ArgumentValue.Name}")}");
    
                return $"({String.Join($",{separator}", arguments)})";
            }
    
            protected string BuildDirectiveClause(GraphQlBuilderOptions options, int level) =>
                _directives == null ? null : String.Concat(_directives.Select(d => d == null ? null : GraphQlQueryHelper.BuildDirective(d, options, level)));
    
            protected static string BuildAliasPrefix(string alias, Formatting formatting)
            {
                var separator = formatting == Formatting.Indented ? " " : String.Empty;
                return String.IsNullOrWhiteSpace(alias) ? null : $"{alias}:{separator}";
            }
        }
    
        private class GraphQlScalarFieldCriteria : GraphQlFieldCriteria
        {
            public GraphQlScalarFieldCriteria(string fieldName, string alias, IList<QueryBuilderArgumentInfo> args, GraphQlDirective[] directives)
                : base(fieldName, alias, args, directives)
            {
            }
    
            public override string Build(GraphQlBuilderOptions options, int level) =>
                GetIndentation(options.Formatting, level, options.IndentationSize) +
                BuildAliasPrefix(Alias, options.Formatting) +
                FieldName +
                BuildArgumentClause(options, level) +
                BuildDirectiveClause(options, level);
        }
    
        private class GraphQlObjectFieldCriteria : GraphQlFieldCriteria
        {
            private readonly GraphQlQueryBuilder _objectQueryBuilder;
    
            public GraphQlObjectFieldCriteria(string fieldName, string alias, GraphQlQueryBuilder objectQueryBuilder, IList<QueryBuilderArgumentInfo> args, GraphQlDirective[] directives)
                : base(fieldName, alias, args, directives)
            {
                _objectQueryBuilder = objectQueryBuilder;
            }
    
            public override string Build(GraphQlBuilderOptions options, int level) =>
                _objectQueryBuilder._fieldCriteria.Count > 0 || _objectQueryBuilder._fragments?.Count > 0
                    ? GetIndentation(options.Formatting, level, options.IndentationSize) + BuildAliasPrefix(Alias, options.Formatting) + FieldName +
                      BuildArgumentClause(options, level) + BuildDirectiveClause(options, level) + _objectQueryBuilder.Build(options, level + 1)
                    : null;
        }
    
        private class GraphQlFragmentCriteria : GraphQlFieldCriteria
        {
            private readonly GraphQlQueryBuilder _objectQueryBuilder;
    
            public GraphQlFragmentCriteria(GraphQlQueryBuilder objectQueryBuilder, GraphQlDirective[] directives) : base(objectQueryBuilder.TypeName, null, null, directives)
            {
                _objectQueryBuilder = objectQueryBuilder;
            }
    
            public override string Build(GraphQlBuilderOptions options, int level) =>
                _objectQueryBuilder._fieldCriteria.Count == 0
                    ? null
                    : GetIndentation(options.Formatting, level, options.IndentationSize) + "..." + (options.Formatting == Formatting.Indented ? " " : null) + "on " +
                      FieldName + BuildArgumentClause(options, level) + BuildDirectiveClause(options, level) + _objectQueryBuilder.Build(options, level + 1);
        }
    }
    
    public abstract partial class GraphQlQueryBuilder<TQueryBuilder> : GraphQlQueryBuilder where TQueryBuilder : GraphQlQueryBuilder<TQueryBuilder>
    {
        protected GraphQlQueryBuilder(string operationType = null, string operationName = null) : base(operationType, operationName)
        {
        }
    
        /// <summary>
        /// Includes all fields that don't require parameters into the query.
        /// </summary>
        public TQueryBuilder WithAllFields()
        {
            IncludeAllFields();
            return (TQueryBuilder)this;
        }
    
        /// <summary>
        /// Includes all scalar fields that don't require parameters into the query.
        /// </summary>
        public TQueryBuilder WithAllScalarFields()
        {
            IncludeFields(AllFields.Where(f => !f.IsComplex && !f.RequiresParameters));
            return (TQueryBuilder)this;
        }
    
        public TQueryBuilder ExceptField(string fieldName)
        {
            ExcludeField(fieldName);
            return (TQueryBuilder)this;
        }
    
        /// <summary>
        /// Includes "__typename" field; included automatically for interface and union types.
        /// </summary>
        public TQueryBuilder WithTypeName(string alias = null, params GraphQlDirective[] directives)
        {
            IncludeScalarField("__typename", alias, null, directives);
            return (TQueryBuilder)this;
        }
    
        protected TQueryBuilder WithScalarField(string fieldName, string alias, GraphQlDirective[] directives, IList<QueryBuilderArgumentInfo> args = null)
        {
            IncludeScalarField(fieldName, alias, args, directives);
            return (TQueryBuilder)this;
        }
    
        protected TQueryBuilder WithObjectField(string fieldName, string alias, GraphQlQueryBuilder queryBuilder, GraphQlDirective[] directives, IList<QueryBuilderArgumentInfo> args = null)
        {
            IncludeObjectField(fieldName, alias, queryBuilder, args, directives);
            return (TQueryBuilder)this;
        }
    
        protected TQueryBuilder WithFragment(GraphQlQueryBuilder queryBuilder, GraphQlDirective[] directives)
        {
            IncludeFragment(queryBuilder, directives);
            return (TQueryBuilder)this;
        }
    
        protected TQueryBuilder WithParameterInternal<T>(GraphQlQueryParameter<T> parameter)
        {
            AddParameter(parameter);
            return (TQueryBuilder)this;
        }
    }
    
    public abstract class GraphQlResponse<TDataContract>
    {
        public TDataContract Data { get; set; }
        public ICollection<GraphQlQueryError> Errors { get; set; }
    }
    
    public class GraphQlQueryError
    {
        public string Message { get; set; }
        public ICollection<GraphQlErrorLocation> Locations { get; set; }
    }
    
    public class GraphQlErrorLocation
    {
        public int Line { get; set; }
        public int Column { get; set; }
    }
    #endregion

    #region GraphQL type helpers
    public static class GraphQlTypes
    {
        public const string Boolean = "Boolean";
        public const string DateTime = "DateTime";
        public const string Float = "Float";
        public const string Id = "ID";
        public const string Int = "Int";
        public const string Json = "JSON";
        public const string Long = "Long";
        public const string String = "String";

        public const string EnumGrowReward = "ENUM_GROW_REWARD";
        public const string EnumLocktokenwhitelistType = "ENUM_LOCKTOKENWHITELIST_TYPE";
        public const string PublicationStatus = "PublicationStatus";

        public const string AboutUs = "AboutUs";
        public const string Account = "Account";
        public const string AuthAdministrator = "AuthAdministrator";
        public const string AuthAdministratorEntityResponseCollection = "AuthAdministratorEntityResponseCollection";
        public const string AuthAdministratorsResource = "AuthAdministratorsResource";
        public const string AuthResource = "AuthResource";
        public const string AuthResourceEntityResponseCollection = "AuthResourceEntityResponseCollection";
        public const string AuthResourceRelationResponseCollection = "AuthResourceRelationResponseCollection";
        public const string AuthRole = "AuthRole";
        public const string AuthRoleEntityResponseCollection = "AuthRoleEntityResponseCollection";
        public const string AuthRoleRelationResponseCollection = "AuthRoleRelationResponseCollection";
        public const string AuthUser = "AuthUser";
        public const string AuthUserEntityResponseCollection = "AuthUserEntityResponseCollection";
        public const string AuthUserRelationResponseCollection = "AuthUserRelationResponseCollection";
        public const string AutoSignUp = "AutoSignUp";
        public const string AutoSignUpEntityResponseCollection = "AutoSignUpEntityResponseCollection";
        public const string Boost = "Boost";
        public const string BuyPoolz = "BuyPoolz";
        public const string BuyPoolzEntityResponseCollection = "BuyPoolzEntityResponseCollection";
        public const string BuyWith = "BuyWith";
        public const string BuyWithEntityResponseCollection = "BuyWithEntityResponseCollection";
        public const string Chain = "Chain";
        public const string ChainEntityResponseCollection = "ChainEntityResponseCollection";
        public const string ChainSetting = "ChainSetting";
        public const string ChainSettingEntityResponseCollection = "ChainSettingEntityResponseCollection";
        public const string ChainSettingRelationResponseCollection = "ChainSettingRelationResponseCollection";
        public const string ComponentChainAddressesChainAddresses = "ComponentChainAddressesChainAddresses";
        public const string ComponentChainAddressesOnlyAddress = "ComponentChainAddressesOnlyAddress";
        public const string ComponentColorIconColorIcon = "ComponentColorIconColorIcon";
        public const string ComponentCompilerSettingCompilerSettings = "ComponentCompilerSettingCompilerSettings";
        public const string ComponentContractOnChainContractOnChain = "ComponentContractOnChainContractOnChain";
        public const string ComponentDictionaryLinks = "ComponentDictionaryLinks";
        public const string ComponentFullTokenDistributionFullTokenDistribution = "ComponentFullTokenDistributionFullTokenDistribution";
        public const string ComponentHeaderSimpleUrlHeaderSimpleUrl = "ComponentHeaderSimpleUrlHeaderSimpleUrl";
        public const string ComponentHighlightsHighlights = "ComponentHighlightsHighlights";
        public const string ComponentHtmlColorTextHtmlColorText = "ComponentHtmlColorTextHtmlColorText";
        public const string ComponentIconTextIconText = "ComponentIconTextIconText";
        public const string ComponentInvestorsInvestors = "ComponentInvestorsInvestors";
        public const string ComponentMainCtaMainCta = "ComponentMainCtaMainCta";
        public const string ComponentOverviewOverview = "ComponentOverviewOverview";
        public const string ComponentPhaseStartEndAmount = "ComponentPhaseStartEndAmount";
        public const string ComponentSectionSection = "ComponentSectionSection";
        public const string ComponentSimpleUrlSimpleUrl = "ComponentSimpleUrlSimpleUrl";
        public const string ComponentSmartLinksSmartLinks = "ComponentSmartLinksSmartLinks";
        public const string ComponentSyntheticZoneSyntetic = "ComponentSyntheticZoneSyntetic";
        public const string ComponentTokenDistributionTokenDistribution = "ComponentTokenDistributionTokenDistribution";
        public const string ComponentTokenomicsListOfStrings = "ComponentTokenomicsListOfStrings";
        public const string ComponentTokenomicsTokenomics = "ComponentTokenomicsTokenomics";
        public const string ComponentUploadPoolUploadPool = "ComponentUploadPoolUploadPool";
        public const string ComponentVersionVersion = "ComponentVersionVersion";
        public const string ComponentVisualTextVisualText = "ComponentVisualTextVisualText";
        public const string Condition = "Condition";
        public const string Contract = "Contract";
        public const string ContractEntityResponseCollection = "ContractEntityResponseCollection";
        public const string ContractsOnChain = "ContractsOnChain";
        public const string ContractsOnChainEntityResponseCollection = "ContractsOnChainEntityResponseCollection";
        public const string ContractType = "ContractType";
        public const string ContractTypeEntityResponseCollection = "ContractTypeEntityResponseCollection";
        public const string Cover = "Cover";
        public const string CoverEntityResponseCollection = "CoverEntityResponseCollection";
        public const string DefaultWallet = "DefaultWallet";
        public const string DefaultWalletEntityResponseCollection = "DefaultWalletEntityResponseCollection";
        public const string DeleteMutationResponse = "DeleteMutationResponse";
        public const string EvmVersion = "EvmVersion";
        public const string EvmVersionEntityResponseCollection = "EvmVersionEntityResponseCollection";
        public const string Footer = "Footer";
        public const string Grow = "Grow";
        public const string GrowBadge = "GrowBadge";
        public const string GrowBadgeEntityResponseCollection = "GrowBadgeEntityResponseCollection";
        public const string GrowEntityResponseCollection = "GrowEntityResponseCollection";
        public const string Header = "Header";
        public const string I18NLocale = "I18NLocale";
        public const string I18NLocaleEntityResponseCollection = "I18NLocaleEntityResponseCollection";
        public const string IdoBadge = "IdoBadge";
        public const string IdoBadgeEntityResponseCollection = "IdoBadgeEntityResponseCollection";
        public const string IgnoreLeaderBoardWallet = "IgnoreLeaderBoardWallet";
        public const string IgnoreLeaderBoardWalletEntityResponseCollection = "IgnoreLeaderBoardWalletEntityResponseCollection";
        public const string Investor = "Investor";
        public const string InvestorEntityResponseCollection = "InvestorEntityResponseCollection";
        public const string InvestTerm = "InvestTerm";
        public const string LatestType = "LatestType";
        public const string LinkType = "LinkType";
        public const string LinkTypeEntityResponseCollection = "LinkTypeEntityResponseCollection";
        public const string LockPoolzTerm = "LockPoolzTerm";
        public const string LockTokenWhitelist = "LockTokenWhitelist";
        public const string LockTokenWhitelistEntityResponseCollection = "LockTokenWhitelistEntityResponseCollection";
        public const string Main = "Main";
        public const string MarketCapBadge = "MarketCapBadge";
        public const string MarketCapBadgeEntityResponseCollection = "MarketCapBadgeEntityResponseCollection";
        public const string MediaKit = "MediaKit";
        public const string MediaKitEntityResponseCollection = "MediaKitEntityResponseCollection";
        public const string Mutation = "Mutation";
        public const string NonEvmChain = "NonEvmChain";
        public const string NonEvmChainEntityResponseCollection = "NonEvmChainEntityResponseCollection";
        public const string OpenGrant = "OpenGrant";
        public const string OpenGrantEntityResponseCollection = "OpenGrantEntityResponseCollection";
        public const string OurPartner = "OurPartner";
        public const string OurPartnerEntityResponseCollection = "OurPartnerEntityResponseCollection";
        public const string PageInfo = "PageInfo";
        public const string PageInfoEntityResponseCollection = "PageInfoEntityResponseCollection";
        public const string Pagination = "Pagination";
        public const string PoolzBoutique = "PoolzBoutique";
        public const string PoolzBoutiqueEntityResponseCollection = "PoolzBoutiqueEntityResponseCollection";
        public const string PragmaVersion = "PragmaVersion";
        public const string PragmaVersionEntityResponseCollection = "PragmaVersionEntityResponseCollection";
        public const string Privacy = "Privacy";
        public const string ProjectsInformation = "ProjectsInformation";
        public const string ProjectsInformationEntityResponseCollection = "ProjectsInformationEntityResponseCollection";
        public const string ProjectsInformationRelationResponseCollection = "ProjectsInformationRelationResponseCollection";
        public const string Query = "Query";
        public const string ReviewWorkflowsWorkflow = "ReviewWorkflowsWorkflow";
        public const string ReviewWorkflowsWorkflowEntityResponseCollection = "ReviewWorkflowsWorkflowEntityResponseCollection";
        public const string ReviewWorkflowsWorkflowStage = "ReviewWorkflowsWorkflowStage";
        public const string ReviewWorkflowsWorkflowStageEntityResponseCollection = "ReviewWorkflowsWorkflowStageEntityResponseCollection";
        public const string ReviewWorkflowsWorkflowStageRelationResponseCollection = "ReviewWorkflowsWorkflowStageRelationResponseCollection";
        public const string SeasonPass = "SeasonPass";
        public const string SeasonPassEntityResponseCollection = "SeasonPassEntityResponseCollection";
        public const string StakingCoolDown = "StakingCoolDown";
        public const string StakingCoolDownEntityResponseCollection = "StakingCoolDownEntityResponseCollection";
        public const string Tokenomic = "Tokenomic";
        public const string TradeContract = "TradeContract";
        public const string TradeContractEntityResponseCollection = "TradeContractEntityResponseCollection";
        public const string UploadFile = "UploadFile";
        public const string UploadFileEntityResponseCollection = "UploadFileEntityResponseCollection";
        public const string UploadFileRelationResponseCollection = "UploadFileRelationResponseCollection";
        public const string UsersPermissionsCreateRolePayload = "UsersPermissionsCreateRolePayload";
        public const string UsersPermissionsDeleteRolePayload = "UsersPermissionsDeleteRolePayload";
        public const string UsersPermissionsLoginPayload = "UsersPermissionsLoginPayload";
        public const string UsersPermissionsMe = "UsersPermissionsMe";
        public const string UsersPermissionsMeRole = "UsersPermissionsMeRole";
        public const string UsersPermissionsPasswordPayload = "UsersPermissionsPasswordPayload";
        public const string UsersPermissionsPermission = "UsersPermissionsPermission";
        public const string UsersPermissionsPermissionRelationResponseCollection = "UsersPermissionsPermissionRelationResponseCollection";
        public const string UsersPermissionsRole = "UsersPermissionsRole";
        public const string UsersPermissionsRoleEntityResponseCollection = "UsersPermissionsRoleEntityResponseCollection";
        public const string UsersPermissionsUpdateRolePayload = "UsersPermissionsUpdateRolePayload";
        public const string UsersPermissionsUser = "UsersPermissionsUser";
        public const string UsersPermissionsUserEntityResponse = "UsersPermissionsUserEntityResponse";
        public const string UsersPermissionsUserEntityResponseCollection = "UsersPermissionsUserEntityResponseCollection";
        public const string UsersPermissionsUserRelationResponseCollection = "UsersPermissionsUserRelationResponseCollection";
        public const string VaultFaq = "VaultFaq";
        public const string VaultFaqEntityResponseCollection = "VaultFaqEntityResponseCollection";

        public const string AboutUsInput = "AboutUsInput";
        public const string AccountInput = "AccountInput";
        public const string AuthAdministratorFiltersInput = "AuthAdministratorFiltersInput";
        public const string AuthAdministratorInput = "AuthAdministratorInput";
        public const string AuthAdministratorsResourceInput = "AuthAdministratorsResourceInput";
        public const string AuthResourceFiltersInput = "AuthResourceFiltersInput";
        public const string AuthResourceInput = "AuthResourceInput";
        public const string AuthRoleFiltersInput = "AuthRoleFiltersInput";
        public const string AuthRoleInput = "AuthRoleInput";
        public const string AuthUserFiltersInput = "AuthUserFiltersInput";
        public const string AuthUserInput = "AuthUserInput";
        public const string AutoSignUpFiltersInput = "AutoSignUpFiltersInput";
        public const string AutoSignUpInput = "AutoSignUpInput";
        public const string BooleanFilterInput = "BooleanFilterInput";
        public const string BoostInput = "BoostInput";
        public const string BuyPoolzFiltersInput = "BuyPoolzFiltersInput";
        public const string BuyPoolzInput = "BuyPoolzInput";
        public const string BuyWithFiltersInput = "BuyWithFiltersInput";
        public const string BuyWithInput = "BuyWithInput";
        public const string ChainFiltersInput = "ChainFiltersInput";
        public const string ChainInput = "ChainInput";
        public const string ChainSettingFiltersInput = "ChainSettingFiltersInput";
        public const string ChainSettingInput = "ChainSettingInput";
        public const string ComponentChainAddressesChainAddressesFiltersInput = "ComponentChainAddressesChainAddressesFiltersInput";
        public const string ComponentChainAddressesChainAddressesInput = "ComponentChainAddressesChainAddressesInput";
        public const string ComponentChainAddressesOnlyAddressFiltersInput = "ComponentChainAddressesOnlyAddressFiltersInput";
        public const string ComponentChainAddressesOnlyAddressInput = "ComponentChainAddressesOnlyAddressInput";
        public const string ComponentColorIconColorIconFiltersInput = "ComponentColorIconColorIconFiltersInput";
        public const string ComponentColorIconColorIconInput = "ComponentColorIconColorIconInput";
        public const string ComponentCompilerSettingCompilerSettingsFiltersInput = "ComponentCompilerSettingCompilerSettingsFiltersInput";
        public const string ComponentCompilerSettingCompilerSettingsInput = "ComponentCompilerSettingCompilerSettingsInput";
        public const string ComponentContractOnChainContractOnChainFiltersInput = "ComponentContractOnChainContractOnChainFiltersInput";
        public const string ComponentContractOnChainContractOnChainInput = "ComponentContractOnChainContractOnChainInput";
        public const string ComponentDictionaryLinksFiltersInput = "ComponentDictionaryLinksFiltersInput";
        public const string ComponentDictionaryLinksInput = "ComponentDictionaryLinksInput";
        public const string ComponentFullTokenDistributionFullTokenDistributionFiltersInput = "ComponentFullTokenDistributionFullTokenDistributionFiltersInput";
        public const string ComponentFullTokenDistributionFullTokenDistributionInput = "ComponentFullTokenDistributionFullTokenDistributionInput";
        public const string ComponentHeaderSimpleUrlHeaderSimpleUrlFiltersInput = "ComponentHeaderSimpleUrlHeaderSimpleUrlFiltersInput";
        public const string ComponentHeaderSimpleUrlHeaderSimpleUrlInput = "ComponentHeaderSimpleUrlHeaderSimpleUrlInput";
        public const string ComponentHighlightsHighlightsFiltersInput = "ComponentHighlightsHighlightsFiltersInput";
        public const string ComponentHighlightsHighlightsInput = "ComponentHighlightsHighlightsInput";
        public const string ComponentHtmlColorTextHtmlColorTextFiltersInput = "ComponentHtmlColorTextHtmlColorTextFiltersInput";
        public const string ComponentHtmlColorTextHtmlColorTextInput = "ComponentHtmlColorTextHtmlColorTextInput";
        public const string ComponentIconTextIconTextFiltersInput = "ComponentIconTextIconTextFiltersInput";
        public const string ComponentIconTextIconTextInput = "ComponentIconTextIconTextInput";
        public const string ComponentInvestorsInvestorsFiltersInput = "ComponentInvestorsInvestorsFiltersInput";
        public const string ComponentInvestorsInvestorsInput = "ComponentInvestorsInvestorsInput";
        public const string ComponentMainCtaMainCtaFiltersInput = "ComponentMainCtaMainCtaFiltersInput";
        public const string ComponentMainCtaMainCtaInput = "ComponentMainCtaMainCtaInput";
        public const string ComponentOverviewOverviewFiltersInput = "ComponentOverviewOverviewFiltersInput";
        public const string ComponentOverviewOverviewInput = "ComponentOverviewOverviewInput";
        public const string ComponentPhaseStartEndAmountFiltersInput = "ComponentPhaseStartEndAmountFiltersInput";
        public const string ComponentPhaseStartEndAmountInput = "ComponentPhaseStartEndAmountInput";
        public const string ComponentSectionSectionInput = "ComponentSectionSectionInput";
        public const string ComponentSimpleUrlSimpleUrlFiltersInput = "ComponentSimpleUrlSimpleUrlFiltersInput";
        public const string ComponentSimpleUrlSimpleUrlInput = "ComponentSimpleUrlSimpleUrlInput";
        public const string ComponentSmartLinksSmartLinksFiltersInput = "ComponentSmartLinksSmartLinksFiltersInput";
        public const string ComponentSmartLinksSmartLinksInput = "ComponentSmartLinksSmartLinksInput";
        public const string ComponentSyntheticZoneSynteticFiltersInput = "ComponentSyntheticZoneSynteticFiltersInput";
        public const string ComponentSyntheticZoneSynteticInput = "ComponentSyntheticZoneSynteticInput";
        public const string ComponentTokenDistributionTokenDistributionFiltersInput = "ComponentTokenDistributionTokenDistributionFiltersInput";
        public const string ComponentTokenDistributionTokenDistributionInput = "ComponentTokenDistributionTokenDistributionInput";
        public const string ComponentTokenomicsListOfStringsFiltersInput = "ComponentTokenomicsListOfStringsFiltersInput";
        public const string ComponentTokenomicsListOfStringsInput = "ComponentTokenomicsListOfStringsInput";
        public const string ComponentTokenomicsTokenomicsFiltersInput = "ComponentTokenomicsTokenomicsFiltersInput";
        public const string ComponentTokenomicsTokenomicsInput = "ComponentTokenomicsTokenomicsInput";
        public const string ComponentUploadPoolUploadPoolFiltersInput = "ComponentUploadPoolUploadPoolFiltersInput";
        public const string ComponentUploadPoolUploadPoolInput = "ComponentUploadPoolUploadPoolInput";
        public const string ComponentVersionVersionFiltersInput = "ComponentVersionVersionFiltersInput";
        public const string ComponentVersionVersionInput = "ComponentVersionVersionInput";
        public const string ComponentVisualTextVisualTextFiltersInput = "ComponentVisualTextVisualTextFiltersInput";
        public const string ComponentVisualTextVisualTextInput = "ComponentVisualTextVisualTextInput";
        public const string ConditionInput = "ConditionInput";
        public const string ContractFiltersInput = "ContractFiltersInput";
        public const string ContractInput = "ContractInput";
        public const string ContractsOnChainFiltersInput = "ContractsOnChainFiltersInput";
        public const string ContractsOnChainInput = "ContractsOnChainInput";
        public const string ContractTypeFiltersInput = "ContractTypeFiltersInput";
        public const string ContractTypeInput = "ContractTypeInput";
        public const string CoverFiltersInput = "CoverFiltersInput";
        public const string CoverInput = "CoverInput";
        public const string DateTimeFilterInput = "DateTimeFilterInput";
        public const string DefaultWalletFiltersInput = "DefaultWalletFiltersInput";
        public const string DefaultWalletInput = "DefaultWalletInput";
        public const string EvmVersionFiltersInput = "EvmVersionFiltersInput";
        public const string EvmVersionInput = "EvmVersionInput";
        public const string FileInfoInput = "FileInfoInput";
        public const string FloatFilterInput = "FloatFilterInput";
        public const string FooterInput = "FooterInput";
        public const string GrowBadgeFiltersInput = "GrowBadgeFiltersInput";
        public const string GrowBadgeInput = "GrowBadgeInput";
        public const string GrowFiltersInput = "GrowFiltersInput";
        public const string GrowInput = "GrowInput";
        public const string HeaderInput = "HeaderInput";
        public const string I18NLocaleFiltersInput = "I18NLocaleFiltersInput";
        public const string IdFilterInput = "IDFilterInput";
        public const string IdoBadgeFiltersInput = "IdoBadgeFiltersInput";
        public const string IdoBadgeInput = "IdoBadgeInput";
        public const string IgnoreLeaderBoardWalletFiltersInput = "IgnoreLeaderBoardWalletFiltersInput";
        public const string IgnoreLeaderBoardWalletInput = "IgnoreLeaderBoardWalletInput";
        public const string IntFilterInput = "IntFilterInput";
        public const string InvestorFiltersInput = "InvestorFiltersInput";
        public const string InvestorInput = "InvestorInput";
        public const string InvestTermInput = "InvestTermInput";
        public const string JsonFilterInput = "JSONFilterInput";
        public const string LatestTypeInput = "LatestTypeInput";
        public const string LinkTypeFiltersInput = "LinkTypeFiltersInput";
        public const string LinkTypeInput = "LinkTypeInput";
        public const string LockPoolzTermInput = "LockPoolzTermInput";
        public const string LockTokenWhitelistFiltersInput = "LockTokenWhitelistFiltersInput";
        public const string LockTokenWhitelistInput = "LockTokenWhitelistInput";
        public const string LongFilterInput = "LongFilterInput";
        public const string MainInput = "MainInput";
        public const string MarketCapBadgeFiltersInput = "MarketCapBadgeFiltersInput";
        public const string MarketCapBadgeInput = "MarketCapBadgeInput";
        public const string MediaKitFiltersInput = "MediaKitFiltersInput";
        public const string MediaKitInput = "MediaKitInput";
        public const string NonEvmChainFiltersInput = "NonEvmChainFiltersInput";
        public const string NonEvmChainInput = "NonEvmChainInput";
        public const string OpenGrantFiltersInput = "OpenGrantFiltersInput";
        public const string OpenGrantInput = "OpenGrantInput";
        public const string OurPartnerFiltersInput = "OurPartnerFiltersInput";
        public const string OurPartnerInput = "OurPartnerInput";
        public const string PageInfoFiltersInput = "PageInfoFiltersInput";
        public const string PageInfoInput = "PageInfoInput";
        public const string PaginationArg = "PaginationArg";
        public const string PoolzBoutiqueFiltersInput = "PoolzBoutiqueFiltersInput";
        public const string PoolzBoutiqueInput = "PoolzBoutiqueInput";
        public const string PragmaVersionFiltersInput = "PragmaVersionFiltersInput";
        public const string PragmaVersionInput = "PragmaVersionInput";
        public const string PrivacyInput = "PrivacyInput";
        public const string ProjectsInformationFiltersInput = "ProjectsInformationFiltersInput";
        public const string ProjectsInformationInput = "ProjectsInformationInput";
        public const string ReviewWorkflowsWorkflowFiltersInput = "ReviewWorkflowsWorkflowFiltersInput";
        public const string ReviewWorkflowsWorkflowInput = "ReviewWorkflowsWorkflowInput";
        public const string ReviewWorkflowsWorkflowStageFiltersInput = "ReviewWorkflowsWorkflowStageFiltersInput";
        public const string ReviewWorkflowsWorkflowStageInput = "ReviewWorkflowsWorkflowStageInput";
        public const string SeasonPassFiltersInput = "SeasonPassFiltersInput";
        public const string SeasonPassInput = "SeasonPassInput";
        public const string StakingCoolDownFiltersInput = "StakingCoolDownFiltersInput";
        public const string StakingCoolDownInput = "StakingCoolDownInput";
        public const string StringFilterInput = "StringFilterInput";
        public const string TokenomicInput = "TokenomicInput";
        public const string TradeContractFiltersInput = "TradeContractFiltersInput";
        public const string TradeContractInput = "TradeContractInput";
        public const string UploadFileFiltersInput = "UploadFileFiltersInput";
        public const string UsersPermissionsLoginInput = "UsersPermissionsLoginInput";
        public const string UsersPermissionsPermissionFiltersInput = "UsersPermissionsPermissionFiltersInput";
        public const string UsersPermissionsRegisterInput = "UsersPermissionsRegisterInput";
        public const string UsersPermissionsRoleFiltersInput = "UsersPermissionsRoleFiltersInput";
        public const string UsersPermissionsRoleInput = "UsersPermissionsRoleInput";
        public const string UsersPermissionsUserFiltersInput = "UsersPermissionsUserFiltersInput";
        public const string UsersPermissionsUserInput = "UsersPermissionsUserInput";
        public const string VaultFaqFiltersInput = "VaultFaqFiltersInput";
        public const string VaultFaqInput = "VaultFaqInput";

        public const string GenericMorph = "GenericMorph";

        public static readonly IReadOnlyDictionary<global::System.Type, string> ReverseMapping =
            new Dictionary<global::System.Type, string>
            {
                { typeof(string), "ID" },
                { typeof(DateTime), "DateTime" },
                { typeof(decimal), "Float" },
                { typeof(bool), "Boolean" },
                { typeof(int), "Int" },
                { typeof(long), "Long" },
                { typeof(AboutUsInput), "AboutUsInput" },
                { typeof(AccountInput), "AccountInput" },
                { typeof(AuthAdministratorFiltersInput), "AuthAdministratorFiltersInput" },
                { typeof(AuthAdministratorInput), "AuthAdministratorInput" },
                { typeof(AuthAdministratorsResourceInput), "AuthAdministratorsResourceInput" },
                { typeof(AuthResourceFiltersInput), "AuthResourceFiltersInput" },
                { typeof(AuthResourceInput), "AuthResourceInput" },
                { typeof(AuthRoleFiltersInput), "AuthRoleFiltersInput" },
                { typeof(AuthRoleInput), "AuthRoleInput" },
                { typeof(AuthUserFiltersInput), "AuthUserFiltersInput" },
                { typeof(AuthUserInput), "AuthUserInput" },
                { typeof(AutoSignUpFiltersInput), "AutoSignUpFiltersInput" },
                { typeof(AutoSignUpInput), "AutoSignUpInput" },
                { typeof(BooleanFilterInput), "BooleanFilterInput" },
                { typeof(BoostInput), "BoostInput" },
                { typeof(BuyPoolzFiltersInput), "BuyPoolzFiltersInput" },
                { typeof(BuyPoolzInput), "BuyPoolzInput" },
                { typeof(BuyWithFiltersInput), "BuyWithFiltersInput" },
                { typeof(BuyWithInput), "BuyWithInput" },
                { typeof(ChainFiltersInput), "ChainFiltersInput" },
                { typeof(ChainInput), "ChainInput" },
                { typeof(ChainSettingFiltersInput), "ChainSettingFiltersInput" },
                { typeof(ChainSettingInput), "ChainSettingInput" },
                { typeof(ComponentChainAddressesChainAddressesFiltersInput), "ComponentChainAddressesChainAddressesFiltersInput" },
                { typeof(ComponentChainAddressesChainAddressesInput), "ComponentChainAddressesChainAddressesInput" },
                { typeof(ComponentChainAddressesOnlyAddressFiltersInput), "ComponentChainAddressesOnlyAddressFiltersInput" },
                { typeof(ComponentChainAddressesOnlyAddressInput), "ComponentChainAddressesOnlyAddressInput" },
                { typeof(ComponentColorIconColorIconFiltersInput), "ComponentColorIconColorIconFiltersInput" },
                { typeof(ComponentColorIconColorIconInput), "ComponentColorIconColorIconInput" },
                { typeof(ComponentCompilerSettingCompilerSettingsFiltersInput), "ComponentCompilerSettingCompilerSettingsFiltersInput" },
                { typeof(ComponentCompilerSettingCompilerSettingsInput), "ComponentCompilerSettingCompilerSettingsInput" },
                { typeof(ComponentContractOnChainContractOnChainFiltersInput), "ComponentContractOnChainContractOnChainFiltersInput" },
                { typeof(ComponentContractOnChainContractOnChainInput), "ComponentContractOnChainContractOnChainInput" },
                { typeof(ComponentDictionaryLinksFiltersInput), "ComponentDictionaryLinksFiltersInput" },
                { typeof(ComponentDictionaryLinksInput), "ComponentDictionaryLinksInput" },
                { typeof(ComponentFullTokenDistributionFullTokenDistributionFiltersInput), "ComponentFullTokenDistributionFullTokenDistributionFiltersInput" },
                { typeof(ComponentFullTokenDistributionFullTokenDistributionInput), "ComponentFullTokenDistributionFullTokenDistributionInput" },
                { typeof(ComponentHeaderSimpleUrlHeaderSimpleUrlFiltersInput), "ComponentHeaderSimpleUrlHeaderSimpleUrlFiltersInput" },
                { typeof(ComponentHeaderSimpleUrlHeaderSimpleUrlInput), "ComponentHeaderSimpleUrlHeaderSimpleUrlInput" },
                { typeof(ComponentHighlightsHighlightsFiltersInput), "ComponentHighlightsHighlightsFiltersInput" },
                { typeof(ComponentHighlightsHighlightsInput), "ComponentHighlightsHighlightsInput" },
                { typeof(ComponentHtmlColorTextHtmlColorTextFiltersInput), "ComponentHtmlColorTextHtmlColorTextFiltersInput" },
                { typeof(ComponentHtmlColorTextHtmlColorTextInput), "ComponentHtmlColorTextHtmlColorTextInput" },
                { typeof(ComponentIconTextIconTextFiltersInput), "ComponentIconTextIconTextFiltersInput" },
                { typeof(ComponentIconTextIconTextInput), "ComponentIconTextIconTextInput" },
                { typeof(ComponentInvestorsInvestorsFiltersInput), "ComponentInvestorsInvestorsFiltersInput" },
                { typeof(ComponentInvestorsInvestorsInput), "ComponentInvestorsInvestorsInput" },
                { typeof(ComponentMainCtaMainCtaFiltersInput), "ComponentMainCtaMainCtaFiltersInput" },
                { typeof(ComponentMainCtaMainCtaInput), "ComponentMainCtaMainCtaInput" },
                { typeof(ComponentOverviewOverviewFiltersInput), "ComponentOverviewOverviewFiltersInput" },
                { typeof(ComponentOverviewOverviewInput), "ComponentOverviewOverviewInput" },
                { typeof(ComponentPhaseStartEndAmountFiltersInput), "ComponentPhaseStartEndAmountFiltersInput" },
                { typeof(ComponentPhaseStartEndAmountInput), "ComponentPhaseStartEndAmountInput" },
                { typeof(ComponentSectionSectionInput), "ComponentSectionSectionInput" },
                { typeof(ComponentSimpleUrlSimpleUrlFiltersInput), "ComponentSimpleUrlSimpleUrlFiltersInput" },
                { typeof(ComponentSimpleUrlSimpleUrlInput), "ComponentSimpleUrlSimpleUrlInput" },
                { typeof(ComponentSmartLinksSmartLinksFiltersInput), "ComponentSmartLinksSmartLinksFiltersInput" },
                { typeof(ComponentSmartLinksSmartLinksInput), "ComponentSmartLinksSmartLinksInput" },
                { typeof(ComponentSyntheticZoneSynteticFiltersInput), "ComponentSyntheticZoneSynteticFiltersInput" },
                { typeof(ComponentSyntheticZoneSynteticInput), "ComponentSyntheticZoneSynteticInput" },
                { typeof(ComponentTokenDistributionTokenDistributionFiltersInput), "ComponentTokenDistributionTokenDistributionFiltersInput" },
                { typeof(ComponentTokenDistributionTokenDistributionInput), "ComponentTokenDistributionTokenDistributionInput" },
                { typeof(ComponentTokenomicsListOfStringsFiltersInput), "ComponentTokenomicsListOfStringsFiltersInput" },
                { typeof(ComponentTokenomicsListOfStringsInput), "ComponentTokenomicsListOfStringsInput" },
                { typeof(ComponentTokenomicsTokenomicsFiltersInput), "ComponentTokenomicsTokenomicsFiltersInput" },
                { typeof(ComponentTokenomicsTokenomicsInput), "ComponentTokenomicsTokenomicsInput" },
                { typeof(ComponentUploadPoolUploadPoolFiltersInput), "ComponentUploadPoolUploadPoolFiltersInput" },
                { typeof(ComponentUploadPoolUploadPoolInput), "ComponentUploadPoolUploadPoolInput" },
                { typeof(ComponentVersionVersionFiltersInput), "ComponentVersionVersionFiltersInput" },
                { typeof(ComponentVersionVersionInput), "ComponentVersionVersionInput" },
                { typeof(ComponentVisualTextVisualTextFiltersInput), "ComponentVisualTextVisualTextFiltersInput" },
                { typeof(ComponentVisualTextVisualTextInput), "ComponentVisualTextVisualTextInput" },
                { typeof(ConditionInput), "ConditionInput" },
                { typeof(ContractFiltersInput), "ContractFiltersInput" },
                { typeof(ContractInput), "ContractInput" },
                { typeof(ContractsOnChainFiltersInput), "ContractsOnChainFiltersInput" },
                { typeof(ContractsOnChainInput), "ContractsOnChainInput" },
                { typeof(ContractTypeFiltersInput), "ContractTypeFiltersInput" },
                { typeof(ContractTypeInput), "ContractTypeInput" },
                { typeof(CoverFiltersInput), "CoverFiltersInput" },
                { typeof(CoverInput), "CoverInput" },
                { typeof(DateTimeFilterInput), "DateTimeFilterInput" },
                { typeof(DefaultWalletFiltersInput), "DefaultWalletFiltersInput" },
                { typeof(DefaultWalletInput), "DefaultWalletInput" },
                { typeof(EvmVersionFiltersInput), "EvmVersionFiltersInput" },
                { typeof(EvmVersionInput), "EvmVersionInput" },
                { typeof(FileInfoInput), "FileInfoInput" },
                { typeof(FloatFilterInput), "FloatFilterInput" },
                { typeof(FooterInput), "FooterInput" },
                { typeof(GrowBadgeFiltersInput), "GrowBadgeFiltersInput" },
                { typeof(GrowBadgeInput), "GrowBadgeInput" },
                { typeof(GrowFiltersInput), "GrowFiltersInput" },
                { typeof(GrowInput), "GrowInput" },
                { typeof(HeaderInput), "HeaderInput" },
                { typeof(I18NLocaleFiltersInput), "I18NLocaleFiltersInput" },
                { typeof(IdFilterInput), "IDFilterInput" },
                { typeof(IdoBadgeFiltersInput), "IdoBadgeFiltersInput" },
                { typeof(IdoBadgeInput), "IdoBadgeInput" },
                { typeof(IgnoreLeaderBoardWalletFiltersInput), "IgnoreLeaderBoardWalletFiltersInput" },
                { typeof(IgnoreLeaderBoardWalletInput), "IgnoreLeaderBoardWalletInput" },
                { typeof(IntFilterInput), "IntFilterInput" },
                { typeof(InvestorFiltersInput), "InvestorFiltersInput" },
                { typeof(InvestorInput), "InvestorInput" },
                { typeof(InvestTermInput), "InvestTermInput" },
                { typeof(JsonFilterInput), "JSONFilterInput" },
                { typeof(LatestTypeInput), "LatestTypeInput" },
                { typeof(LinkTypeFiltersInput), "LinkTypeFiltersInput" },
                { typeof(LinkTypeInput), "LinkTypeInput" },
                { typeof(LockPoolzTermInput), "LockPoolzTermInput" },
                { typeof(LockTokenWhitelistFiltersInput), "LockTokenWhitelistFiltersInput" },
                { typeof(LockTokenWhitelistInput), "LockTokenWhitelistInput" },
                { typeof(LongFilterInput), "LongFilterInput" },
                { typeof(MainInput), "MainInput" },
                { typeof(MarketCapBadgeFiltersInput), "MarketCapBadgeFiltersInput" },
                { typeof(MarketCapBadgeInput), "MarketCapBadgeInput" },
                { typeof(MediaKitFiltersInput), "MediaKitFiltersInput" },
                { typeof(MediaKitInput), "MediaKitInput" },
                { typeof(NonEvmChainFiltersInput), "NonEvmChainFiltersInput" },
                { typeof(NonEvmChainInput), "NonEvmChainInput" },
                { typeof(OpenGrantFiltersInput), "OpenGrantFiltersInput" },
                { typeof(OpenGrantInput), "OpenGrantInput" },
                { typeof(OurPartnerFiltersInput), "OurPartnerFiltersInput" },
                { typeof(OurPartnerInput), "OurPartnerInput" },
                { typeof(PageInfoFiltersInput), "PageInfoFiltersInput" },
                { typeof(PageInfoInput), "PageInfoInput" },
                { typeof(PaginationArg), "PaginationArg" },
                { typeof(PoolzBoutiqueFiltersInput), "PoolzBoutiqueFiltersInput" },
                { typeof(PoolzBoutiqueInput), "PoolzBoutiqueInput" },
                { typeof(PragmaVersionFiltersInput), "PragmaVersionFiltersInput" },
                { typeof(PragmaVersionInput), "PragmaVersionInput" },
                { typeof(PrivacyInput), "PrivacyInput" },
                { typeof(ProjectsInformationFiltersInput), "ProjectsInformationFiltersInput" },
                { typeof(ProjectsInformationInput), "ProjectsInformationInput" },
                { typeof(ReviewWorkflowsWorkflowFiltersInput), "ReviewWorkflowsWorkflowFiltersInput" },
                { typeof(ReviewWorkflowsWorkflowInput), "ReviewWorkflowsWorkflowInput" },
                { typeof(ReviewWorkflowsWorkflowStageFiltersInput), "ReviewWorkflowsWorkflowStageFiltersInput" },
                { typeof(ReviewWorkflowsWorkflowStageInput), "ReviewWorkflowsWorkflowStageInput" },
                { typeof(SeasonPassFiltersInput), "SeasonPassFiltersInput" },
                { typeof(SeasonPassInput), "SeasonPassInput" },
                { typeof(StakingCoolDownFiltersInput), "StakingCoolDownFiltersInput" },
                { typeof(StakingCoolDownInput), "StakingCoolDownInput" },
                { typeof(StringFilterInput), "StringFilterInput" },
                { typeof(TokenomicInput), "TokenomicInput" },
                { typeof(TradeContractFiltersInput), "TradeContractFiltersInput" },
                { typeof(TradeContractInput), "TradeContractInput" },
                { typeof(UploadFileFiltersInput), "UploadFileFiltersInput" },
                { typeof(UsersPermissionsLoginInput), "UsersPermissionsLoginInput" },
                { typeof(UsersPermissionsPermissionFiltersInput), "UsersPermissionsPermissionFiltersInput" },
                { typeof(UsersPermissionsRegisterInput), "UsersPermissionsRegisterInput" },
                { typeof(UsersPermissionsRoleFiltersInput), "UsersPermissionsRoleFiltersInput" },
                { typeof(UsersPermissionsRoleInput), "UsersPermissionsRoleInput" },
                { typeof(UsersPermissionsUserFiltersInput), "UsersPermissionsUserFiltersInput" },
                { typeof(UsersPermissionsUserInput), "UsersPermissionsUserInput" },
                { typeof(VaultFaqFiltersInput), "VaultFaqFiltersInput" },
                { typeof(VaultFaqInput), "VaultFaqInput" }
            };
    }
    #endregion

    #region enums
    public enum PublicationStatus
    {
        [EnumMember(Value = "DRAFT")] Draft,
        [EnumMember(Value = "PUBLISHED")] Published
    }

    public enum EnumGrowReward
    {
        Token,
        Whitelist,
        Stable,
        [EnumMember(Value = "NFT")] Nft,
        IDO_Token
    }

    public enum EnumLocktokenwhitelistType
    {
        OriginalToken,
        Envelope,
        Synthetic,
        LockDealNFT
    }
    #endregion

    #region directives
    public class IncludeDirective : GraphQlDirective
    {
        public IncludeDirective(QueryBuilderParameter<bool> @if) : base("include")
        {
            AddArgument("if", @if);
        }
    }

    public class SkipDirective : GraphQlDirective
    {
        public SkipDirective(QueryBuilderParameter<bool> @if) : base("skip")
        {
            AddArgument("if", @if);
        }
    }
    #endregion

    #region builder classes
    public partial class PaginationQueryBuilder : GraphQlQueryBuilder<PaginationQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "total" },
                new GraphQlFieldMetadata { Name = "page" },
                new GraphQlFieldMetadata { Name = "pageSize" },
                new GraphQlFieldMetadata { Name = "pageCount" }
            };

        protected override string TypeName { get { return "Pagination"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PaginationQueryBuilder WithTotal(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("total", alias, new GraphQlDirective[] { include, skip });
        }

        public PaginationQueryBuilder ExceptTotal()
        {
            return ExceptField("total");
        }

        public PaginationQueryBuilder WithPage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("page", alias, new GraphQlDirective[] { include, skip });
        }

        public PaginationQueryBuilder ExceptPage()
        {
            return ExceptField("page");
        }

        public PaginationQueryBuilder WithPageSize(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("pageSize", alias, new GraphQlDirective[] { include, skip });
        }

        public PaginationQueryBuilder ExceptPageSize()
        {
            return ExceptField("pageSize");
        }

        public PaginationQueryBuilder WithPageCount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("pageCount", alias, new GraphQlDirective[] { include, skip });
        }

        public PaginationQueryBuilder ExceptPageCount()
        {
            return ExceptField("pageCount");
        }
    }

    public partial class DeleteMutationResponseQueryBuilder : GraphQlQueryBuilder<DeleteMutationResponseQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "documentId" }
            };

        protected override string TypeName { get { return "DeleteMutationResponse"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public DeleteMutationResponseQueryBuilder WithDocumentId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("documentId", alias, new GraphQlDirective[] { include, skip });
        }

        public DeleteMutationResponseQueryBuilder ExceptDocumentId()
        {
            return ExceptField("documentId");
        }
    }

    public partial class ComponentVisualTextVisualTextQueryBuilder : GraphQlQueryBuilder<ComponentVisualTextVisualTextQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "Highlights", IsComplex = true, QueryBuilderType = typeof(ComponentHighlightsHighlightsQueryBuilder) },
                new GraphQlFieldMetadata { Name = "Overview", IsComplex = true, QueryBuilderType = typeof(ComponentOverviewOverviewQueryBuilder) },
                new GraphQlFieldMetadata { Name = "Tokenomics", IsComplex = true, QueryBuilderType = typeof(ComponentTokenomicsTokenomicsQueryBuilder) },
                new GraphQlFieldMetadata { Name = "SmartLinks", IsComplex = true, QueryBuilderType = typeof(ComponentSmartLinksSmartLinksQueryBuilder) }
            };

        protected override string TypeName { get { return "ComponentVisualTextVisualText"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ComponentVisualTextVisualTextQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public ComponentVisualTextVisualTextQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public ComponentVisualTextVisualTextQueryBuilder WithHighlights(ComponentHighlightsHighlightsQueryBuilder componentHighlightsHighlightsQueryBuilder, QueryBuilderParameter<ComponentHighlightsHighlightsFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("Highlights", alias, componentHighlightsHighlightsQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ComponentVisualTextVisualTextQueryBuilder ExceptHighlights()
        {
            return ExceptField("Highlights");
        }

        public ComponentVisualTextVisualTextQueryBuilder WithOverview(ComponentOverviewOverviewQueryBuilder componentOverviewOverviewQueryBuilder, QueryBuilderParameter<ComponentOverviewOverviewFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("Overview", alias, componentOverviewOverviewQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ComponentVisualTextVisualTextQueryBuilder ExceptOverview()
        {
            return ExceptField("Overview");
        }

        public ComponentVisualTextVisualTextQueryBuilder WithTokenomics(ComponentTokenomicsTokenomicsQueryBuilder componentTokenomicsTokenomicsQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("Tokenomics", alias, componentTokenomicsTokenomicsQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ComponentVisualTextVisualTextQueryBuilder ExceptTokenomics()
        {
            return ExceptField("Tokenomics");
        }

        public ComponentVisualTextVisualTextQueryBuilder WithSmartLinks(ComponentSmartLinksSmartLinksQueryBuilder componentSmartLinksSmartLinksQueryBuilder, QueryBuilderParameter<ComponentSmartLinksSmartLinksFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("SmartLinks", alias, componentSmartLinksSmartLinksQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ComponentVisualTextVisualTextQueryBuilder ExceptSmartLinks()
        {
            return ExceptField("SmartLinks");
        }
    }

    public partial class ComponentVersionVersionQueryBuilder : GraphQlQueryBuilder<ComponentVersionVersionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "ContractVersion", IsComplex = true, QueryBuilderType = typeof(ContractQueryBuilder) },
                new GraphQlFieldMetadata { Name = "ContractType", IsComplex = true, QueryBuilderType = typeof(ContractTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "ComponentVersionVersion"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ComponentVersionVersionQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public ComponentVersionVersionQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public ComponentVersionVersionQueryBuilder WithContractVersion(ContractQueryBuilder contractQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("ContractVersion", alias, contractQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ComponentVersionVersionQueryBuilder ExceptContractVersion()
        {
            return ExceptField("ContractVersion");
        }

        public ComponentVersionVersionQueryBuilder WithContractType(ContractTypeQueryBuilder contractTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("ContractType", alias, contractTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ComponentVersionVersionQueryBuilder ExceptContractType()
        {
            return ExceptField("ContractType");
        }
    }

    public partial class ComponentUploadPoolUploadPoolQueryBuilder : GraphQlQueryBuilder<ComponentUploadPoolUploadPoolQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "WhitelistRate" },
                new GraphQlFieldMetadata { Name = "PublicRate" },
                new GraphQlFieldMetadata { Name = "TotalTokens" },
                new GraphQlFieldMetadata { Name = "buy_with", IsComplex = true, QueryBuilderType = typeof(BuyWithQueryBuilder) },
                new GraphQlFieldMetadata { Name = "Participants" }
            };

        protected override string TypeName { get { return "ComponentUploadPoolUploadPool"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ComponentUploadPoolUploadPoolQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public ComponentUploadPoolUploadPoolQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public ComponentUploadPoolUploadPoolQueryBuilder WithWhitelistRate(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("WhitelistRate", alias, new GraphQlDirective[] { include, skip });
        }

        public ComponentUploadPoolUploadPoolQueryBuilder ExceptWhitelistRate()
        {
            return ExceptField("WhitelistRate");
        }

        public ComponentUploadPoolUploadPoolQueryBuilder WithPublicRate(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("PublicRate", alias, new GraphQlDirective[] { include, skip });
        }

        public ComponentUploadPoolUploadPoolQueryBuilder ExceptPublicRate()
        {
            return ExceptField("PublicRate");
        }

        public ComponentUploadPoolUploadPoolQueryBuilder WithTotalTokens(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("TotalTokens", alias, new GraphQlDirective[] { include, skip });
        }

        public ComponentUploadPoolUploadPoolQueryBuilder ExceptTotalTokens()
        {
            return ExceptField("TotalTokens");
        }

        public ComponentUploadPoolUploadPoolQueryBuilder WithBuyWith(BuyWithQueryBuilder buyWithQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("buy_with", alias, buyWithQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ComponentUploadPoolUploadPoolQueryBuilder ExceptBuyWith()
        {
            return ExceptField("buy_with");
        }

        public ComponentUploadPoolUploadPoolQueryBuilder WithParticipants(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("Participants", alias, new GraphQlDirective[] { include, skip });
        }

        public ComponentUploadPoolUploadPoolQueryBuilder ExceptParticipants()
        {
            return ExceptField("Participants");
        }
    }

    public partial class ComponentTokenomicsTokenomicsQueryBuilder : GraphQlQueryBuilder<ComponentTokenomicsTokenomicsQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "VisualInfo", IsComplex = true, QueryBuilderType = typeof(UploadFileQueryBuilder) },
                new GraphQlFieldMetadata { Name = "MarketCap" },
                new GraphQlFieldMetadata { Name = "TGEMarketCap" },
                new GraphQlFieldMetadata { Name = "Symbol" },
                new GraphQlFieldMetadata { Name = "CirculationSupply" },
                new GraphQlFieldMetadata { Name = "TotalSupply" },
                new GraphQlFieldMetadata { Name = "TotalRaise" },
                new GraphQlFieldMetadata { Name = "TokenPrice" }
            };

        protected override string TypeName { get { return "ComponentTokenomicsTokenomics"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ComponentTokenomicsTokenomicsQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public ComponentTokenomicsTokenomicsQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public ComponentTokenomicsTokenomicsQueryBuilder WithVisualInfo(UploadFileQueryBuilder uploadFileQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("VisualInfo", alias, uploadFileQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ComponentTokenomicsTokenomicsQueryBuilder ExceptVisualInfo()
        {
            return ExceptField("VisualInfo");
        }

        public ComponentTokenomicsTokenomicsQueryBuilder WithMarketCap(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("MarketCap", alias, new GraphQlDirective[] { include, skip });
        }

        public ComponentTokenomicsTokenomicsQueryBuilder ExceptMarketCap()
        {
            return ExceptField("MarketCap");
        }

        public ComponentTokenomicsTokenomicsQueryBuilder WithTgeMarketCap(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("TGEMarketCap", alias, new GraphQlDirective[] { include, skip });
        }

        public ComponentTokenomicsTokenomicsQueryBuilder ExceptTgeMarketCap()
        {
            return ExceptField("TGEMarketCap");
        }

        public ComponentTokenomicsTokenomicsQueryBuilder WithSymbol(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("Symbol", alias, new GraphQlDirective[] { include, skip });
        }

        public ComponentTokenomicsTokenomicsQueryBuilder ExceptSymbol()
        {
            return ExceptField("Symbol");
        }

        public ComponentTokenomicsTokenomicsQueryBuilder WithCirculationSupply(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("CirculationSupply", alias, new GraphQlDirective[] { include, skip });
        }

        public ComponentTokenomicsTokenomicsQueryBuilder ExceptCirculationSupply()
        {
            return ExceptField("CirculationSupply");
        }

        public ComponentTokenomicsTokenomicsQueryBuilder WithTotalSupply(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("TotalSupply", alias, new GraphQlDirective[] { include, skip });
        }

        public ComponentTokenomicsTokenomicsQueryBuilder ExceptTotalSupply()
        {
            return ExceptField("TotalSupply");
        }

        public ComponentTokenomicsTokenomicsQueryBuilder WithTotalRaise(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("TotalRaise", alias, new GraphQlDirective[] { include, skip });
        }

        public ComponentTokenomicsTokenomicsQueryBuilder ExceptTotalRaise()
        {
            return ExceptField("TotalRaise");
        }

        public ComponentTokenomicsTokenomicsQueryBuilder WithTokenPrice(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("TokenPrice", alias, new GraphQlDirective[] { include, skip });
        }

        public ComponentTokenomicsTokenomicsQueryBuilder ExceptTokenPrice()
        {
            return ExceptField("TokenPrice");
        }
    }

    public partial class ComponentTokenomicsListOfStringsQueryBuilder : GraphQlQueryBuilder<ComponentTokenomicsListOfStringsQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "EvmAddress" }
            };

        protected override string TypeName { get { return "ComponentTokenomicsListOfStrings"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ComponentTokenomicsListOfStringsQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public ComponentTokenomicsListOfStringsQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public ComponentTokenomicsListOfStringsQueryBuilder WithEvmAddress(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("EvmAddress", alias, new GraphQlDirective[] { include, skip });
        }

        public ComponentTokenomicsListOfStringsQueryBuilder ExceptEvmAddress()
        {
            return ExceptField("EvmAddress");
        }
    }

    public partial class ComponentTokenDistributionTokenDistributionQueryBuilder : GraphQlQueryBuilder<ComponentTokenDistributionTokenDistributionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "Unlock" },
                new GraphQlFieldMetadata { Name = "Ratio" },
                new GraphQlFieldMetadata { Name = "IsTimeTBA" },
                new GraphQlFieldMetadata { Name = "StartTime" }
            };

        protected override string TypeName { get { return "ComponentTokenDistributionTokenDistribution"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ComponentTokenDistributionTokenDistributionQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public ComponentTokenDistributionTokenDistributionQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public ComponentTokenDistributionTokenDistributionQueryBuilder WithUnlock(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("Unlock", alias, new GraphQlDirective[] { include, skip });
        }

        public ComponentTokenDistributionTokenDistributionQueryBuilder ExceptUnlock()
        {
            return ExceptField("Unlock");
        }

        public ComponentTokenDistributionTokenDistributionQueryBuilder WithRatio(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("Ratio", alias, new GraphQlDirective[] { include, skip });
        }

        public ComponentTokenDistributionTokenDistributionQueryBuilder ExceptRatio()
        {
            return ExceptField("Ratio");
        }

        public ComponentTokenDistributionTokenDistributionQueryBuilder WithIsTimeTba(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("IsTimeTBA", alias, new GraphQlDirective[] { include, skip });
        }

        public ComponentTokenDistributionTokenDistributionQueryBuilder ExceptIsTimeTba()
        {
            return ExceptField("IsTimeTBA");
        }

        public ComponentTokenDistributionTokenDistributionQueryBuilder WithStartTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("StartTime", alias, new GraphQlDirective[] { include, skip });
        }

        public ComponentTokenDistributionTokenDistributionQueryBuilder ExceptStartTime()
        {
            return ExceptField("StartTime");
        }
    }

    public partial class ComponentSyntheticZoneSynteticQueryBuilder : GraphQlQueryBuilder<ComponentSyntheticZoneSynteticQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "TokenAddress" },
                new GraphQlFieldMetadata { Name = "chain_setting", IsComplex = true, QueryBuilderType = typeof(ChainSettingQueryBuilder) }
            };

        protected override string TypeName { get { return "ComponentSyntheticZoneSyntetic"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ComponentSyntheticZoneSynteticQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public ComponentSyntheticZoneSynteticQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public ComponentSyntheticZoneSynteticQueryBuilder WithTokenAddress(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("TokenAddress", alias, new GraphQlDirective[] { include, skip });
        }

        public ComponentSyntheticZoneSynteticQueryBuilder ExceptTokenAddress()
        {
            return ExceptField("TokenAddress");
        }

        public ComponentSyntheticZoneSynteticQueryBuilder WithChainSetting(ChainSettingQueryBuilder chainSettingQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("chain_setting", alias, chainSettingQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ComponentSyntheticZoneSynteticQueryBuilder ExceptChainSetting()
        {
            return ExceptField("chain_setting");
        }
    }

    public partial class ComponentSmartLinksSmartLinksQueryBuilder : GraphQlQueryBuilder<ComponentSmartLinksSmartLinksQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "URL" },
                new GraphQlFieldMetadata { Name = "link_type", IsComplex = true, QueryBuilderType = typeof(LinkTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "ComponentSmartLinksSmartLinks"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ComponentSmartLinksSmartLinksQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public ComponentSmartLinksSmartLinksQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public ComponentSmartLinksSmartLinksQueryBuilder WithUrl(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("URL", alias, new GraphQlDirective[] { include, skip });
        }

        public ComponentSmartLinksSmartLinksQueryBuilder ExceptUrl()
        {
            return ExceptField("URL");
        }

        public ComponentSmartLinksSmartLinksQueryBuilder WithLinkType(LinkTypeQueryBuilder linkTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("link_type", alias, linkTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ComponentSmartLinksSmartLinksQueryBuilder ExceptLinkType()
        {
            return ExceptField("link_type");
        }
    }

    public partial class ComponentSimpleUrlSimpleUrlQueryBuilder : GraphQlQueryBuilder<ComponentSimpleUrlSimpleUrlQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "url" },
                new GraphQlFieldMetadata { Name = "newWindow" }
            };

        protected override string TypeName { get { return "ComponentSimpleUrlSimpleUrl"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ComponentSimpleUrlSimpleUrlQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public ComponentSimpleUrlSimpleUrlQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public ComponentSimpleUrlSimpleUrlQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public ComponentSimpleUrlSimpleUrlQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public ComponentSimpleUrlSimpleUrlQueryBuilder WithUrl(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("url", alias, new GraphQlDirective[] { include, skip });
        }

        public ComponentSimpleUrlSimpleUrlQueryBuilder ExceptUrl()
        {
            return ExceptField("url");
        }

        public ComponentSimpleUrlSimpleUrlQueryBuilder WithNewWindow(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("newWindow", alias, new GraphQlDirective[] { include, skip });
        }

        public ComponentSimpleUrlSimpleUrlQueryBuilder ExceptNewWindow()
        {
            return ExceptField("newWindow");
        }
    }

    public partial class ComponentSectionSectionQueryBuilder : GraphQlQueryBuilder<ComponentSectionSectionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "Title" },
                new GraphQlFieldMetadata { Name = "smallText" },
                new GraphQlFieldMetadata { Name = "TopBgUrl" },
                new GraphQlFieldMetadata { Name = "TopBg", IsComplex = true, QueryBuilderType = typeof(UploadFileQueryBuilder) },
                new GraphQlFieldMetadata { Name = "htmlColorText", IsComplex = true, QueryBuilderType = typeof(ComponentHtmlColorTextHtmlColorTextQueryBuilder) },
                new GraphQlFieldMetadata { Name = "MainCTA", IsComplex = true, QueryBuilderType = typeof(ComponentMainCtaMainCtaQueryBuilder) },
                new GraphQlFieldMetadata { Name = "secondCta", IsComplex = true, QueryBuilderType = typeof(ComponentMainCtaMainCtaQueryBuilder) },
                new GraphQlFieldMetadata { Name = "secondTitle" },
                new GraphQlFieldMetadata { Name = "SecondSmallText" }
            };

        protected override string TypeName { get { return "ComponentSectionSection"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ComponentSectionSectionQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public ComponentSectionSectionQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public ComponentSectionSectionQueryBuilder WithTitle(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("Title", alias, new GraphQlDirective[] { include, skip });
        }

        public ComponentSectionSectionQueryBuilder ExceptTitle()
        {
            return ExceptField("Title");
        }

        public ComponentSectionSectionQueryBuilder WithSmallText(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("smallText", alias, new GraphQlDirective[] { include, skip });
        }

        public ComponentSectionSectionQueryBuilder ExceptSmallText()
        {
            return ExceptField("smallText");
        }

        public ComponentSectionSectionQueryBuilder WithTopBgUrl(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("TopBgUrl", alias, new GraphQlDirective[] { include, skip });
        }

        public ComponentSectionSectionQueryBuilder ExceptTopBgUrl()
        {
            return ExceptField("TopBgUrl");
        }

        public ComponentSectionSectionQueryBuilder WithTopBg(UploadFileQueryBuilder uploadFileQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("TopBg", alias, uploadFileQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ComponentSectionSectionQueryBuilder ExceptTopBg()
        {
            return ExceptField("TopBg");
        }

        public ComponentSectionSectionQueryBuilder WithHtmlColorText(ComponentHtmlColorTextHtmlColorTextQueryBuilder componentHtmlColorTextHtmlColorTextQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("htmlColorText", alias, componentHtmlColorTextHtmlColorTextQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ComponentSectionSectionQueryBuilder ExceptHtmlColorText()
        {
            return ExceptField("htmlColorText");
        }

        public ComponentSectionSectionQueryBuilder WithMainCta(ComponentMainCtaMainCtaQueryBuilder componentMainCtaMainCtaQueryBuilder, QueryBuilderParameter<ComponentMainCtaMainCtaFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("MainCTA", alias, componentMainCtaMainCtaQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ComponentSectionSectionQueryBuilder ExceptMainCta()
        {
            return ExceptField("MainCTA");
        }

        public ComponentSectionSectionQueryBuilder WithSecondCta(ComponentMainCtaMainCtaQueryBuilder componentMainCtaMainCtaQueryBuilder, QueryBuilderParameter<ComponentMainCtaMainCtaFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("secondCta", alias, componentMainCtaMainCtaQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ComponentSectionSectionQueryBuilder ExceptSecondCta()
        {
            return ExceptField("secondCta");
        }

        public ComponentSectionSectionQueryBuilder WithSecondTitle(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("secondTitle", alias, new GraphQlDirective[] { include, skip });
        }

        public ComponentSectionSectionQueryBuilder ExceptSecondTitle()
        {
            return ExceptField("secondTitle");
        }

        public ComponentSectionSectionQueryBuilder WithSecondSmallText(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("SecondSmallText", alias, new GraphQlDirective[] { include, skip });
        }

        public ComponentSectionSectionQueryBuilder ExceptSecondSmallText()
        {
            return ExceptField("SecondSmallText");
        }
    }

    public partial class ComponentOverviewOverviewQueryBuilder : GraphQlQueryBuilder<ComponentOverviewOverviewQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "Name" },
                new GraphQlFieldMetadata { Name = "BoldText" },
                new GraphQlFieldMetadata { Name = "Text" }
            };

        protected override string TypeName { get { return "ComponentOverviewOverview"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ComponentOverviewOverviewQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public ComponentOverviewOverviewQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public ComponentOverviewOverviewQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("Name", alias, new GraphQlDirective[] { include, skip });
        }

        public ComponentOverviewOverviewQueryBuilder ExceptName()
        {
            return ExceptField("Name");
        }

        public ComponentOverviewOverviewQueryBuilder WithBoldText(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("BoldText", alias, new GraphQlDirective[] { include, skip });
        }

        public ComponentOverviewOverviewQueryBuilder ExceptBoldText()
        {
            return ExceptField("BoldText");
        }

        public ComponentOverviewOverviewQueryBuilder WithText(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("Text", alias, new GraphQlDirective[] { include, skip });
        }

        public ComponentOverviewOverviewQueryBuilder ExceptText()
        {
            return ExceptField("Text");
        }
    }

    public partial class ComponentPhaseStartEndAmountQueryBuilder : GraphQlQueryBuilder<ComponentPhaseStartEndAmountQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "Start" },
                new GraphQlFieldMetadata { Name = "Finish" },
                new GraphQlFieldMetadata { Name = "MaxInvest" }
            };

        protected override string TypeName { get { return "ComponentPhaseStartEndAmount"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ComponentPhaseStartEndAmountQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public ComponentPhaseStartEndAmountQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public ComponentPhaseStartEndAmountQueryBuilder WithStart(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("Start", alias, new GraphQlDirective[] { include, skip });
        }

        public ComponentPhaseStartEndAmountQueryBuilder ExceptStart()
        {
            return ExceptField("Start");
        }

        public ComponentPhaseStartEndAmountQueryBuilder WithFinish(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("Finish", alias, new GraphQlDirective[] { include, skip });
        }

        public ComponentPhaseStartEndAmountQueryBuilder ExceptFinish()
        {
            return ExceptField("Finish");
        }

        public ComponentPhaseStartEndAmountQueryBuilder WithMaxInvest(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("MaxInvest", alias, new GraphQlDirective[] { include, skip });
        }

        public ComponentPhaseStartEndAmountQueryBuilder ExceptMaxInvest()
        {
            return ExceptField("MaxInvest");
        }
    }

    public partial class ComponentIconTextIconTextQueryBuilder : GraphQlQueryBuilder<ComponentIconTextIconTextQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "text" },
                new GraphQlFieldMetadata { Name = "smallText" },
                new GraphQlFieldMetadata { Name = "icon", IsComplex = true, QueryBuilderType = typeof(UploadFileQueryBuilder) }
            };

        protected override string TypeName { get { return "ComponentIconTextIconText"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ComponentIconTextIconTextQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public ComponentIconTextIconTextQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public ComponentIconTextIconTextQueryBuilder WithText(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("text", alias, new GraphQlDirective[] { include, skip });
        }

        public ComponentIconTextIconTextQueryBuilder ExceptText()
        {
            return ExceptField("text");
        }

        public ComponentIconTextIconTextQueryBuilder WithSmallText(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("smallText", alias, new GraphQlDirective[] { include, skip });
        }

        public ComponentIconTextIconTextQueryBuilder ExceptSmallText()
        {
            return ExceptField("smallText");
        }

        public ComponentIconTextIconTextQueryBuilder WithIcon(UploadFileQueryBuilder uploadFileQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("icon", alias, uploadFileQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ComponentIconTextIconTextQueryBuilder ExceptIcon()
        {
            return ExceptField("icon");
        }
    }

    public partial class ComponentHtmlColorTextHtmlColorTextQueryBuilder : GraphQlQueryBuilder<ComponentHtmlColorTextHtmlColorTextQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "text" },
                new GraphQlFieldMetadata { Name = "color" },
                new GraphQlFieldMetadata { Name = "url" }
            };

        protected override string TypeName { get { return "ComponentHtmlColorTextHtmlColorText"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ComponentHtmlColorTextHtmlColorTextQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public ComponentHtmlColorTextHtmlColorTextQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public ComponentHtmlColorTextHtmlColorTextQueryBuilder WithText(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("text", alias, new GraphQlDirective[] { include, skip });
        }

        public ComponentHtmlColorTextHtmlColorTextQueryBuilder ExceptText()
        {
            return ExceptField("text");
        }

        public ComponentHtmlColorTextHtmlColorTextQueryBuilder WithColor(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("color", alias, new GraphQlDirective[] { include, skip });
        }

        public ComponentHtmlColorTextHtmlColorTextQueryBuilder ExceptColor()
        {
            return ExceptField("color");
        }

        public ComponentHtmlColorTextHtmlColorTextQueryBuilder WithUrl(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("url", alias, new GraphQlDirective[] { include, skip });
        }

        public ComponentHtmlColorTextHtmlColorTextQueryBuilder ExceptUrl()
        {
            return ExceptField("url");
        }
    }

    public partial class ComponentMainCtaMainCtaQueryBuilder : GraphQlQueryBuilder<ComponentMainCtaMainCtaQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "text" },
                new GraphQlFieldMetadata { Name = "url" },
                new GraphQlFieldMetadata { Name = "ctaText" },
                new GraphQlFieldMetadata { Name = "addText" },
                new GraphQlFieldMetadata { Name = "backColor" },
                new GraphQlFieldMetadata { Name = "TextColor" },
                new GraphQlFieldMetadata { Name = "hoverBackColor" },
                new GraphQlFieldMetadata { Name = "flag" }
            };

        protected override string TypeName { get { return "ComponentMainCtaMainCta"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ComponentMainCtaMainCtaQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public ComponentMainCtaMainCtaQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public ComponentMainCtaMainCtaQueryBuilder WithText(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("text", alias, new GraphQlDirective[] { include, skip });
        }

        public ComponentMainCtaMainCtaQueryBuilder ExceptText()
        {
            return ExceptField("text");
        }

        public ComponentMainCtaMainCtaQueryBuilder WithUrl(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("url", alias, new GraphQlDirective[] { include, skip });
        }

        public ComponentMainCtaMainCtaQueryBuilder ExceptUrl()
        {
            return ExceptField("url");
        }

        public ComponentMainCtaMainCtaQueryBuilder WithCtaText(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("ctaText", alias, new GraphQlDirective[] { include, skip });
        }

        public ComponentMainCtaMainCtaQueryBuilder ExceptCtaText()
        {
            return ExceptField("ctaText");
        }

        public ComponentMainCtaMainCtaQueryBuilder WithAddText(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("addText", alias, new GraphQlDirective[] { include, skip });
        }

        public ComponentMainCtaMainCtaQueryBuilder ExceptAddText()
        {
            return ExceptField("addText");
        }

        public ComponentMainCtaMainCtaQueryBuilder WithBackColor(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("backColor", alias, new GraphQlDirective[] { include, skip });
        }

        public ComponentMainCtaMainCtaQueryBuilder ExceptBackColor()
        {
            return ExceptField("backColor");
        }

        public ComponentMainCtaMainCtaQueryBuilder WithTextColor(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("TextColor", alias, new GraphQlDirective[] { include, skip });
        }

        public ComponentMainCtaMainCtaQueryBuilder ExceptTextColor()
        {
            return ExceptField("TextColor");
        }

        public ComponentMainCtaMainCtaQueryBuilder WithHoverBackColor(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("hoverBackColor", alias, new GraphQlDirective[] { include, skip });
        }

        public ComponentMainCtaMainCtaQueryBuilder ExceptHoverBackColor()
        {
            return ExceptField("hoverBackColor");
        }

        public ComponentMainCtaMainCtaQueryBuilder WithFlag(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("flag", alias, new GraphQlDirective[] { include, skip });
        }

        public ComponentMainCtaMainCtaQueryBuilder ExceptFlag()
        {
            return ExceptField("flag");
        }
    }

    public partial class ComponentHeaderSimpleUrlHeaderSimpleUrlQueryBuilder : GraphQlQueryBuilder<ComponentHeaderSimpleUrlHeaderSimpleUrlQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "text" },
                new GraphQlFieldMetadata { Name = "url" },
                new GraphQlFieldMetadata { Name = "ctaText" },
                new GraphQlFieldMetadata { Name = "textColor" }
            };

        protected override string TypeName { get { return "ComponentHeaderSimpleUrlHeaderSimpleUrl"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ComponentHeaderSimpleUrlHeaderSimpleUrlQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public ComponentHeaderSimpleUrlHeaderSimpleUrlQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public ComponentHeaderSimpleUrlHeaderSimpleUrlQueryBuilder WithText(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("text", alias, new GraphQlDirective[] { include, skip });
        }

        public ComponentHeaderSimpleUrlHeaderSimpleUrlQueryBuilder ExceptText()
        {
            return ExceptField("text");
        }

        public ComponentHeaderSimpleUrlHeaderSimpleUrlQueryBuilder WithUrl(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("url", alias, new GraphQlDirective[] { include, skip });
        }

        public ComponentHeaderSimpleUrlHeaderSimpleUrlQueryBuilder ExceptUrl()
        {
            return ExceptField("url");
        }

        public ComponentHeaderSimpleUrlHeaderSimpleUrlQueryBuilder WithCtaText(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("ctaText", alias, new GraphQlDirective[] { include, skip });
        }

        public ComponentHeaderSimpleUrlHeaderSimpleUrlQueryBuilder ExceptCtaText()
        {
            return ExceptField("ctaText");
        }

        public ComponentHeaderSimpleUrlHeaderSimpleUrlQueryBuilder WithTextColor(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("textColor", alias, new GraphQlDirective[] { include, skip });
        }

        public ComponentHeaderSimpleUrlHeaderSimpleUrlQueryBuilder ExceptTextColor()
        {
            return ExceptField("textColor");
        }
    }

    public partial class ComponentHighlightsHighlightsQueryBuilder : GraphQlQueryBuilder<ComponentHighlightsHighlightsQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "Value" }
            };

        protected override string TypeName { get { return "ComponentHighlightsHighlights"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ComponentHighlightsHighlightsQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public ComponentHighlightsHighlightsQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public ComponentHighlightsHighlightsQueryBuilder WithValue(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("Value", alias, new GraphQlDirective[] { include, skip });
        }

        public ComponentHighlightsHighlightsQueryBuilder ExceptValue()
        {
            return ExceptField("Value");
        }
    }

    public partial class ComponentDictionaryLinksQueryBuilder : GraphQlQueryBuilder<ComponentDictionaryLinksQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "url" }
            };

        protected override string TypeName { get { return "ComponentDictionaryLinks"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ComponentDictionaryLinksQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public ComponentDictionaryLinksQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public ComponentDictionaryLinksQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public ComponentDictionaryLinksQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public ComponentDictionaryLinksQueryBuilder WithUrl(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("url", alias, new GraphQlDirective[] { include, skip });
        }

        public ComponentDictionaryLinksQueryBuilder ExceptUrl()
        {
            return ExceptField("url");
        }
    }

    public partial class ComponentContractOnChainContractOnChainQueryBuilder : GraphQlQueryBuilder<ComponentContractOnChainContractOnChainQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "ContractVersion", IsComplex = true, QueryBuilderType = typeof(ContractQueryBuilder) },
                new GraphQlFieldMetadata { Name = "Address" },
                new GraphQlFieldMetadata { Name = "ContractType", IsComplex = true, QueryBuilderType = typeof(ContractTypeQueryBuilder) }
            };

        protected override string TypeName { get { return "ComponentContractOnChainContractOnChain"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ComponentContractOnChainContractOnChainQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public ComponentContractOnChainContractOnChainQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public ComponentContractOnChainContractOnChainQueryBuilder WithContractVersion(ContractQueryBuilder contractQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("ContractVersion", alias, contractQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ComponentContractOnChainContractOnChainQueryBuilder ExceptContractVersion()
        {
            return ExceptField("ContractVersion");
        }

        public ComponentContractOnChainContractOnChainQueryBuilder WithAddress(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("Address", alias, new GraphQlDirective[] { include, skip });
        }

        public ComponentContractOnChainContractOnChainQueryBuilder ExceptAddress()
        {
            return ExceptField("Address");
        }

        public ComponentContractOnChainContractOnChainQueryBuilder WithContractType(ContractTypeQueryBuilder contractTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("ContractType", alias, contractTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ComponentContractOnChainContractOnChainQueryBuilder ExceptContractType()
        {
            return ExceptField("ContractType");
        }
    }

    public partial class ComponentCompilerSettingCompilerSettingsQueryBuilder : GraphQlQueryBuilder<ComponentCompilerSettingCompilerSettingsQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "evm_version", IsComplex = true, QueryBuilderType = typeof(EvmVersionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "supported_pragma_version", IsComplex = true, QueryBuilderType = typeof(PragmaVersionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "optimizerEnabled" },
                new GraphQlFieldMetadata { Name = "runs" },
                new GraphQlFieldMetadata { Name = "viaIR" }
            };

        protected override string TypeName { get { return "ComponentCompilerSettingCompilerSettings"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ComponentCompilerSettingCompilerSettingsQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public ComponentCompilerSettingCompilerSettingsQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public ComponentCompilerSettingCompilerSettingsQueryBuilder WithEvmVersion(EvmVersionQueryBuilder evmVersionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("evm_version", alias, evmVersionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ComponentCompilerSettingCompilerSettingsQueryBuilder ExceptEvmVersion()
        {
            return ExceptField("evm_version");
        }

        public ComponentCompilerSettingCompilerSettingsQueryBuilder WithSupportedPragmaVersion(PragmaVersionQueryBuilder pragmaVersionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("supported_pragma_version", alias, pragmaVersionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ComponentCompilerSettingCompilerSettingsQueryBuilder ExceptSupportedPragmaVersion()
        {
            return ExceptField("supported_pragma_version");
        }

        public ComponentCompilerSettingCompilerSettingsQueryBuilder WithOptimizerEnabled(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("optimizerEnabled", alias, new GraphQlDirective[] { include, skip });
        }

        public ComponentCompilerSettingCompilerSettingsQueryBuilder ExceptOptimizerEnabled()
        {
            return ExceptField("optimizerEnabled");
        }

        public ComponentCompilerSettingCompilerSettingsQueryBuilder WithRuns(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("runs", alias, new GraphQlDirective[] { include, skip });
        }

        public ComponentCompilerSettingCompilerSettingsQueryBuilder ExceptRuns()
        {
            return ExceptField("runs");
        }

        public ComponentCompilerSettingCompilerSettingsQueryBuilder WithViaIr(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("viaIR", alias, new GraphQlDirective[] { include, skip });
        }

        public ComponentCompilerSettingCompilerSettingsQueryBuilder ExceptViaIr()
        {
            return ExceptField("viaIR");
        }
    }

    public partial class ComponentColorIconColorIconQueryBuilder : GraphQlQueryBuilder<ComponentColorIconColorIconQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "icon", IsComplex = true, QueryBuilderType = typeof(UploadFileQueryBuilder) },
                new GraphQlFieldMetadata { Name = "Color" }
            };

        protected override string TypeName { get { return "ComponentColorIconColorIcon"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ComponentColorIconColorIconQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public ComponentColorIconColorIconQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public ComponentColorIconColorIconQueryBuilder WithIcon(UploadFileQueryBuilder uploadFileQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("icon", alias, uploadFileQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ComponentColorIconColorIconQueryBuilder ExceptIcon()
        {
            return ExceptField("icon");
        }

        public ComponentColorIconColorIconQueryBuilder WithColor(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("Color", alias, new GraphQlDirective[] { include, skip });
        }

        public ComponentColorIconColorIconQueryBuilder ExceptColor()
        {
            return ExceptField("Color");
        }
    }

    public partial class ComponentInvestorsInvestorsQueryBuilder : GraphQlQueryBuilder<ComponentInvestorsInvestorsQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "investor", IsComplex = true, QueryBuilderType = typeof(InvestorQueryBuilder) },
                new GraphQlFieldMetadata { Name = "Category" }
            };

        protected override string TypeName { get { return "ComponentInvestorsInvestors"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ComponentInvestorsInvestorsQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public ComponentInvestorsInvestorsQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public ComponentInvestorsInvestorsQueryBuilder WithInvestor(InvestorQueryBuilder investorQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("investor", alias, investorQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ComponentInvestorsInvestorsQueryBuilder ExceptInvestor()
        {
            return ExceptField("investor");
        }

        public ComponentInvestorsInvestorsQueryBuilder WithCategory(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("Category", alias, new GraphQlDirective[] { include, skip });
        }

        public ComponentInvestorsInvestorsQueryBuilder ExceptCategory()
        {
            return ExceptField("Category");
        }
    }

    public partial class ComponentChainAddressesOnlyAddressQueryBuilder : GraphQlQueryBuilder<ComponentChainAddressesOnlyAddressQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "Name" },
                new GraphQlFieldMetadata { Name = "Address" },
                new GraphQlFieldMetadata { Name = "IsLocked" }
            };

        protected override string TypeName { get { return "ComponentChainAddressesOnlyAddress"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ComponentChainAddressesOnlyAddressQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public ComponentChainAddressesOnlyAddressQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public ComponentChainAddressesOnlyAddressQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("Name", alias, new GraphQlDirective[] { include, skip });
        }

        public ComponentChainAddressesOnlyAddressQueryBuilder ExceptName()
        {
            return ExceptField("Name");
        }

        public ComponentChainAddressesOnlyAddressQueryBuilder WithAddress(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("Address", alias, new GraphQlDirective[] { include, skip });
        }

        public ComponentChainAddressesOnlyAddressQueryBuilder ExceptAddress()
        {
            return ExceptField("Address");
        }

        public ComponentChainAddressesOnlyAddressQueryBuilder WithIsLocked(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("IsLocked", alias, new GraphQlDirective[] { include, skip });
        }

        public ComponentChainAddressesOnlyAddressQueryBuilder ExceptIsLocked()
        {
            return ExceptField("IsLocked");
        }
    }

    public partial class ComponentChainAddressesChainAddressesQueryBuilder : GraphQlQueryBuilder<ComponentChainAddressesChainAddressesQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "chain_setting", IsComplex = true, QueryBuilderType = typeof(ChainSettingQueryBuilder) },
                new GraphQlFieldMetadata { Name = "Address" }
            };

        protected override string TypeName { get { return "ComponentChainAddressesChainAddresses"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ComponentChainAddressesChainAddressesQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public ComponentChainAddressesChainAddressesQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public ComponentChainAddressesChainAddressesQueryBuilder WithChainSetting(ChainSettingQueryBuilder chainSettingQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("chain_setting", alias, chainSettingQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ComponentChainAddressesChainAddressesQueryBuilder ExceptChainSetting()
        {
            return ExceptField("chain_setting");
        }

        public ComponentChainAddressesChainAddressesQueryBuilder WithAddress(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("Address", alias, new GraphQlDirective[] { include, skip });
        }

        public ComponentChainAddressesChainAddressesQueryBuilder ExceptAddress()
        {
            return ExceptField("Address");
        }
    }

    public partial class ComponentFullTokenDistributionFullTokenDistributionQueryBuilder : GraphQlQueryBuilder<ComponentFullTokenDistributionFullTokenDistributionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "TGE", IsComplex = true, QueryBuilderType = typeof(ComponentTokenDistributionTokenDistributionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "Monthly", IsComplex = true, QueryBuilderType = typeof(ComponentTokenDistributionTokenDistributionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "Text" },
                new GraphQlFieldMetadata { Name = "DistributionType" },
                new GraphQlFieldMetadata { Name = "non_evm_chain", IsComplex = true, QueryBuilderType = typeof(NonEvmChainQueryBuilder) }
            };

        protected override string TypeName { get { return "ComponentFullTokenDistributionFullTokenDistribution"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ComponentFullTokenDistributionFullTokenDistributionQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public ComponentFullTokenDistributionFullTokenDistributionQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public ComponentFullTokenDistributionFullTokenDistributionQueryBuilder WithTge(ComponentTokenDistributionTokenDistributionQueryBuilder componentTokenDistributionTokenDistributionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("TGE", alias, componentTokenDistributionTokenDistributionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ComponentFullTokenDistributionFullTokenDistributionQueryBuilder ExceptTge()
        {
            return ExceptField("TGE");
        }

        public ComponentFullTokenDistributionFullTokenDistributionQueryBuilder WithMonthly(ComponentTokenDistributionTokenDistributionQueryBuilder componentTokenDistributionTokenDistributionQueryBuilder, QueryBuilderParameter<ComponentTokenDistributionTokenDistributionFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("Monthly", alias, componentTokenDistributionTokenDistributionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ComponentFullTokenDistributionFullTokenDistributionQueryBuilder ExceptMonthly()
        {
            return ExceptField("Monthly");
        }

        public ComponentFullTokenDistributionFullTokenDistributionQueryBuilder WithText(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("Text", alias, new GraphQlDirective[] { include, skip });
        }

        public ComponentFullTokenDistributionFullTokenDistributionQueryBuilder ExceptText()
        {
            return ExceptField("Text");
        }

        public ComponentFullTokenDistributionFullTokenDistributionQueryBuilder WithDistributionType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("DistributionType", alias, new GraphQlDirective[] { include, skip });
        }

        public ComponentFullTokenDistributionFullTokenDistributionQueryBuilder ExceptDistributionType()
        {
            return ExceptField("DistributionType");
        }

        public ComponentFullTokenDistributionFullTokenDistributionQueryBuilder WithNonEvmChain(NonEvmChainQueryBuilder nonEvmChainQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("non_evm_chain", alias, nonEvmChainQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ComponentFullTokenDistributionFullTokenDistributionQueryBuilder ExceptNonEvmChain()
        {
            return ExceptField("non_evm_chain");
        }
    }

    public partial class UploadFileQueryBuilder : GraphQlQueryBuilder<UploadFileQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "documentId" },
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "alternativeText" },
                new GraphQlFieldMetadata { Name = "caption" },
                new GraphQlFieldMetadata { Name = "width" },
                new GraphQlFieldMetadata { Name = "height" },
                new GraphQlFieldMetadata { Name = "formats" },
                new GraphQlFieldMetadata { Name = "hash" },
                new GraphQlFieldMetadata { Name = "ext" },
                new GraphQlFieldMetadata { Name = "mime" },
                new GraphQlFieldMetadata { Name = "size" },
                new GraphQlFieldMetadata { Name = "url" },
                new GraphQlFieldMetadata { Name = "previewUrl" },
                new GraphQlFieldMetadata { Name = "provider" },
                new GraphQlFieldMetadata { Name = "provider_metadata" },
                new GraphQlFieldMetadata { Name = "related", IsComplex = true, QueryBuilderType = typeof(GenericMorphQueryBuilder) },
                new GraphQlFieldMetadata { Name = "createdAt" },
                new GraphQlFieldMetadata { Name = "updatedAt" },
                new GraphQlFieldMetadata { Name = "publishedAt" }
            };

        protected override string TypeName { get { return "UploadFile"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public UploadFileQueryBuilder WithDocumentId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("documentId", alias, new GraphQlDirective[] { include, skip });
        }

        public UploadFileQueryBuilder ExceptDocumentId()
        {
            return ExceptField("documentId");
        }

        public UploadFileQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public UploadFileQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public UploadFileQueryBuilder WithAlternativeText(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("alternativeText", alias, new GraphQlDirective[] { include, skip });
        }

        public UploadFileQueryBuilder ExceptAlternativeText()
        {
            return ExceptField("alternativeText");
        }

        public UploadFileQueryBuilder WithCaption(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("caption", alias, new GraphQlDirective[] { include, skip });
        }

        public UploadFileQueryBuilder ExceptCaption()
        {
            return ExceptField("caption");
        }

        public UploadFileQueryBuilder WithWidth(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("width", alias, new GraphQlDirective[] { include, skip });
        }

        public UploadFileQueryBuilder ExceptWidth()
        {
            return ExceptField("width");
        }

        public UploadFileQueryBuilder WithHeight(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("height", alias, new GraphQlDirective[] { include, skip });
        }

        public UploadFileQueryBuilder ExceptHeight()
        {
            return ExceptField("height");
        }

        public UploadFileQueryBuilder WithFormats(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("formats", alias, new GraphQlDirective[] { include, skip });
        }

        public UploadFileQueryBuilder ExceptFormats()
        {
            return ExceptField("formats");
        }

        public UploadFileQueryBuilder WithHash(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("hash", alias, new GraphQlDirective[] { include, skip });
        }

        public UploadFileQueryBuilder ExceptHash()
        {
            return ExceptField("hash");
        }

        public UploadFileQueryBuilder WithExt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("ext", alias, new GraphQlDirective[] { include, skip });
        }

        public UploadFileQueryBuilder ExceptExt()
        {
            return ExceptField("ext");
        }

        public UploadFileQueryBuilder WithMime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("mime", alias, new GraphQlDirective[] { include, skip });
        }

        public UploadFileQueryBuilder ExceptMime()
        {
            return ExceptField("mime");
        }

        public UploadFileQueryBuilder WithSize(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("size", alias, new GraphQlDirective[] { include, skip });
        }

        public UploadFileQueryBuilder ExceptSize()
        {
            return ExceptField("size");
        }

        public UploadFileQueryBuilder WithUrl(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("url", alias, new GraphQlDirective[] { include, skip });
        }

        public UploadFileQueryBuilder ExceptUrl()
        {
            return ExceptField("url");
        }

        public UploadFileQueryBuilder WithPreviewUrl(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("previewUrl", alias, new GraphQlDirective[] { include, skip });
        }

        public UploadFileQueryBuilder ExceptPreviewUrl()
        {
            return ExceptField("previewUrl");
        }

        public UploadFileQueryBuilder WithProvider(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("provider", alias, new GraphQlDirective[] { include, skip });
        }

        public UploadFileQueryBuilder ExceptProvider()
        {
            return ExceptField("provider");
        }

        public UploadFileQueryBuilder WithProviderMetadata(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("provider_metadata", alias, new GraphQlDirective[] { include, skip });
        }

        public UploadFileQueryBuilder ExceptProviderMetadata()
        {
            return ExceptField("provider_metadata");
        }

        public UploadFileQueryBuilder WithRelated(GenericMorphQueryBuilder genericMorphQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("related", alias, genericMorphQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public UploadFileQueryBuilder ExceptRelated()
        {
            return ExceptField("related");
        }

        public UploadFileQueryBuilder WithCreatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdAt", alias, new GraphQlDirective[] { include, skip });
        }

        public UploadFileQueryBuilder ExceptCreatedAt()
        {
            return ExceptField("createdAt");
        }

        public UploadFileQueryBuilder WithUpdatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("updatedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public UploadFileQueryBuilder ExceptUpdatedAt()
        {
            return ExceptField("updatedAt");
        }

        public UploadFileQueryBuilder WithPublishedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("publishedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public UploadFileQueryBuilder ExceptPublishedAt()
        {
            return ExceptField("publishedAt");
        }
    }

    public partial class UploadFileEntityResponseCollectionQueryBuilder : GraphQlQueryBuilder<UploadFileEntityResponseCollectionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(UploadFileQueryBuilder) },
                new GraphQlFieldMetadata { Name = "pageInfo", IsComplex = true, QueryBuilderType = typeof(PaginationQueryBuilder) }
            };

        protected override string TypeName { get { return "UploadFileEntityResponseCollection"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public UploadFileEntityResponseCollectionQueryBuilder WithNodes(UploadFileQueryBuilder uploadFileQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("nodes", alias, uploadFileQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public UploadFileEntityResponseCollectionQueryBuilder ExceptNodes()
        {
            return ExceptField("nodes");
        }

        public UploadFileEntityResponseCollectionQueryBuilder WithPageInfo(PaginationQueryBuilder paginationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pageInfo", alias, paginationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public UploadFileEntityResponseCollectionQueryBuilder ExceptPageInfo()
        {
            return ExceptField("pageInfo");
        }
    }

    public partial class UploadFileRelationResponseCollectionQueryBuilder : GraphQlQueryBuilder<UploadFileRelationResponseCollectionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(UploadFileQueryBuilder) }
            };

        protected override string TypeName { get { return "UploadFileRelationResponseCollection"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public UploadFileRelationResponseCollectionQueryBuilder WithNodes(UploadFileQueryBuilder uploadFileQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("nodes", alias, uploadFileQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public UploadFileRelationResponseCollectionQueryBuilder ExceptNodes()
        {
            return ExceptField("nodes");
        }
    }

    public partial class I18NLocaleQueryBuilder : GraphQlQueryBuilder<I18NLocaleQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "documentId" },
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "code" },
                new GraphQlFieldMetadata { Name = "createdAt" },
                new GraphQlFieldMetadata { Name = "updatedAt" },
                new GraphQlFieldMetadata { Name = "publishedAt" }
            };

        protected override string TypeName { get { return "I18NLocale"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public I18NLocaleQueryBuilder WithDocumentId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("documentId", alias, new GraphQlDirective[] { include, skip });
        }

        public I18NLocaleQueryBuilder ExceptDocumentId()
        {
            return ExceptField("documentId");
        }

        public I18NLocaleQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public I18NLocaleQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public I18NLocaleQueryBuilder WithCode(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("code", alias, new GraphQlDirective[] { include, skip });
        }

        public I18NLocaleQueryBuilder ExceptCode()
        {
            return ExceptField("code");
        }

        public I18NLocaleQueryBuilder WithCreatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdAt", alias, new GraphQlDirective[] { include, skip });
        }

        public I18NLocaleQueryBuilder ExceptCreatedAt()
        {
            return ExceptField("createdAt");
        }

        public I18NLocaleQueryBuilder WithUpdatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("updatedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public I18NLocaleQueryBuilder ExceptUpdatedAt()
        {
            return ExceptField("updatedAt");
        }

        public I18NLocaleQueryBuilder WithPublishedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("publishedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public I18NLocaleQueryBuilder ExceptPublishedAt()
        {
            return ExceptField("publishedAt");
        }
    }

    public partial class I18NLocaleEntityResponseCollectionQueryBuilder : GraphQlQueryBuilder<I18NLocaleEntityResponseCollectionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(I18NLocaleQueryBuilder) },
                new GraphQlFieldMetadata { Name = "pageInfo", IsComplex = true, QueryBuilderType = typeof(PaginationQueryBuilder) }
            };

        protected override string TypeName { get { return "I18NLocaleEntityResponseCollection"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public I18NLocaleEntityResponseCollectionQueryBuilder WithNodes(I18NLocaleQueryBuilder i18NLocaleQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("nodes", alias, i18NLocaleQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public I18NLocaleEntityResponseCollectionQueryBuilder ExceptNodes()
        {
            return ExceptField("nodes");
        }

        public I18NLocaleEntityResponseCollectionQueryBuilder WithPageInfo(PaginationQueryBuilder paginationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pageInfo", alias, paginationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public I18NLocaleEntityResponseCollectionQueryBuilder ExceptPageInfo()
        {
            return ExceptField("pageInfo");
        }
    }

    public partial class ReviewWorkflowsWorkflowQueryBuilder : GraphQlQueryBuilder<ReviewWorkflowsWorkflowQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "documentId" },
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "stages_connection", IsComplex = true, QueryBuilderType = typeof(ReviewWorkflowsWorkflowStageRelationResponseCollectionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "stages", IsComplex = true, QueryBuilderType = typeof(ReviewWorkflowsWorkflowStageQueryBuilder) },
                new GraphQlFieldMetadata { Name = "stageRequiredToPublish", IsComplex = true, QueryBuilderType = typeof(ReviewWorkflowsWorkflowStageQueryBuilder) },
                new GraphQlFieldMetadata { Name = "contentTypes" },
                new GraphQlFieldMetadata { Name = "createdAt" },
                new GraphQlFieldMetadata { Name = "updatedAt" },
                new GraphQlFieldMetadata { Name = "publishedAt" }
            };

        protected override string TypeName { get { return "ReviewWorkflowsWorkflow"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ReviewWorkflowsWorkflowQueryBuilder WithDocumentId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("documentId", alias, new GraphQlDirective[] { include, skip });
        }

        public ReviewWorkflowsWorkflowQueryBuilder ExceptDocumentId()
        {
            return ExceptField("documentId");
        }

        public ReviewWorkflowsWorkflowQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public ReviewWorkflowsWorkflowQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public ReviewWorkflowsWorkflowQueryBuilder WithStagesConnection(ReviewWorkflowsWorkflowStageRelationResponseCollectionQueryBuilder reviewWorkflowsWorkflowStageRelationResponseCollectionQueryBuilder, QueryBuilderParameter<ReviewWorkflowsWorkflowStageFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("stages_connection", alias, reviewWorkflowsWorkflowStageRelationResponseCollectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ReviewWorkflowsWorkflowQueryBuilder ExceptStagesConnection()
        {
            return ExceptField("stages_connection");
        }

        public ReviewWorkflowsWorkflowQueryBuilder WithStages(ReviewWorkflowsWorkflowStageQueryBuilder reviewWorkflowsWorkflowStageQueryBuilder, QueryBuilderParameter<ReviewWorkflowsWorkflowStageFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("stages", alias, reviewWorkflowsWorkflowStageQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ReviewWorkflowsWorkflowQueryBuilder ExceptStages()
        {
            return ExceptField("stages");
        }

        public ReviewWorkflowsWorkflowQueryBuilder WithStageRequiredToPublish(ReviewWorkflowsWorkflowStageQueryBuilder reviewWorkflowsWorkflowStageQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("stageRequiredToPublish", alias, reviewWorkflowsWorkflowStageQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ReviewWorkflowsWorkflowQueryBuilder ExceptStageRequiredToPublish()
        {
            return ExceptField("stageRequiredToPublish");
        }

        public ReviewWorkflowsWorkflowQueryBuilder WithContentTypes(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("contentTypes", alias, new GraphQlDirective[] { include, skip });
        }

        public ReviewWorkflowsWorkflowQueryBuilder ExceptContentTypes()
        {
            return ExceptField("contentTypes");
        }

        public ReviewWorkflowsWorkflowQueryBuilder WithCreatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdAt", alias, new GraphQlDirective[] { include, skip });
        }

        public ReviewWorkflowsWorkflowQueryBuilder ExceptCreatedAt()
        {
            return ExceptField("createdAt");
        }

        public ReviewWorkflowsWorkflowQueryBuilder WithUpdatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("updatedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public ReviewWorkflowsWorkflowQueryBuilder ExceptUpdatedAt()
        {
            return ExceptField("updatedAt");
        }

        public ReviewWorkflowsWorkflowQueryBuilder WithPublishedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("publishedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public ReviewWorkflowsWorkflowQueryBuilder ExceptPublishedAt()
        {
            return ExceptField("publishedAt");
        }
    }

    public partial class ReviewWorkflowsWorkflowEntityResponseCollectionQueryBuilder : GraphQlQueryBuilder<ReviewWorkflowsWorkflowEntityResponseCollectionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(ReviewWorkflowsWorkflowQueryBuilder) },
                new GraphQlFieldMetadata { Name = "pageInfo", IsComplex = true, QueryBuilderType = typeof(PaginationQueryBuilder) }
            };

        protected override string TypeName { get { return "ReviewWorkflowsWorkflowEntityResponseCollection"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ReviewWorkflowsWorkflowEntityResponseCollectionQueryBuilder WithNodes(ReviewWorkflowsWorkflowQueryBuilder reviewWorkflowsWorkflowQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("nodes", alias, reviewWorkflowsWorkflowQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ReviewWorkflowsWorkflowEntityResponseCollectionQueryBuilder ExceptNodes()
        {
            return ExceptField("nodes");
        }

        public ReviewWorkflowsWorkflowEntityResponseCollectionQueryBuilder WithPageInfo(PaginationQueryBuilder paginationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pageInfo", alias, paginationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ReviewWorkflowsWorkflowEntityResponseCollectionQueryBuilder ExceptPageInfo()
        {
            return ExceptField("pageInfo");
        }
    }

    public partial class ReviewWorkflowsWorkflowStageQueryBuilder : GraphQlQueryBuilder<ReviewWorkflowsWorkflowStageQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "documentId" },
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "color" },
                new GraphQlFieldMetadata { Name = "workflow", IsComplex = true, QueryBuilderType = typeof(ReviewWorkflowsWorkflowQueryBuilder) },
                new GraphQlFieldMetadata { Name = "createdAt" },
                new GraphQlFieldMetadata { Name = "updatedAt" },
                new GraphQlFieldMetadata { Name = "publishedAt" }
            };

        protected override string TypeName { get { return "ReviewWorkflowsWorkflowStage"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ReviewWorkflowsWorkflowStageQueryBuilder WithDocumentId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("documentId", alias, new GraphQlDirective[] { include, skip });
        }

        public ReviewWorkflowsWorkflowStageQueryBuilder ExceptDocumentId()
        {
            return ExceptField("documentId");
        }

        public ReviewWorkflowsWorkflowStageQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public ReviewWorkflowsWorkflowStageQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public ReviewWorkflowsWorkflowStageQueryBuilder WithColor(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("color", alias, new GraphQlDirective[] { include, skip });
        }

        public ReviewWorkflowsWorkflowStageQueryBuilder ExceptColor()
        {
            return ExceptField("color");
        }

        public ReviewWorkflowsWorkflowStageQueryBuilder WithWorkflow(ReviewWorkflowsWorkflowQueryBuilder reviewWorkflowsWorkflowQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("workflow", alias, reviewWorkflowsWorkflowQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ReviewWorkflowsWorkflowStageQueryBuilder ExceptWorkflow()
        {
            return ExceptField("workflow");
        }

        public ReviewWorkflowsWorkflowStageQueryBuilder WithCreatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdAt", alias, new GraphQlDirective[] { include, skip });
        }

        public ReviewWorkflowsWorkflowStageQueryBuilder ExceptCreatedAt()
        {
            return ExceptField("createdAt");
        }

        public ReviewWorkflowsWorkflowStageQueryBuilder WithUpdatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("updatedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public ReviewWorkflowsWorkflowStageQueryBuilder ExceptUpdatedAt()
        {
            return ExceptField("updatedAt");
        }

        public ReviewWorkflowsWorkflowStageQueryBuilder WithPublishedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("publishedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public ReviewWorkflowsWorkflowStageQueryBuilder ExceptPublishedAt()
        {
            return ExceptField("publishedAt");
        }
    }

    public partial class ReviewWorkflowsWorkflowStageEntityResponseCollectionQueryBuilder : GraphQlQueryBuilder<ReviewWorkflowsWorkflowStageEntityResponseCollectionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(ReviewWorkflowsWorkflowStageQueryBuilder) },
                new GraphQlFieldMetadata { Name = "pageInfo", IsComplex = true, QueryBuilderType = typeof(PaginationQueryBuilder) }
            };

        protected override string TypeName { get { return "ReviewWorkflowsWorkflowStageEntityResponseCollection"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ReviewWorkflowsWorkflowStageEntityResponseCollectionQueryBuilder WithNodes(ReviewWorkflowsWorkflowStageQueryBuilder reviewWorkflowsWorkflowStageQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("nodes", alias, reviewWorkflowsWorkflowStageQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ReviewWorkflowsWorkflowStageEntityResponseCollectionQueryBuilder ExceptNodes()
        {
            return ExceptField("nodes");
        }

        public ReviewWorkflowsWorkflowStageEntityResponseCollectionQueryBuilder WithPageInfo(PaginationQueryBuilder paginationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pageInfo", alias, paginationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ReviewWorkflowsWorkflowStageEntityResponseCollectionQueryBuilder ExceptPageInfo()
        {
            return ExceptField("pageInfo");
        }
    }

    public partial class ReviewWorkflowsWorkflowStageRelationResponseCollectionQueryBuilder : GraphQlQueryBuilder<ReviewWorkflowsWorkflowStageRelationResponseCollectionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(ReviewWorkflowsWorkflowStageQueryBuilder) }
            };

        protected override string TypeName { get { return "ReviewWorkflowsWorkflowStageRelationResponseCollection"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ReviewWorkflowsWorkflowStageRelationResponseCollectionQueryBuilder WithNodes(ReviewWorkflowsWorkflowStageQueryBuilder reviewWorkflowsWorkflowStageQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("nodes", alias, reviewWorkflowsWorkflowStageQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ReviewWorkflowsWorkflowStageRelationResponseCollectionQueryBuilder ExceptNodes()
        {
            return ExceptField("nodes");
        }
    }

    public partial class UsersPermissionsPermissionQueryBuilder : GraphQlQueryBuilder<UsersPermissionsPermissionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "documentId" },
                new GraphQlFieldMetadata { Name = "action" },
                new GraphQlFieldMetadata { Name = "role", IsComplex = true, QueryBuilderType = typeof(UsersPermissionsRoleQueryBuilder) },
                new GraphQlFieldMetadata { Name = "createdAt" },
                new GraphQlFieldMetadata { Name = "updatedAt" },
                new GraphQlFieldMetadata { Name = "publishedAt" }
            };

        protected override string TypeName { get { return "UsersPermissionsPermission"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public UsersPermissionsPermissionQueryBuilder WithDocumentId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("documentId", alias, new GraphQlDirective[] { include, skip });
        }

        public UsersPermissionsPermissionQueryBuilder ExceptDocumentId()
        {
            return ExceptField("documentId");
        }

        public UsersPermissionsPermissionQueryBuilder WithAction(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("action", alias, new GraphQlDirective[] { include, skip });
        }

        public UsersPermissionsPermissionQueryBuilder ExceptAction()
        {
            return ExceptField("action");
        }

        public UsersPermissionsPermissionQueryBuilder WithRole(UsersPermissionsRoleQueryBuilder usersPermissionsRoleQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("role", alias, usersPermissionsRoleQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public UsersPermissionsPermissionQueryBuilder ExceptRole()
        {
            return ExceptField("role");
        }

        public UsersPermissionsPermissionQueryBuilder WithCreatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdAt", alias, new GraphQlDirective[] { include, skip });
        }

        public UsersPermissionsPermissionQueryBuilder ExceptCreatedAt()
        {
            return ExceptField("createdAt");
        }

        public UsersPermissionsPermissionQueryBuilder WithUpdatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("updatedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public UsersPermissionsPermissionQueryBuilder ExceptUpdatedAt()
        {
            return ExceptField("updatedAt");
        }

        public UsersPermissionsPermissionQueryBuilder WithPublishedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("publishedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public UsersPermissionsPermissionQueryBuilder ExceptPublishedAt()
        {
            return ExceptField("publishedAt");
        }
    }

    public partial class UsersPermissionsPermissionRelationResponseCollectionQueryBuilder : GraphQlQueryBuilder<UsersPermissionsPermissionRelationResponseCollectionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(UsersPermissionsPermissionQueryBuilder) }
            };

        protected override string TypeName { get { return "UsersPermissionsPermissionRelationResponseCollection"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public UsersPermissionsPermissionRelationResponseCollectionQueryBuilder WithNodes(UsersPermissionsPermissionQueryBuilder usersPermissionsPermissionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("nodes", alias, usersPermissionsPermissionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public UsersPermissionsPermissionRelationResponseCollectionQueryBuilder ExceptNodes()
        {
            return ExceptField("nodes");
        }
    }

    public partial class UsersPermissionsRoleQueryBuilder : GraphQlQueryBuilder<UsersPermissionsRoleQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "documentId" },
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "description" },
                new GraphQlFieldMetadata { Name = "type" },
                new GraphQlFieldMetadata { Name = "permissions_connection", IsComplex = true, QueryBuilderType = typeof(UsersPermissionsPermissionRelationResponseCollectionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "permissions", IsComplex = true, QueryBuilderType = typeof(UsersPermissionsPermissionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "users_connection", IsComplex = true, QueryBuilderType = typeof(UsersPermissionsUserRelationResponseCollectionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "users", IsComplex = true, QueryBuilderType = typeof(UsersPermissionsUserQueryBuilder) },
                new GraphQlFieldMetadata { Name = "createdAt" },
                new GraphQlFieldMetadata { Name = "updatedAt" },
                new GraphQlFieldMetadata { Name = "publishedAt" }
            };

        protected override string TypeName { get { return "UsersPermissionsRole"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public UsersPermissionsRoleQueryBuilder WithDocumentId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("documentId", alias, new GraphQlDirective[] { include, skip });
        }

        public UsersPermissionsRoleQueryBuilder ExceptDocumentId()
        {
            return ExceptField("documentId");
        }

        public UsersPermissionsRoleQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public UsersPermissionsRoleQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public UsersPermissionsRoleQueryBuilder WithDescription(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("description", alias, new GraphQlDirective[] { include, skip });
        }

        public UsersPermissionsRoleQueryBuilder ExceptDescription()
        {
            return ExceptField("description");
        }

        public UsersPermissionsRoleQueryBuilder WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("type", alias, new GraphQlDirective[] { include, skip });
        }

        public UsersPermissionsRoleQueryBuilder ExceptType()
        {
            return ExceptField("type");
        }

        public UsersPermissionsRoleQueryBuilder WithPermissionsConnection(UsersPermissionsPermissionRelationResponseCollectionQueryBuilder usersPermissionsPermissionRelationResponseCollectionQueryBuilder, QueryBuilderParameter<UsersPermissionsPermissionFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("permissions_connection", alias, usersPermissionsPermissionRelationResponseCollectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public UsersPermissionsRoleQueryBuilder ExceptPermissionsConnection()
        {
            return ExceptField("permissions_connection");
        }

        public UsersPermissionsRoleQueryBuilder WithPermissions(UsersPermissionsPermissionQueryBuilder usersPermissionsPermissionQueryBuilder, QueryBuilderParameter<UsersPermissionsPermissionFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("permissions", alias, usersPermissionsPermissionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public UsersPermissionsRoleQueryBuilder ExceptPermissions()
        {
            return ExceptField("permissions");
        }

        public UsersPermissionsRoleQueryBuilder WithUsersConnection(UsersPermissionsUserRelationResponseCollectionQueryBuilder usersPermissionsUserRelationResponseCollectionQueryBuilder, QueryBuilderParameter<UsersPermissionsUserFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("users_connection", alias, usersPermissionsUserRelationResponseCollectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public UsersPermissionsRoleQueryBuilder ExceptUsersConnection()
        {
            return ExceptField("users_connection");
        }

        public UsersPermissionsRoleQueryBuilder WithUsers(UsersPermissionsUserQueryBuilder usersPermissionsUserQueryBuilder, QueryBuilderParameter<UsersPermissionsUserFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("users", alias, usersPermissionsUserQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public UsersPermissionsRoleQueryBuilder ExceptUsers()
        {
            return ExceptField("users");
        }

        public UsersPermissionsRoleQueryBuilder WithCreatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdAt", alias, new GraphQlDirective[] { include, skip });
        }

        public UsersPermissionsRoleQueryBuilder ExceptCreatedAt()
        {
            return ExceptField("createdAt");
        }

        public UsersPermissionsRoleQueryBuilder WithUpdatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("updatedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public UsersPermissionsRoleQueryBuilder ExceptUpdatedAt()
        {
            return ExceptField("updatedAt");
        }

        public UsersPermissionsRoleQueryBuilder WithPublishedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("publishedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public UsersPermissionsRoleQueryBuilder ExceptPublishedAt()
        {
            return ExceptField("publishedAt");
        }
    }

    public partial class UsersPermissionsRoleEntityResponseCollectionQueryBuilder : GraphQlQueryBuilder<UsersPermissionsRoleEntityResponseCollectionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(UsersPermissionsRoleQueryBuilder) },
                new GraphQlFieldMetadata { Name = "pageInfo", IsComplex = true, QueryBuilderType = typeof(PaginationQueryBuilder) }
            };

        protected override string TypeName { get { return "UsersPermissionsRoleEntityResponseCollection"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public UsersPermissionsRoleEntityResponseCollectionQueryBuilder WithNodes(UsersPermissionsRoleQueryBuilder usersPermissionsRoleQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("nodes", alias, usersPermissionsRoleQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public UsersPermissionsRoleEntityResponseCollectionQueryBuilder ExceptNodes()
        {
            return ExceptField("nodes");
        }

        public UsersPermissionsRoleEntityResponseCollectionQueryBuilder WithPageInfo(PaginationQueryBuilder paginationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pageInfo", alias, paginationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public UsersPermissionsRoleEntityResponseCollectionQueryBuilder ExceptPageInfo()
        {
            return ExceptField("pageInfo");
        }
    }

    public partial class UsersPermissionsUserQueryBuilder : GraphQlQueryBuilder<UsersPermissionsUserQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "documentId" },
                new GraphQlFieldMetadata { Name = "username" },
                new GraphQlFieldMetadata { Name = "email" },
                new GraphQlFieldMetadata { Name = "provider" },
                new GraphQlFieldMetadata { Name = "confirmed" },
                new GraphQlFieldMetadata { Name = "blocked" },
                new GraphQlFieldMetadata { Name = "role", IsComplex = true, QueryBuilderType = typeof(UsersPermissionsRoleQueryBuilder) },
                new GraphQlFieldMetadata { Name = "createdAt" },
                new GraphQlFieldMetadata { Name = "updatedAt" },
                new GraphQlFieldMetadata { Name = "publishedAt" }
            };

        protected override string TypeName { get { return "UsersPermissionsUser"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public UsersPermissionsUserQueryBuilder WithDocumentId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("documentId", alias, new GraphQlDirective[] { include, skip });
        }

        public UsersPermissionsUserQueryBuilder ExceptDocumentId()
        {
            return ExceptField("documentId");
        }

        public UsersPermissionsUserQueryBuilder WithUsername(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("username", alias, new GraphQlDirective[] { include, skip });
        }

        public UsersPermissionsUserQueryBuilder ExceptUsername()
        {
            return ExceptField("username");
        }

        public UsersPermissionsUserQueryBuilder WithEmail(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("email", alias, new GraphQlDirective[] { include, skip });
        }

        public UsersPermissionsUserQueryBuilder ExceptEmail()
        {
            return ExceptField("email");
        }

        public UsersPermissionsUserQueryBuilder WithProvider(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("provider", alias, new GraphQlDirective[] { include, skip });
        }

        public UsersPermissionsUserQueryBuilder ExceptProvider()
        {
            return ExceptField("provider");
        }

        public UsersPermissionsUserQueryBuilder WithConfirmed(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("confirmed", alias, new GraphQlDirective[] { include, skip });
        }

        public UsersPermissionsUserQueryBuilder ExceptConfirmed()
        {
            return ExceptField("confirmed");
        }

        public UsersPermissionsUserQueryBuilder WithBlocked(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("blocked", alias, new GraphQlDirective[] { include, skip });
        }

        public UsersPermissionsUserQueryBuilder ExceptBlocked()
        {
            return ExceptField("blocked");
        }

        public UsersPermissionsUserQueryBuilder WithRole(UsersPermissionsRoleQueryBuilder usersPermissionsRoleQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("role", alias, usersPermissionsRoleQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public UsersPermissionsUserQueryBuilder ExceptRole()
        {
            return ExceptField("role");
        }

        public UsersPermissionsUserQueryBuilder WithCreatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdAt", alias, new GraphQlDirective[] { include, skip });
        }

        public UsersPermissionsUserQueryBuilder ExceptCreatedAt()
        {
            return ExceptField("createdAt");
        }

        public UsersPermissionsUserQueryBuilder WithUpdatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("updatedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public UsersPermissionsUserQueryBuilder ExceptUpdatedAt()
        {
            return ExceptField("updatedAt");
        }

        public UsersPermissionsUserQueryBuilder WithPublishedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("publishedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public UsersPermissionsUserQueryBuilder ExceptPublishedAt()
        {
            return ExceptField("publishedAt");
        }
    }

    public partial class UsersPermissionsUserEntityResponseQueryBuilder : GraphQlQueryBuilder<UsersPermissionsUserEntityResponseQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "data", IsComplex = true, QueryBuilderType = typeof(UsersPermissionsUserQueryBuilder) }
            };

        protected override string TypeName { get { return "UsersPermissionsUserEntityResponse"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public UsersPermissionsUserEntityResponseQueryBuilder WithData(UsersPermissionsUserQueryBuilder usersPermissionsUserQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("data", alias, usersPermissionsUserQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public UsersPermissionsUserEntityResponseQueryBuilder ExceptData()
        {
            return ExceptField("data");
        }
    }

    public partial class UsersPermissionsUserEntityResponseCollectionQueryBuilder : GraphQlQueryBuilder<UsersPermissionsUserEntityResponseCollectionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(UsersPermissionsUserQueryBuilder) },
                new GraphQlFieldMetadata { Name = "pageInfo", IsComplex = true, QueryBuilderType = typeof(PaginationQueryBuilder) }
            };

        protected override string TypeName { get { return "UsersPermissionsUserEntityResponseCollection"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public UsersPermissionsUserEntityResponseCollectionQueryBuilder WithNodes(UsersPermissionsUserQueryBuilder usersPermissionsUserQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("nodes", alias, usersPermissionsUserQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public UsersPermissionsUserEntityResponseCollectionQueryBuilder ExceptNodes()
        {
            return ExceptField("nodes");
        }

        public UsersPermissionsUserEntityResponseCollectionQueryBuilder WithPageInfo(PaginationQueryBuilder paginationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pageInfo", alias, paginationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public UsersPermissionsUserEntityResponseCollectionQueryBuilder ExceptPageInfo()
        {
            return ExceptField("pageInfo");
        }
    }

    public partial class UsersPermissionsUserRelationResponseCollectionQueryBuilder : GraphQlQueryBuilder<UsersPermissionsUserRelationResponseCollectionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(UsersPermissionsUserQueryBuilder) }
            };

        protected override string TypeName { get { return "UsersPermissionsUserRelationResponseCollection"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public UsersPermissionsUserRelationResponseCollectionQueryBuilder WithNodes(UsersPermissionsUserQueryBuilder usersPermissionsUserQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("nodes", alias, usersPermissionsUserQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public UsersPermissionsUserRelationResponseCollectionQueryBuilder ExceptNodes()
        {
            return ExceptField("nodes");
        }
    }

    public partial class AboutUsQueryBuilder : GraphQlQueryBuilder<AboutUsQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "documentId" },
                new GraphQlFieldMetadata { Name = "Title" },
                new GraphQlFieldMetadata { Name = "smallText" },
                new GraphQlFieldMetadata { Name = "BOT_CTA_Text" },
                new GraphQlFieldMetadata { Name = "htmlColorText", IsComplex = true, QueryBuilderType = typeof(ComponentHtmlColorTextHtmlColorTextQueryBuilder) },
                new GraphQlFieldMetadata { Name = "iconText", IsComplex = true, QueryBuilderType = typeof(ComponentIconTextIconTextQueryBuilder) },
                new GraphQlFieldMetadata { Name = "MainCTA", IsComplex = true, QueryBuilderType = typeof(ComponentMainCtaMainCtaQueryBuilder) },
                new GraphQlFieldMetadata { Name = "sliders_connection", IsComplex = true, QueryBuilderType = typeof(UploadFileRelationResponseCollectionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "sliders", IsComplex = true, QueryBuilderType = typeof(UploadFileQueryBuilder) },
                new GraphQlFieldMetadata { Name = "TopBg", IsComplex = true, QueryBuilderType = typeof(UploadFileQueryBuilder) },
                new GraphQlFieldMetadata { Name = "createdAt" },
                new GraphQlFieldMetadata { Name = "updatedAt" },
                new GraphQlFieldMetadata { Name = "publishedAt" }
            };

        protected override string TypeName { get { return "AboutUs"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public AboutUsQueryBuilder WithDocumentId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("documentId", alias, new GraphQlDirective[] { include, skip });
        }

        public AboutUsQueryBuilder ExceptDocumentId()
        {
            return ExceptField("documentId");
        }

        public AboutUsQueryBuilder WithTitle(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("Title", alias, new GraphQlDirective[] { include, skip });
        }

        public AboutUsQueryBuilder ExceptTitle()
        {
            return ExceptField("Title");
        }

        public AboutUsQueryBuilder WithSmallText(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("smallText", alias, new GraphQlDirective[] { include, skip });
        }

        public AboutUsQueryBuilder ExceptSmallText()
        {
            return ExceptField("smallText");
        }

        public AboutUsQueryBuilder WithBotCtaText(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("BOT_CTA_Text", alias, new GraphQlDirective[] { include, skip });
        }

        public AboutUsQueryBuilder ExceptBotCtaText()
        {
            return ExceptField("BOT_CTA_Text");
        }

        public AboutUsQueryBuilder WithHtmlColorText(ComponentHtmlColorTextHtmlColorTextQueryBuilder componentHtmlColorTextHtmlColorTextQueryBuilder, QueryBuilderParameter<ComponentHtmlColorTextHtmlColorTextFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("htmlColorText", alias, componentHtmlColorTextHtmlColorTextQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public AboutUsQueryBuilder ExceptHtmlColorText()
        {
            return ExceptField("htmlColorText");
        }

        public AboutUsQueryBuilder WithIconText(ComponentIconTextIconTextQueryBuilder componentIconTextIconTextQueryBuilder, QueryBuilderParameter<ComponentIconTextIconTextFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("iconText", alias, componentIconTextIconTextQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public AboutUsQueryBuilder ExceptIconText()
        {
            return ExceptField("iconText");
        }

        public AboutUsQueryBuilder WithMainCta(ComponentMainCtaMainCtaQueryBuilder componentMainCtaMainCtaQueryBuilder, QueryBuilderParameter<ComponentMainCtaMainCtaFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("MainCTA", alias, componentMainCtaMainCtaQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public AboutUsQueryBuilder ExceptMainCta()
        {
            return ExceptField("MainCTA");
        }

        public AboutUsQueryBuilder WithSlidersConnection(UploadFileRelationResponseCollectionQueryBuilder uploadFileRelationResponseCollectionQueryBuilder, QueryBuilderParameter<UploadFileFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("sliders_connection", alias, uploadFileRelationResponseCollectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public AboutUsQueryBuilder ExceptSlidersConnection()
        {
            return ExceptField("sliders_connection");
        }

        public AboutUsQueryBuilder WithSliders(UploadFileQueryBuilder uploadFileQueryBuilder, QueryBuilderParameter<UploadFileFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("sliders", alias, uploadFileQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public AboutUsQueryBuilder ExceptSliders()
        {
            return ExceptField("sliders");
        }

        public AboutUsQueryBuilder WithTopBg(UploadFileQueryBuilder uploadFileQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("TopBg", alias, uploadFileQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public AboutUsQueryBuilder ExceptTopBg()
        {
            return ExceptField("TopBg");
        }

        public AboutUsQueryBuilder WithCreatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdAt", alias, new GraphQlDirective[] { include, skip });
        }

        public AboutUsQueryBuilder ExceptCreatedAt()
        {
            return ExceptField("createdAt");
        }

        public AboutUsQueryBuilder WithUpdatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("updatedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public AboutUsQueryBuilder ExceptUpdatedAt()
        {
            return ExceptField("updatedAt");
        }

        public AboutUsQueryBuilder WithPublishedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("publishedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public AboutUsQueryBuilder ExceptPublishedAt()
        {
            return ExceptField("publishedAt");
        }
    }

    public partial class AccountQueryBuilder : GraphQlQueryBuilder<AccountQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "documentId" },
                new GraphQlFieldMetadata { Name = "Title" },
                new GraphQlFieldMetadata { Name = "smallText" },
                new GraphQlFieldMetadata { Name = "createdAt" },
                new GraphQlFieldMetadata { Name = "updatedAt" },
                new GraphQlFieldMetadata { Name = "publishedAt" }
            };

        protected override string TypeName { get { return "Account"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public AccountQueryBuilder WithDocumentId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("documentId", alias, new GraphQlDirective[] { include, skip });
        }

        public AccountQueryBuilder ExceptDocumentId()
        {
            return ExceptField("documentId");
        }

        public AccountQueryBuilder WithTitle(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("Title", alias, new GraphQlDirective[] { include, skip });
        }

        public AccountQueryBuilder ExceptTitle()
        {
            return ExceptField("Title");
        }

        public AccountQueryBuilder WithSmallText(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("smallText", alias, new GraphQlDirective[] { include, skip });
        }

        public AccountQueryBuilder ExceptSmallText()
        {
            return ExceptField("smallText");
        }

        public AccountQueryBuilder WithCreatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdAt", alias, new GraphQlDirective[] { include, skip });
        }

        public AccountQueryBuilder ExceptCreatedAt()
        {
            return ExceptField("createdAt");
        }

        public AccountQueryBuilder WithUpdatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("updatedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public AccountQueryBuilder ExceptUpdatedAt()
        {
            return ExceptField("updatedAt");
        }

        public AccountQueryBuilder WithPublishedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("publishedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public AccountQueryBuilder ExceptPublishedAt()
        {
            return ExceptField("publishedAt");
        }
    }

    public partial class AuthAdministratorQueryBuilder : GraphQlQueryBuilder<AuthAdministratorQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "documentId" },
                new GraphQlFieldMetadata { Name = "Wallet" },
                new GraphQlFieldMetadata { Name = "createdAt" },
                new GraphQlFieldMetadata { Name = "updatedAt" },
                new GraphQlFieldMetadata { Name = "publishedAt" }
            };

        protected override string TypeName { get { return "AuthAdministrator"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public AuthAdministratorQueryBuilder WithDocumentId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("documentId", alias, new GraphQlDirective[] { include, skip });
        }

        public AuthAdministratorQueryBuilder ExceptDocumentId()
        {
            return ExceptField("documentId");
        }

        public AuthAdministratorQueryBuilder WithWallet(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("Wallet", alias, new GraphQlDirective[] { include, skip });
        }

        public AuthAdministratorQueryBuilder ExceptWallet()
        {
            return ExceptField("Wallet");
        }

        public AuthAdministratorQueryBuilder WithCreatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdAt", alias, new GraphQlDirective[] { include, skip });
        }

        public AuthAdministratorQueryBuilder ExceptCreatedAt()
        {
            return ExceptField("createdAt");
        }

        public AuthAdministratorQueryBuilder WithUpdatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("updatedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public AuthAdministratorQueryBuilder ExceptUpdatedAt()
        {
            return ExceptField("updatedAt");
        }

        public AuthAdministratorQueryBuilder WithPublishedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("publishedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public AuthAdministratorQueryBuilder ExceptPublishedAt()
        {
            return ExceptField("publishedAt");
        }
    }

    public partial class AuthAdministratorEntityResponseCollectionQueryBuilder : GraphQlQueryBuilder<AuthAdministratorEntityResponseCollectionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(AuthAdministratorQueryBuilder) },
                new GraphQlFieldMetadata { Name = "pageInfo", IsComplex = true, QueryBuilderType = typeof(PaginationQueryBuilder) }
            };

        protected override string TypeName { get { return "AuthAdministratorEntityResponseCollection"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public AuthAdministratorEntityResponseCollectionQueryBuilder WithNodes(AuthAdministratorQueryBuilder authAdministratorQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("nodes", alias, authAdministratorQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public AuthAdministratorEntityResponseCollectionQueryBuilder ExceptNodes()
        {
            return ExceptField("nodes");
        }

        public AuthAdministratorEntityResponseCollectionQueryBuilder WithPageInfo(PaginationQueryBuilder paginationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pageInfo", alias, paginationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public AuthAdministratorEntityResponseCollectionQueryBuilder ExceptPageInfo()
        {
            return ExceptField("pageInfo");
        }
    }

    public partial class AuthAdministratorsResourceQueryBuilder : GraphQlQueryBuilder<AuthAdministratorsResourceQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "documentId" },
                new GraphQlFieldMetadata { Name = "OnlyAdminResources_connection", IsComplex = true, QueryBuilderType = typeof(AuthResourceRelationResponseCollectionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "OnlyAdminResources", IsComplex = true, QueryBuilderType = typeof(AuthResourceQueryBuilder) },
                new GraphQlFieldMetadata { Name = "createdAt" },
                new GraphQlFieldMetadata { Name = "updatedAt" },
                new GraphQlFieldMetadata { Name = "publishedAt" }
            };

        protected override string TypeName { get { return "AuthAdministratorsResource"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public AuthAdministratorsResourceQueryBuilder WithDocumentId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("documentId", alias, new GraphQlDirective[] { include, skip });
        }

        public AuthAdministratorsResourceQueryBuilder ExceptDocumentId()
        {
            return ExceptField("documentId");
        }

        public AuthAdministratorsResourceQueryBuilder WithOnlyAdminResourcesConnection(AuthResourceRelationResponseCollectionQueryBuilder authResourceRelationResponseCollectionQueryBuilder, QueryBuilderParameter<AuthResourceFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("OnlyAdminResources_connection", alias, authResourceRelationResponseCollectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public AuthAdministratorsResourceQueryBuilder ExceptOnlyAdminResourcesConnection()
        {
            return ExceptField("OnlyAdminResources_connection");
        }

        public AuthAdministratorsResourceQueryBuilder WithOnlyAdminResources(AuthResourceQueryBuilder authResourceQueryBuilder, QueryBuilderParameter<AuthResourceFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("OnlyAdminResources", alias, authResourceQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public AuthAdministratorsResourceQueryBuilder ExceptOnlyAdminResources()
        {
            return ExceptField("OnlyAdminResources");
        }

        public AuthAdministratorsResourceQueryBuilder WithCreatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdAt", alias, new GraphQlDirective[] { include, skip });
        }

        public AuthAdministratorsResourceQueryBuilder ExceptCreatedAt()
        {
            return ExceptField("createdAt");
        }

        public AuthAdministratorsResourceQueryBuilder WithUpdatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("updatedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public AuthAdministratorsResourceQueryBuilder ExceptUpdatedAt()
        {
            return ExceptField("updatedAt");
        }

        public AuthAdministratorsResourceQueryBuilder WithPublishedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("publishedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public AuthAdministratorsResourceQueryBuilder ExceptPublishedAt()
        {
            return ExceptField("publishedAt");
        }
    }

    public partial class AuthResourceQueryBuilder : GraphQlQueryBuilder<AuthResourceQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "documentId" },
                new GraphQlFieldMetadata { Name = "Name" },
                new GraphQlFieldMetadata { Name = "RoleIDs_connection", IsComplex = true, QueryBuilderType = typeof(AuthRoleRelationResponseCollectionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "RoleIDs", IsComplex = true, QueryBuilderType = typeof(AuthRoleQueryBuilder) },
                new GraphQlFieldMetadata { Name = "createdAt" },
                new GraphQlFieldMetadata { Name = "updatedAt" },
                new GraphQlFieldMetadata { Name = "publishedAt" }
            };

        protected override string TypeName { get { return "AuthResource"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public AuthResourceQueryBuilder WithDocumentId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("documentId", alias, new GraphQlDirective[] { include, skip });
        }

        public AuthResourceQueryBuilder ExceptDocumentId()
        {
            return ExceptField("documentId");
        }

        public AuthResourceQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("Name", alias, new GraphQlDirective[] { include, skip });
        }

        public AuthResourceQueryBuilder ExceptName()
        {
            return ExceptField("Name");
        }

        public AuthResourceQueryBuilder WithRoleIDsConnection(AuthRoleRelationResponseCollectionQueryBuilder authRoleRelationResponseCollectionQueryBuilder, QueryBuilderParameter<AuthRoleFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("RoleIDs_connection", alias, authRoleRelationResponseCollectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public AuthResourceQueryBuilder ExceptRoleIDsConnection()
        {
            return ExceptField("RoleIDs_connection");
        }

        public AuthResourceQueryBuilder WithRoleIDs(AuthRoleQueryBuilder authRoleQueryBuilder, QueryBuilderParameter<AuthRoleFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("RoleIDs", alias, authRoleQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public AuthResourceQueryBuilder ExceptRoleIDs()
        {
            return ExceptField("RoleIDs");
        }

        public AuthResourceQueryBuilder WithCreatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdAt", alias, new GraphQlDirective[] { include, skip });
        }

        public AuthResourceQueryBuilder ExceptCreatedAt()
        {
            return ExceptField("createdAt");
        }

        public AuthResourceQueryBuilder WithUpdatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("updatedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public AuthResourceQueryBuilder ExceptUpdatedAt()
        {
            return ExceptField("updatedAt");
        }

        public AuthResourceQueryBuilder WithPublishedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("publishedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public AuthResourceQueryBuilder ExceptPublishedAt()
        {
            return ExceptField("publishedAt");
        }
    }

    public partial class AuthResourceEntityResponseCollectionQueryBuilder : GraphQlQueryBuilder<AuthResourceEntityResponseCollectionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(AuthResourceQueryBuilder) },
                new GraphQlFieldMetadata { Name = "pageInfo", IsComplex = true, QueryBuilderType = typeof(PaginationQueryBuilder) }
            };

        protected override string TypeName { get { return "AuthResourceEntityResponseCollection"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public AuthResourceEntityResponseCollectionQueryBuilder WithNodes(AuthResourceQueryBuilder authResourceQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("nodes", alias, authResourceQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public AuthResourceEntityResponseCollectionQueryBuilder ExceptNodes()
        {
            return ExceptField("nodes");
        }

        public AuthResourceEntityResponseCollectionQueryBuilder WithPageInfo(PaginationQueryBuilder paginationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pageInfo", alias, paginationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public AuthResourceEntityResponseCollectionQueryBuilder ExceptPageInfo()
        {
            return ExceptField("pageInfo");
        }
    }

    public partial class AuthResourceRelationResponseCollectionQueryBuilder : GraphQlQueryBuilder<AuthResourceRelationResponseCollectionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(AuthResourceQueryBuilder) }
            };

        protected override string TypeName { get { return "AuthResourceRelationResponseCollection"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public AuthResourceRelationResponseCollectionQueryBuilder WithNodes(AuthResourceQueryBuilder authResourceQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("nodes", alias, authResourceQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public AuthResourceRelationResponseCollectionQueryBuilder ExceptNodes()
        {
            return ExceptField("nodes");
        }
    }

    public partial class AuthRoleQueryBuilder : GraphQlQueryBuilder<AuthRoleQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "documentId" },
                new GraphQlFieldMetadata { Name = "Name" },
                new GraphQlFieldMetadata { Name = "UserIDs_connection", IsComplex = true, QueryBuilderType = typeof(AuthUserRelationResponseCollectionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "UserIDs", IsComplex = true, QueryBuilderType = typeof(AuthUserQueryBuilder) },
                new GraphQlFieldMetadata { Name = "ResourceIDs_connection", IsComplex = true, QueryBuilderType = typeof(AuthResourceRelationResponseCollectionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "ResourceIDs", IsComplex = true, QueryBuilderType = typeof(AuthResourceQueryBuilder) },
                new GraphQlFieldMetadata { Name = "createdAt" },
                new GraphQlFieldMetadata { Name = "updatedAt" },
                new GraphQlFieldMetadata { Name = "publishedAt" }
            };

        protected override string TypeName { get { return "AuthRole"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public AuthRoleQueryBuilder WithDocumentId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("documentId", alias, new GraphQlDirective[] { include, skip });
        }

        public AuthRoleQueryBuilder ExceptDocumentId()
        {
            return ExceptField("documentId");
        }

        public AuthRoleQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("Name", alias, new GraphQlDirective[] { include, skip });
        }

        public AuthRoleQueryBuilder ExceptName()
        {
            return ExceptField("Name");
        }

        public AuthRoleQueryBuilder WithUserIDsConnection(AuthUserRelationResponseCollectionQueryBuilder authUserRelationResponseCollectionQueryBuilder, QueryBuilderParameter<AuthUserFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("UserIDs_connection", alias, authUserRelationResponseCollectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public AuthRoleQueryBuilder ExceptUserIDsConnection()
        {
            return ExceptField("UserIDs_connection");
        }

        public AuthRoleQueryBuilder WithUserIDs(AuthUserQueryBuilder authUserQueryBuilder, QueryBuilderParameter<AuthUserFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("UserIDs", alias, authUserQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public AuthRoleQueryBuilder ExceptUserIDs()
        {
            return ExceptField("UserIDs");
        }

        public AuthRoleQueryBuilder WithResourceIDsConnection(AuthResourceRelationResponseCollectionQueryBuilder authResourceRelationResponseCollectionQueryBuilder, QueryBuilderParameter<AuthResourceFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("ResourceIDs_connection", alias, authResourceRelationResponseCollectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public AuthRoleQueryBuilder ExceptResourceIDsConnection()
        {
            return ExceptField("ResourceIDs_connection");
        }

        public AuthRoleQueryBuilder WithResourceIDs(AuthResourceQueryBuilder authResourceQueryBuilder, QueryBuilderParameter<AuthResourceFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("ResourceIDs", alias, authResourceQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public AuthRoleQueryBuilder ExceptResourceIDs()
        {
            return ExceptField("ResourceIDs");
        }

        public AuthRoleQueryBuilder WithCreatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdAt", alias, new GraphQlDirective[] { include, skip });
        }

        public AuthRoleQueryBuilder ExceptCreatedAt()
        {
            return ExceptField("createdAt");
        }

        public AuthRoleQueryBuilder WithUpdatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("updatedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public AuthRoleQueryBuilder ExceptUpdatedAt()
        {
            return ExceptField("updatedAt");
        }

        public AuthRoleQueryBuilder WithPublishedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("publishedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public AuthRoleQueryBuilder ExceptPublishedAt()
        {
            return ExceptField("publishedAt");
        }
    }

    public partial class AuthRoleEntityResponseCollectionQueryBuilder : GraphQlQueryBuilder<AuthRoleEntityResponseCollectionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(AuthRoleQueryBuilder) },
                new GraphQlFieldMetadata { Name = "pageInfo", IsComplex = true, QueryBuilderType = typeof(PaginationQueryBuilder) }
            };

        protected override string TypeName { get { return "AuthRoleEntityResponseCollection"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public AuthRoleEntityResponseCollectionQueryBuilder WithNodes(AuthRoleQueryBuilder authRoleQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("nodes", alias, authRoleQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public AuthRoleEntityResponseCollectionQueryBuilder ExceptNodes()
        {
            return ExceptField("nodes");
        }

        public AuthRoleEntityResponseCollectionQueryBuilder WithPageInfo(PaginationQueryBuilder paginationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pageInfo", alias, paginationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public AuthRoleEntityResponseCollectionQueryBuilder ExceptPageInfo()
        {
            return ExceptField("pageInfo");
        }
    }

    public partial class AuthRoleRelationResponseCollectionQueryBuilder : GraphQlQueryBuilder<AuthRoleRelationResponseCollectionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(AuthRoleQueryBuilder) }
            };

        protected override string TypeName { get { return "AuthRoleRelationResponseCollection"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public AuthRoleRelationResponseCollectionQueryBuilder WithNodes(AuthRoleQueryBuilder authRoleQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("nodes", alias, authRoleQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public AuthRoleRelationResponseCollectionQueryBuilder ExceptNodes()
        {
            return ExceptField("nodes");
        }
    }

    public partial class AuthUserQueryBuilder : GraphQlQueryBuilder<AuthUserQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "documentId" },
                new GraphQlFieldMetadata { Name = "Wallet" },
                new GraphQlFieldMetadata { Name = "RoleIDs_connection", IsComplex = true, QueryBuilderType = typeof(AuthRoleRelationResponseCollectionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "RoleIDs", IsComplex = true, QueryBuilderType = typeof(AuthRoleQueryBuilder) },
                new GraphQlFieldMetadata { Name = "createdAt" },
                new GraphQlFieldMetadata { Name = "updatedAt" },
                new GraphQlFieldMetadata { Name = "publishedAt" }
            };

        protected override string TypeName { get { return "AuthUser"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public AuthUserQueryBuilder WithDocumentId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("documentId", alias, new GraphQlDirective[] { include, skip });
        }

        public AuthUserQueryBuilder ExceptDocumentId()
        {
            return ExceptField("documentId");
        }

        public AuthUserQueryBuilder WithWallet(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("Wallet", alias, new GraphQlDirective[] { include, skip });
        }

        public AuthUserQueryBuilder ExceptWallet()
        {
            return ExceptField("Wallet");
        }

        public AuthUserQueryBuilder WithRoleIDsConnection(AuthRoleRelationResponseCollectionQueryBuilder authRoleRelationResponseCollectionQueryBuilder, QueryBuilderParameter<AuthRoleFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("RoleIDs_connection", alias, authRoleRelationResponseCollectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public AuthUserQueryBuilder ExceptRoleIDsConnection()
        {
            return ExceptField("RoleIDs_connection");
        }

        public AuthUserQueryBuilder WithRoleIDs(AuthRoleQueryBuilder authRoleQueryBuilder, QueryBuilderParameter<AuthRoleFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("RoleIDs", alias, authRoleQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public AuthUserQueryBuilder ExceptRoleIDs()
        {
            return ExceptField("RoleIDs");
        }

        public AuthUserQueryBuilder WithCreatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdAt", alias, new GraphQlDirective[] { include, skip });
        }

        public AuthUserQueryBuilder ExceptCreatedAt()
        {
            return ExceptField("createdAt");
        }

        public AuthUserQueryBuilder WithUpdatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("updatedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public AuthUserQueryBuilder ExceptUpdatedAt()
        {
            return ExceptField("updatedAt");
        }

        public AuthUserQueryBuilder WithPublishedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("publishedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public AuthUserQueryBuilder ExceptPublishedAt()
        {
            return ExceptField("publishedAt");
        }
    }

    public partial class AuthUserEntityResponseCollectionQueryBuilder : GraphQlQueryBuilder<AuthUserEntityResponseCollectionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(AuthUserQueryBuilder) },
                new GraphQlFieldMetadata { Name = "pageInfo", IsComplex = true, QueryBuilderType = typeof(PaginationQueryBuilder) }
            };

        protected override string TypeName { get { return "AuthUserEntityResponseCollection"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public AuthUserEntityResponseCollectionQueryBuilder WithNodes(AuthUserQueryBuilder authUserQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("nodes", alias, authUserQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public AuthUserEntityResponseCollectionQueryBuilder ExceptNodes()
        {
            return ExceptField("nodes");
        }

        public AuthUserEntityResponseCollectionQueryBuilder WithPageInfo(PaginationQueryBuilder paginationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pageInfo", alias, paginationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public AuthUserEntityResponseCollectionQueryBuilder ExceptPageInfo()
        {
            return ExceptField("pageInfo");
        }
    }

    public partial class AuthUserRelationResponseCollectionQueryBuilder : GraphQlQueryBuilder<AuthUserRelationResponseCollectionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(AuthUserQueryBuilder) }
            };

        protected override string TypeName { get { return "AuthUserRelationResponseCollection"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public AuthUserRelationResponseCollectionQueryBuilder WithNodes(AuthUserQueryBuilder authUserQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("nodes", alias, authUserQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public AuthUserRelationResponseCollectionQueryBuilder ExceptNodes()
        {
            return ExceptField("nodes");
        }
    }

    public partial class AutoSignUpQueryBuilder : GraphQlQueryBuilder<AutoSignUpQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "documentId" },
                new GraphQlFieldMetadata { Name = "Wallet" },
                new GraphQlFieldMetadata { Name = "Note" },
                new GraphQlFieldMetadata { Name = "Amount" },
                new GraphQlFieldMetadata { Name = "createdAt" },
                new GraphQlFieldMetadata { Name = "updatedAt" },
                new GraphQlFieldMetadata { Name = "publishedAt" }
            };

        protected override string TypeName { get { return "AutoSignUp"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public AutoSignUpQueryBuilder WithDocumentId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("documentId", alias, new GraphQlDirective[] { include, skip });
        }

        public AutoSignUpQueryBuilder ExceptDocumentId()
        {
            return ExceptField("documentId");
        }

        public AutoSignUpQueryBuilder WithWallet(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("Wallet", alias, new GraphQlDirective[] { include, skip });
        }

        public AutoSignUpQueryBuilder ExceptWallet()
        {
            return ExceptField("Wallet");
        }

        public AutoSignUpQueryBuilder WithNote(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("Note", alias, new GraphQlDirective[] { include, skip });
        }

        public AutoSignUpQueryBuilder ExceptNote()
        {
            return ExceptField("Note");
        }

        public AutoSignUpQueryBuilder WithAmount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("Amount", alias, new GraphQlDirective[] { include, skip });
        }

        public AutoSignUpQueryBuilder ExceptAmount()
        {
            return ExceptField("Amount");
        }

        public AutoSignUpQueryBuilder WithCreatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdAt", alias, new GraphQlDirective[] { include, skip });
        }

        public AutoSignUpQueryBuilder ExceptCreatedAt()
        {
            return ExceptField("createdAt");
        }

        public AutoSignUpQueryBuilder WithUpdatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("updatedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public AutoSignUpQueryBuilder ExceptUpdatedAt()
        {
            return ExceptField("updatedAt");
        }

        public AutoSignUpQueryBuilder WithPublishedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("publishedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public AutoSignUpQueryBuilder ExceptPublishedAt()
        {
            return ExceptField("publishedAt");
        }
    }

    public partial class AutoSignUpEntityResponseCollectionQueryBuilder : GraphQlQueryBuilder<AutoSignUpEntityResponseCollectionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(AutoSignUpQueryBuilder) },
                new GraphQlFieldMetadata { Name = "pageInfo", IsComplex = true, QueryBuilderType = typeof(PaginationQueryBuilder) }
            };

        protected override string TypeName { get { return "AutoSignUpEntityResponseCollection"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public AutoSignUpEntityResponseCollectionQueryBuilder WithNodes(AutoSignUpQueryBuilder autoSignUpQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("nodes", alias, autoSignUpQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public AutoSignUpEntityResponseCollectionQueryBuilder ExceptNodes()
        {
            return ExceptField("nodes");
        }

        public AutoSignUpEntityResponseCollectionQueryBuilder WithPageInfo(PaginationQueryBuilder paginationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pageInfo", alias, paginationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public AutoSignUpEntityResponseCollectionQueryBuilder ExceptPageInfo()
        {
            return ExceptField("pageInfo");
        }
    }

    public partial class BoostQueryBuilder : GraphQlQueryBuilder<BoostQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "documentId" },
                new GraphQlFieldMetadata { Name = "Title" },
                new GraphQlFieldMetadata { Name = "smallText" },
                new GraphQlFieldMetadata { Name = "BOT_CTA_Text" },
                new GraphQlFieldMetadata { Name = "TopBgUrl" },
                new GraphQlFieldMetadata { Name = "iconText", IsComplex = true, QueryBuilderType = typeof(ComponentIconTextIconTextQueryBuilder) },
                new GraphQlFieldMetadata { Name = "MainCTA", IsComplex = true, QueryBuilderType = typeof(ComponentMainCtaMainCtaQueryBuilder) },
                new GraphQlFieldMetadata { Name = "sliders_connection", IsComplex = true, QueryBuilderType = typeof(UploadFileRelationResponseCollectionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "sliders", IsComplex = true, QueryBuilderType = typeof(UploadFileQueryBuilder) },
                new GraphQlFieldMetadata { Name = "TopBg_connection", IsComplex = true, QueryBuilderType = typeof(UploadFileRelationResponseCollectionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "TopBg", IsComplex = true, QueryBuilderType = typeof(UploadFileQueryBuilder) },
                new GraphQlFieldMetadata { Name = "createdAt" },
                new GraphQlFieldMetadata { Name = "updatedAt" },
                new GraphQlFieldMetadata { Name = "publishedAt" }
            };

        protected override string TypeName { get { return "Boost"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public BoostQueryBuilder WithDocumentId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("documentId", alias, new GraphQlDirective[] { include, skip });
        }

        public BoostQueryBuilder ExceptDocumentId()
        {
            return ExceptField("documentId");
        }

        public BoostQueryBuilder WithTitle(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("Title", alias, new GraphQlDirective[] { include, skip });
        }

        public BoostQueryBuilder ExceptTitle()
        {
            return ExceptField("Title");
        }

        public BoostQueryBuilder WithSmallText(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("smallText", alias, new GraphQlDirective[] { include, skip });
        }

        public BoostQueryBuilder ExceptSmallText()
        {
            return ExceptField("smallText");
        }

        public BoostQueryBuilder WithBotCtaText(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("BOT_CTA_Text", alias, new GraphQlDirective[] { include, skip });
        }

        public BoostQueryBuilder ExceptBotCtaText()
        {
            return ExceptField("BOT_CTA_Text");
        }

        public BoostQueryBuilder WithTopBgUrl(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("TopBgUrl", alias, new GraphQlDirective[] { include, skip });
        }

        public BoostQueryBuilder ExceptTopBgUrl()
        {
            return ExceptField("TopBgUrl");
        }

        public BoostQueryBuilder WithIconText(ComponentIconTextIconTextQueryBuilder componentIconTextIconTextQueryBuilder, QueryBuilderParameter<ComponentIconTextIconTextFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("iconText", alias, componentIconTextIconTextQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public BoostQueryBuilder ExceptIconText()
        {
            return ExceptField("iconText");
        }

        public BoostQueryBuilder WithMainCta(ComponentMainCtaMainCtaQueryBuilder componentMainCtaMainCtaQueryBuilder, QueryBuilderParameter<ComponentMainCtaMainCtaFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("MainCTA", alias, componentMainCtaMainCtaQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public BoostQueryBuilder ExceptMainCta()
        {
            return ExceptField("MainCTA");
        }

        public BoostQueryBuilder WithSlidersConnection(UploadFileRelationResponseCollectionQueryBuilder uploadFileRelationResponseCollectionQueryBuilder, QueryBuilderParameter<UploadFileFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("sliders_connection", alias, uploadFileRelationResponseCollectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public BoostQueryBuilder ExceptSlidersConnection()
        {
            return ExceptField("sliders_connection");
        }

        public BoostQueryBuilder WithSliders(UploadFileQueryBuilder uploadFileQueryBuilder, QueryBuilderParameter<UploadFileFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("sliders", alias, uploadFileQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public BoostQueryBuilder ExceptSliders()
        {
            return ExceptField("sliders");
        }

        public BoostQueryBuilder WithTopBgConnection(UploadFileRelationResponseCollectionQueryBuilder uploadFileRelationResponseCollectionQueryBuilder, QueryBuilderParameter<UploadFileFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("TopBg_connection", alias, uploadFileRelationResponseCollectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public BoostQueryBuilder ExceptTopBgConnection()
        {
            return ExceptField("TopBg_connection");
        }

        public BoostQueryBuilder WithTopBg(UploadFileQueryBuilder uploadFileQueryBuilder, QueryBuilderParameter<UploadFileFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("TopBg", alias, uploadFileQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public BoostQueryBuilder ExceptTopBg()
        {
            return ExceptField("TopBg");
        }

        public BoostQueryBuilder WithCreatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdAt", alias, new GraphQlDirective[] { include, skip });
        }

        public BoostQueryBuilder ExceptCreatedAt()
        {
            return ExceptField("createdAt");
        }

        public BoostQueryBuilder WithUpdatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("updatedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public BoostQueryBuilder ExceptUpdatedAt()
        {
            return ExceptField("updatedAt");
        }

        public BoostQueryBuilder WithPublishedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("publishedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public BoostQueryBuilder ExceptPublishedAt()
        {
            return ExceptField("publishedAt");
        }
    }

    public partial class BuyPoolzQueryBuilder : GraphQlQueryBuilder<BuyPoolzQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "documentId" },
                new GraphQlFieldMetadata { Name = "Name" },
                new GraphQlFieldMetadata { Name = "URL" },
                new GraphQlFieldMetadata { Name = "Icon", IsComplex = true, QueryBuilderType = typeof(UploadFileQueryBuilder) },
                new GraphQlFieldMetadata { Name = "IsDex" },
                new GraphQlFieldMetadata { Name = "Order" },
                new GraphQlFieldMetadata { Name = "createdAt" },
                new GraphQlFieldMetadata { Name = "updatedAt" },
                new GraphQlFieldMetadata { Name = "publishedAt" }
            };

        protected override string TypeName { get { return "BuyPoolz"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public BuyPoolzQueryBuilder WithDocumentId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("documentId", alias, new GraphQlDirective[] { include, skip });
        }

        public BuyPoolzQueryBuilder ExceptDocumentId()
        {
            return ExceptField("documentId");
        }

        public BuyPoolzQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("Name", alias, new GraphQlDirective[] { include, skip });
        }

        public BuyPoolzQueryBuilder ExceptName()
        {
            return ExceptField("Name");
        }

        public BuyPoolzQueryBuilder WithUrl(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("URL", alias, new GraphQlDirective[] { include, skip });
        }

        public BuyPoolzQueryBuilder ExceptUrl()
        {
            return ExceptField("URL");
        }

        public BuyPoolzQueryBuilder WithIcon(UploadFileQueryBuilder uploadFileQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("Icon", alias, uploadFileQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public BuyPoolzQueryBuilder ExceptIcon()
        {
            return ExceptField("Icon");
        }

        public BuyPoolzQueryBuilder WithIsDex(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("IsDex", alias, new GraphQlDirective[] { include, skip });
        }

        public BuyPoolzQueryBuilder ExceptIsDex()
        {
            return ExceptField("IsDex");
        }

        public BuyPoolzQueryBuilder WithOrder(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("Order", alias, new GraphQlDirective[] { include, skip });
        }

        public BuyPoolzQueryBuilder ExceptOrder()
        {
            return ExceptField("Order");
        }

        public BuyPoolzQueryBuilder WithCreatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdAt", alias, new GraphQlDirective[] { include, skip });
        }

        public BuyPoolzQueryBuilder ExceptCreatedAt()
        {
            return ExceptField("createdAt");
        }

        public BuyPoolzQueryBuilder WithUpdatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("updatedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public BuyPoolzQueryBuilder ExceptUpdatedAt()
        {
            return ExceptField("updatedAt");
        }

        public BuyPoolzQueryBuilder WithPublishedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("publishedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public BuyPoolzQueryBuilder ExceptPublishedAt()
        {
            return ExceptField("publishedAt");
        }
    }

    public partial class BuyPoolzEntityResponseCollectionQueryBuilder : GraphQlQueryBuilder<BuyPoolzEntityResponseCollectionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(BuyPoolzQueryBuilder) },
                new GraphQlFieldMetadata { Name = "pageInfo", IsComplex = true, QueryBuilderType = typeof(PaginationQueryBuilder) }
            };

        protected override string TypeName { get { return "BuyPoolzEntityResponseCollection"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public BuyPoolzEntityResponseCollectionQueryBuilder WithNodes(BuyPoolzQueryBuilder buyPoolzQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("nodes", alias, buyPoolzQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public BuyPoolzEntityResponseCollectionQueryBuilder ExceptNodes()
        {
            return ExceptField("nodes");
        }

        public BuyPoolzEntityResponseCollectionQueryBuilder WithPageInfo(PaginationQueryBuilder paginationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pageInfo", alias, paginationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public BuyPoolzEntityResponseCollectionQueryBuilder ExceptPageInfo()
        {
            return ExceptField("pageInfo");
        }
    }

    public partial class BuyWithQueryBuilder : GraphQlQueryBuilder<BuyWithQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "documentId" },
                new GraphQlFieldMetadata { Name = "Name" },
                new GraphQlFieldMetadata { Name = "ChainAddresses", IsComplex = true, QueryBuilderType = typeof(ComponentChainAddressesChainAddressesQueryBuilder) },
                new GraphQlFieldMetadata { Name = "SourcePoolId" },
                new GraphQlFieldMetadata { Name = "createdAt" },
                new GraphQlFieldMetadata { Name = "updatedAt" },
                new GraphQlFieldMetadata { Name = "publishedAt" }
            };

        protected override string TypeName { get { return "BuyWith"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public BuyWithQueryBuilder WithDocumentId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("documentId", alias, new GraphQlDirective[] { include, skip });
        }

        public BuyWithQueryBuilder ExceptDocumentId()
        {
            return ExceptField("documentId");
        }

        public BuyWithQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("Name", alias, new GraphQlDirective[] { include, skip });
        }

        public BuyWithQueryBuilder ExceptName()
        {
            return ExceptField("Name");
        }

        public BuyWithQueryBuilder WithChainAddresses(ComponentChainAddressesChainAddressesQueryBuilder componentChainAddressesChainAddressesQueryBuilder, QueryBuilderParameter<ComponentChainAddressesChainAddressesFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("ChainAddresses", alias, componentChainAddressesChainAddressesQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public BuyWithQueryBuilder ExceptChainAddresses()
        {
            return ExceptField("ChainAddresses");
        }

        public BuyWithQueryBuilder WithSourcePoolId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("SourcePoolId", alias, new GraphQlDirective[] { include, skip });
        }

        public BuyWithQueryBuilder ExceptSourcePoolId()
        {
            return ExceptField("SourcePoolId");
        }

        public BuyWithQueryBuilder WithCreatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdAt", alias, new GraphQlDirective[] { include, skip });
        }

        public BuyWithQueryBuilder ExceptCreatedAt()
        {
            return ExceptField("createdAt");
        }

        public BuyWithQueryBuilder WithUpdatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("updatedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public BuyWithQueryBuilder ExceptUpdatedAt()
        {
            return ExceptField("updatedAt");
        }

        public BuyWithQueryBuilder WithPublishedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("publishedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public BuyWithQueryBuilder ExceptPublishedAt()
        {
            return ExceptField("publishedAt");
        }
    }

    public partial class BuyWithEntityResponseCollectionQueryBuilder : GraphQlQueryBuilder<BuyWithEntityResponseCollectionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(BuyWithQueryBuilder) },
                new GraphQlFieldMetadata { Name = "pageInfo", IsComplex = true, QueryBuilderType = typeof(PaginationQueryBuilder) }
            };

        protected override string TypeName { get { return "BuyWithEntityResponseCollection"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public BuyWithEntityResponseCollectionQueryBuilder WithNodes(BuyWithQueryBuilder buyWithQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("nodes", alias, buyWithQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public BuyWithEntityResponseCollectionQueryBuilder ExceptNodes()
        {
            return ExceptField("nodes");
        }

        public BuyWithEntityResponseCollectionQueryBuilder WithPageInfo(PaginationQueryBuilder paginationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pageInfo", alias, paginationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public BuyWithEntityResponseCollectionQueryBuilder ExceptPageInfo()
        {
            return ExceptField("pageInfo");
        }
    }

    public partial class ChainQueryBuilder : GraphQlQueryBuilder<ChainQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "documentId" },
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "symbol" },
                new GraphQlFieldMetadata { Name = "isTest" },
                new GraphQlFieldMetadata { Name = "chainId" },
                new GraphQlFieldMetadata { Name = "chain_setting", IsComplex = true, QueryBuilderType = typeof(ChainSettingQueryBuilder) },
                new GraphQlFieldMetadata { Name = "contracts_on_chain", IsComplex = true, QueryBuilderType = typeof(ContractsOnChainQueryBuilder) },
                new GraphQlFieldMetadata { Name = "createdAt" },
                new GraphQlFieldMetadata { Name = "updatedAt" },
                new GraphQlFieldMetadata { Name = "publishedAt" }
            };

        protected override string TypeName { get { return "Chain"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ChainQueryBuilder WithDocumentId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("documentId", alias, new GraphQlDirective[] { include, skip });
        }

        public ChainQueryBuilder ExceptDocumentId()
        {
            return ExceptField("documentId");
        }

        public ChainQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public ChainQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public ChainQueryBuilder WithSymbol(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("symbol", alias, new GraphQlDirective[] { include, skip });
        }

        public ChainQueryBuilder ExceptSymbol()
        {
            return ExceptField("symbol");
        }

        public ChainQueryBuilder WithIsTest(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isTest", alias, new GraphQlDirective[] { include, skip });
        }

        public ChainQueryBuilder ExceptIsTest()
        {
            return ExceptField("isTest");
        }

        public ChainQueryBuilder WithChainId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("chainId", alias, new GraphQlDirective[] { include, skip });
        }

        public ChainQueryBuilder ExceptChainId()
        {
            return ExceptField("chainId");
        }

        public ChainQueryBuilder WithChainSetting(ChainSettingQueryBuilder chainSettingQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("chain_setting", alias, chainSettingQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ChainQueryBuilder ExceptChainSetting()
        {
            return ExceptField("chain_setting");
        }

        public ChainQueryBuilder WithContractsOnChain(ContractsOnChainQueryBuilder contractsOnChainQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("contracts_on_chain", alias, contractsOnChainQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ChainQueryBuilder ExceptContractsOnChain()
        {
            return ExceptField("contracts_on_chain");
        }

        public ChainQueryBuilder WithCreatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdAt", alias, new GraphQlDirective[] { include, skip });
        }

        public ChainQueryBuilder ExceptCreatedAt()
        {
            return ExceptField("createdAt");
        }

        public ChainQueryBuilder WithUpdatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("updatedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public ChainQueryBuilder ExceptUpdatedAt()
        {
            return ExceptField("updatedAt");
        }

        public ChainQueryBuilder WithPublishedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("publishedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public ChainQueryBuilder ExceptPublishedAt()
        {
            return ExceptField("publishedAt");
        }
    }

    public partial class ChainEntityResponseCollectionQueryBuilder : GraphQlQueryBuilder<ChainEntityResponseCollectionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(ChainQueryBuilder) },
                new GraphQlFieldMetadata { Name = "pageInfo", IsComplex = true, QueryBuilderType = typeof(PaginationQueryBuilder) }
            };

        protected override string TypeName { get { return "ChainEntityResponseCollection"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ChainEntityResponseCollectionQueryBuilder WithNodes(ChainQueryBuilder chainQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("nodes", alias, chainQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ChainEntityResponseCollectionQueryBuilder ExceptNodes()
        {
            return ExceptField("nodes");
        }

        public ChainEntityResponseCollectionQueryBuilder WithPageInfo(PaginationQueryBuilder paginationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pageInfo", alias, paginationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ChainEntityResponseCollectionQueryBuilder ExceptPageInfo()
        {
            return ExceptField("pageInfo");
        }
    }

    public partial class ChainSettingQueryBuilder : GraphQlQueryBuilder<ChainSettingQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "documentId" },
                new GraphQlFieldMetadata { Name = "IsEVM" },
                new GraphQlFieldMetadata { Name = "DisplayText" },
                new GraphQlFieldMetadata { Name = "WhiteLogo", IsComplex = true, QueryBuilderType = typeof(UploadFileQueryBuilder) },
                new GraphQlFieldMetadata { Name = "Show" },
                new GraphQlFieldMetadata { Name = "colorIcon", IsComplex = true, QueryBuilderType = typeof(ComponentColorIconColorIconQueryBuilder) },
                new GraphQlFieldMetadata { Name = "ShowInBoutique" },
                new GraphQlFieldMetadata { Name = "scannerTxUrl" },
                new GraphQlFieldMetadata { Name = "chain", IsComplex = true, QueryBuilderType = typeof(ChainQueryBuilder) },
                new GraphQlFieldMetadata { Name = "lock_token_whitelist", IsComplex = true, QueryBuilderType = typeof(LockTokenWhitelistQueryBuilder) },
                new GraphQlFieldMetadata { Name = "projects_informations_connection", IsComplex = true, QueryBuilderType = typeof(ProjectsInformationRelationResponseCollectionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "projects_informations", IsComplex = true, QueryBuilderType = typeof(ProjectsInformationQueryBuilder) },
                new GraphQlFieldMetadata { Name = "createdAt" },
                new GraphQlFieldMetadata { Name = "updatedAt" },
                new GraphQlFieldMetadata { Name = "publishedAt" }
            };

        protected override string TypeName { get { return "ChainSetting"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ChainSettingQueryBuilder WithDocumentId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("documentId", alias, new GraphQlDirective[] { include, skip });
        }

        public ChainSettingQueryBuilder ExceptDocumentId()
        {
            return ExceptField("documentId");
        }

        public ChainSettingQueryBuilder WithIsEvm(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("IsEVM", alias, new GraphQlDirective[] { include, skip });
        }

        public ChainSettingQueryBuilder ExceptIsEvm()
        {
            return ExceptField("IsEVM");
        }

        public ChainSettingQueryBuilder WithDisplayText(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("DisplayText", alias, new GraphQlDirective[] { include, skip });
        }

        public ChainSettingQueryBuilder ExceptDisplayText()
        {
            return ExceptField("DisplayText");
        }

        public ChainSettingQueryBuilder WithWhiteLogo(UploadFileQueryBuilder uploadFileQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("WhiteLogo", alias, uploadFileQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ChainSettingQueryBuilder ExceptWhiteLogo()
        {
            return ExceptField("WhiteLogo");
        }

        public ChainSettingQueryBuilder WithShow(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("Show", alias, new GraphQlDirective[] { include, skip });
        }

        public ChainSettingQueryBuilder ExceptShow()
        {
            return ExceptField("Show");
        }

        public ChainSettingQueryBuilder WithColorIcon(ComponentColorIconColorIconQueryBuilder componentColorIconColorIconQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("colorIcon", alias, componentColorIconColorIconQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ChainSettingQueryBuilder ExceptColorIcon()
        {
            return ExceptField("colorIcon");
        }

        public ChainSettingQueryBuilder WithShowInBoutique(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("ShowInBoutique", alias, new GraphQlDirective[] { include, skip });
        }

        public ChainSettingQueryBuilder ExceptShowInBoutique()
        {
            return ExceptField("ShowInBoutique");
        }

        public ChainSettingQueryBuilder WithScannerTxUrl(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("scannerTxUrl", alias, new GraphQlDirective[] { include, skip });
        }

        public ChainSettingQueryBuilder ExceptScannerTxUrl()
        {
            return ExceptField("scannerTxUrl");
        }

        public ChainSettingQueryBuilder WithChain(ChainQueryBuilder chainQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("chain", alias, chainQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ChainSettingQueryBuilder ExceptChain()
        {
            return ExceptField("chain");
        }

        public ChainSettingQueryBuilder WithLockTokenWhitelist(LockTokenWhitelistQueryBuilder lockTokenWhitelistQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("lock_token_whitelist", alias, lockTokenWhitelistQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ChainSettingQueryBuilder ExceptLockTokenWhitelist()
        {
            return ExceptField("lock_token_whitelist");
        }

        public ChainSettingQueryBuilder WithProjectsInformationsConnection(ProjectsInformationRelationResponseCollectionQueryBuilder projectsInformationRelationResponseCollectionQueryBuilder, QueryBuilderParameter<ProjectsInformationFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("projects_informations_connection", alias, projectsInformationRelationResponseCollectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ChainSettingQueryBuilder ExceptProjectsInformationsConnection()
        {
            return ExceptField("projects_informations_connection");
        }

        public ChainSettingQueryBuilder WithProjectsInformations(ProjectsInformationQueryBuilder projectsInformationQueryBuilder, QueryBuilderParameter<ProjectsInformationFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("projects_informations", alias, projectsInformationQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ChainSettingQueryBuilder ExceptProjectsInformations()
        {
            return ExceptField("projects_informations");
        }

        public ChainSettingQueryBuilder WithCreatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdAt", alias, new GraphQlDirective[] { include, skip });
        }

        public ChainSettingQueryBuilder ExceptCreatedAt()
        {
            return ExceptField("createdAt");
        }

        public ChainSettingQueryBuilder WithUpdatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("updatedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public ChainSettingQueryBuilder ExceptUpdatedAt()
        {
            return ExceptField("updatedAt");
        }

        public ChainSettingQueryBuilder WithPublishedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("publishedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public ChainSettingQueryBuilder ExceptPublishedAt()
        {
            return ExceptField("publishedAt");
        }
    }

    public partial class ChainSettingEntityResponseCollectionQueryBuilder : GraphQlQueryBuilder<ChainSettingEntityResponseCollectionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(ChainSettingQueryBuilder) },
                new GraphQlFieldMetadata { Name = "pageInfo", IsComplex = true, QueryBuilderType = typeof(PaginationQueryBuilder) }
            };

        protected override string TypeName { get { return "ChainSettingEntityResponseCollection"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ChainSettingEntityResponseCollectionQueryBuilder WithNodes(ChainSettingQueryBuilder chainSettingQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("nodes", alias, chainSettingQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ChainSettingEntityResponseCollectionQueryBuilder ExceptNodes()
        {
            return ExceptField("nodes");
        }

        public ChainSettingEntityResponseCollectionQueryBuilder WithPageInfo(PaginationQueryBuilder paginationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pageInfo", alias, paginationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ChainSettingEntityResponseCollectionQueryBuilder ExceptPageInfo()
        {
            return ExceptField("pageInfo");
        }
    }

    public partial class ChainSettingRelationResponseCollectionQueryBuilder : GraphQlQueryBuilder<ChainSettingRelationResponseCollectionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(ChainSettingQueryBuilder) }
            };

        protected override string TypeName { get { return "ChainSettingRelationResponseCollection"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ChainSettingRelationResponseCollectionQueryBuilder WithNodes(ChainSettingQueryBuilder chainSettingQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("nodes", alias, chainSettingQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ChainSettingRelationResponseCollectionQueryBuilder ExceptNodes()
        {
            return ExceptField("nodes");
        }
    }

    public partial class ConditionQueryBuilder : GraphQlQueryBuilder<ConditionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "documentId" },
                new GraphQlFieldMetadata { Name = "Value" },
                new GraphQlFieldMetadata { Name = "createdAt" },
                new GraphQlFieldMetadata { Name = "updatedAt" },
                new GraphQlFieldMetadata { Name = "publishedAt" }
            };

        protected override string TypeName { get { return "Condition"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ConditionQueryBuilder WithDocumentId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("documentId", alias, new GraphQlDirective[] { include, skip });
        }

        public ConditionQueryBuilder ExceptDocumentId()
        {
            return ExceptField("documentId");
        }

        public ConditionQueryBuilder WithValue(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("Value", alias, new GraphQlDirective[] { include, skip });
        }

        public ConditionQueryBuilder ExceptValue()
        {
            return ExceptField("Value");
        }

        public ConditionQueryBuilder WithCreatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdAt", alias, new GraphQlDirective[] { include, skip });
        }

        public ConditionQueryBuilder ExceptCreatedAt()
        {
            return ExceptField("createdAt");
        }

        public ConditionQueryBuilder WithUpdatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("updatedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public ConditionQueryBuilder ExceptUpdatedAt()
        {
            return ExceptField("updatedAt");
        }

        public ConditionQueryBuilder WithPublishedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("publishedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public ConditionQueryBuilder ExceptPublishedAt()
        {
            return ExceptField("publishedAt");
        }
    }

    public partial class ContractQueryBuilder : GraphQlQueryBuilder<ContractQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "documentId" },
                new GraphQlFieldMetadata { Name = "NameVersion" },
                new GraphQlFieldMetadata { Name = "ABI" },
                new GraphQlFieldMetadata { Name = "ByteCode" },
                new GraphQlFieldMetadata { Name = "ReleaseNotes" },
                new GraphQlFieldMetadata { Name = "GitLink" },
                new GraphQlFieldMetadata { Name = "CompilerSetting", IsComplex = true, QueryBuilderType = typeof(ComponentCompilerSettingCompilerSettingsQueryBuilder) },
                new GraphQlFieldMetadata { Name = "createdAt" },
                new GraphQlFieldMetadata { Name = "updatedAt" },
                new GraphQlFieldMetadata { Name = "publishedAt" }
            };

        protected override string TypeName { get { return "Contract"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ContractQueryBuilder WithDocumentId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("documentId", alias, new GraphQlDirective[] { include, skip });
        }

        public ContractQueryBuilder ExceptDocumentId()
        {
            return ExceptField("documentId");
        }

        public ContractQueryBuilder WithNameVersion(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("NameVersion", alias, new GraphQlDirective[] { include, skip });
        }

        public ContractQueryBuilder ExceptNameVersion()
        {
            return ExceptField("NameVersion");
        }

        public ContractQueryBuilder WithAbi(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("ABI", alias, new GraphQlDirective[] { include, skip });
        }

        public ContractQueryBuilder ExceptAbi()
        {
            return ExceptField("ABI");
        }

        public ContractQueryBuilder WithByteCode(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("ByteCode", alias, new GraphQlDirective[] { include, skip });
        }

        public ContractQueryBuilder ExceptByteCode()
        {
            return ExceptField("ByteCode");
        }

        public ContractQueryBuilder WithReleaseNotes(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("ReleaseNotes", alias, new GraphQlDirective[] { include, skip });
        }

        public ContractQueryBuilder ExceptReleaseNotes()
        {
            return ExceptField("ReleaseNotes");
        }

        public ContractQueryBuilder WithGitLink(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("GitLink", alias, new GraphQlDirective[] { include, skip });
        }

        public ContractQueryBuilder ExceptGitLink()
        {
            return ExceptField("GitLink");
        }

        public ContractQueryBuilder WithCompilerSetting(ComponentCompilerSettingCompilerSettingsQueryBuilder componentCompilerSettingCompilerSettingsQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("CompilerSetting", alias, componentCompilerSettingCompilerSettingsQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ContractQueryBuilder ExceptCompilerSetting()
        {
            return ExceptField("CompilerSetting");
        }

        public ContractQueryBuilder WithCreatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdAt", alias, new GraphQlDirective[] { include, skip });
        }

        public ContractQueryBuilder ExceptCreatedAt()
        {
            return ExceptField("createdAt");
        }

        public ContractQueryBuilder WithUpdatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("updatedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public ContractQueryBuilder ExceptUpdatedAt()
        {
            return ExceptField("updatedAt");
        }

        public ContractQueryBuilder WithPublishedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("publishedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public ContractQueryBuilder ExceptPublishedAt()
        {
            return ExceptField("publishedAt");
        }
    }

    public partial class ContractEntityResponseCollectionQueryBuilder : GraphQlQueryBuilder<ContractEntityResponseCollectionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(ContractQueryBuilder) },
                new GraphQlFieldMetadata { Name = "pageInfo", IsComplex = true, QueryBuilderType = typeof(PaginationQueryBuilder) }
            };

        protected override string TypeName { get { return "ContractEntityResponseCollection"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ContractEntityResponseCollectionQueryBuilder WithNodes(ContractQueryBuilder contractQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("nodes", alias, contractQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ContractEntityResponseCollectionQueryBuilder ExceptNodes()
        {
            return ExceptField("nodes");
        }

        public ContractEntityResponseCollectionQueryBuilder WithPageInfo(PaginationQueryBuilder paginationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pageInfo", alias, paginationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ContractEntityResponseCollectionQueryBuilder ExceptPageInfo()
        {
            return ExceptField("pageInfo");
        }
    }

    public partial class ContractTypeQueryBuilder : GraphQlQueryBuilder<ContractTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "documentId" },
                new GraphQlFieldMetadata { Name = "ContractType" },
                new GraphQlFieldMetadata { Name = "order" },
                new GraphQlFieldMetadata { Name = "isUpgradable" },
                new GraphQlFieldMetadata { Name = "createdAt" },
                new GraphQlFieldMetadata { Name = "updatedAt" },
                new GraphQlFieldMetadata { Name = "publishedAt" }
            };

        protected override string TypeName { get { return "ContractType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ContractTypeQueryBuilder WithDocumentId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("documentId", alias, new GraphQlDirective[] { include, skip });
        }

        public ContractTypeQueryBuilder ExceptDocumentId()
        {
            return ExceptField("documentId");
        }

        public ContractTypeQueryBuilder WithContractType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("ContractType", alias, new GraphQlDirective[] { include, skip });
        }

        public ContractTypeQueryBuilder ExceptContractType()
        {
            return ExceptField("ContractType");
        }

        public ContractTypeQueryBuilder WithOrder(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("order", alias, new GraphQlDirective[] { include, skip });
        }

        public ContractTypeQueryBuilder ExceptOrder()
        {
            return ExceptField("order");
        }

        public ContractTypeQueryBuilder WithIsUpgradable(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isUpgradable", alias, new GraphQlDirective[] { include, skip });
        }

        public ContractTypeQueryBuilder ExceptIsUpgradable()
        {
            return ExceptField("isUpgradable");
        }

        public ContractTypeQueryBuilder WithCreatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdAt", alias, new GraphQlDirective[] { include, skip });
        }

        public ContractTypeQueryBuilder ExceptCreatedAt()
        {
            return ExceptField("createdAt");
        }

        public ContractTypeQueryBuilder WithUpdatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("updatedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public ContractTypeQueryBuilder ExceptUpdatedAt()
        {
            return ExceptField("updatedAt");
        }

        public ContractTypeQueryBuilder WithPublishedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("publishedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public ContractTypeQueryBuilder ExceptPublishedAt()
        {
            return ExceptField("publishedAt");
        }
    }

    public partial class ContractTypeEntityResponseCollectionQueryBuilder : GraphQlQueryBuilder<ContractTypeEntityResponseCollectionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(ContractTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "pageInfo", IsComplex = true, QueryBuilderType = typeof(PaginationQueryBuilder) }
            };

        protected override string TypeName { get { return "ContractTypeEntityResponseCollection"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ContractTypeEntityResponseCollectionQueryBuilder WithNodes(ContractTypeQueryBuilder contractTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("nodes", alias, contractTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ContractTypeEntityResponseCollectionQueryBuilder ExceptNodes()
        {
            return ExceptField("nodes");
        }

        public ContractTypeEntityResponseCollectionQueryBuilder WithPageInfo(PaginationQueryBuilder paginationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pageInfo", alias, paginationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ContractTypeEntityResponseCollectionQueryBuilder ExceptPageInfo()
        {
            return ExceptField("pageInfo");
        }
    }

    public partial class ContractsOnChainQueryBuilder : GraphQlQueryBuilder<ContractsOnChainQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "documentId" },
                new GraphQlFieldMetadata { Name = "Chain", IsComplex = true, QueryBuilderType = typeof(ChainQueryBuilder) },
                new GraphQlFieldMetadata { Name = "Contracts", IsComplex = true, QueryBuilderType = typeof(ComponentContractOnChainContractOnChainQueryBuilder) },
                new GraphQlFieldMetadata { Name = "Decimals" },
                new GraphQlFieldMetadata { Name = "Explorer" },
                new GraphQlFieldMetadata { Name = "Faucet" },
                new GraphQlFieldMetadata { Name = "RPC" },
                new GraphQlFieldMetadata { Name = "NativeCurrency" },
                new GraphQlFieldMetadata { Name = "WebSocket" },
                new GraphQlFieldMetadata { Name = "TheGraphURL" },
                new GraphQlFieldMetadata { Name = "createdAt" },
                new GraphQlFieldMetadata { Name = "updatedAt" },
                new GraphQlFieldMetadata { Name = "publishedAt" }
            };

        protected override string TypeName { get { return "ContractsOnChain"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ContractsOnChainQueryBuilder WithDocumentId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("documentId", alias, new GraphQlDirective[] { include, skip });
        }

        public ContractsOnChainQueryBuilder ExceptDocumentId()
        {
            return ExceptField("documentId");
        }

        public ContractsOnChainQueryBuilder WithChain(ChainQueryBuilder chainQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("Chain", alias, chainQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ContractsOnChainQueryBuilder ExceptChain()
        {
            return ExceptField("Chain");
        }

        public ContractsOnChainQueryBuilder WithContracts(ComponentContractOnChainContractOnChainQueryBuilder componentContractOnChainContractOnChainQueryBuilder, QueryBuilderParameter<ComponentContractOnChainContractOnChainFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("Contracts", alias, componentContractOnChainContractOnChainQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ContractsOnChainQueryBuilder ExceptContracts()
        {
            return ExceptField("Contracts");
        }

        public ContractsOnChainQueryBuilder WithDecimals(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("Decimals", alias, new GraphQlDirective[] { include, skip });
        }

        public ContractsOnChainQueryBuilder ExceptDecimals()
        {
            return ExceptField("Decimals");
        }

        public ContractsOnChainQueryBuilder WithExplorer(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("Explorer", alias, new GraphQlDirective[] { include, skip });
        }

        public ContractsOnChainQueryBuilder ExceptExplorer()
        {
            return ExceptField("Explorer");
        }

        public ContractsOnChainQueryBuilder WithFaucet(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("Faucet", alias, new GraphQlDirective[] { include, skip });
        }

        public ContractsOnChainQueryBuilder ExceptFaucet()
        {
            return ExceptField("Faucet");
        }

        public ContractsOnChainQueryBuilder WithRpc(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("RPC", alias, new GraphQlDirective[] { include, skip });
        }

        public ContractsOnChainQueryBuilder ExceptRpc()
        {
            return ExceptField("RPC");
        }

        public ContractsOnChainQueryBuilder WithNativeCurrency(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("NativeCurrency", alias, new GraphQlDirective[] { include, skip });
        }

        public ContractsOnChainQueryBuilder ExceptNativeCurrency()
        {
            return ExceptField("NativeCurrency");
        }

        public ContractsOnChainQueryBuilder WithWebSocket(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("WebSocket", alias, new GraphQlDirective[] { include, skip });
        }

        public ContractsOnChainQueryBuilder ExceptWebSocket()
        {
            return ExceptField("WebSocket");
        }

        public ContractsOnChainQueryBuilder WithTheGraphUrl(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("TheGraphURL", alias, new GraphQlDirective[] { include, skip });
        }

        public ContractsOnChainQueryBuilder ExceptTheGraphUrl()
        {
            return ExceptField("TheGraphURL");
        }

        public ContractsOnChainQueryBuilder WithCreatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdAt", alias, new GraphQlDirective[] { include, skip });
        }

        public ContractsOnChainQueryBuilder ExceptCreatedAt()
        {
            return ExceptField("createdAt");
        }

        public ContractsOnChainQueryBuilder WithUpdatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("updatedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public ContractsOnChainQueryBuilder ExceptUpdatedAt()
        {
            return ExceptField("updatedAt");
        }

        public ContractsOnChainQueryBuilder WithPublishedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("publishedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public ContractsOnChainQueryBuilder ExceptPublishedAt()
        {
            return ExceptField("publishedAt");
        }
    }

    public partial class ContractsOnChainEntityResponseCollectionQueryBuilder : GraphQlQueryBuilder<ContractsOnChainEntityResponseCollectionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(ContractsOnChainQueryBuilder) },
                new GraphQlFieldMetadata { Name = "pageInfo", IsComplex = true, QueryBuilderType = typeof(PaginationQueryBuilder) }
            };

        protected override string TypeName { get { return "ContractsOnChainEntityResponseCollection"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ContractsOnChainEntityResponseCollectionQueryBuilder WithNodes(ContractsOnChainQueryBuilder contractsOnChainQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("nodes", alias, contractsOnChainQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ContractsOnChainEntityResponseCollectionQueryBuilder ExceptNodes()
        {
            return ExceptField("nodes");
        }

        public ContractsOnChainEntityResponseCollectionQueryBuilder WithPageInfo(PaginationQueryBuilder paginationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pageInfo", alias, paginationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ContractsOnChainEntityResponseCollectionQueryBuilder ExceptPageInfo()
        {
            return ExceptField("pageInfo");
        }
    }

    public partial class CoverQueryBuilder : GraphQlQueryBuilder<CoverQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "documentId" },
                new GraphQlFieldMetadata { Name = "picture", IsComplex = true, QueryBuilderType = typeof(UploadFileQueryBuilder) },
                new GraphQlFieldMetadata { Name = "createdAt" },
                new GraphQlFieldMetadata { Name = "updatedAt" },
                new GraphQlFieldMetadata { Name = "publishedAt" }
            };

        protected override string TypeName { get { return "Cover"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CoverQueryBuilder WithDocumentId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("documentId", alias, new GraphQlDirective[] { include, skip });
        }

        public CoverQueryBuilder ExceptDocumentId()
        {
            return ExceptField("documentId");
        }

        public CoverQueryBuilder WithPicture(UploadFileQueryBuilder uploadFileQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("picture", alias, uploadFileQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CoverQueryBuilder ExceptPicture()
        {
            return ExceptField("picture");
        }

        public CoverQueryBuilder WithCreatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdAt", alias, new GraphQlDirective[] { include, skip });
        }

        public CoverQueryBuilder ExceptCreatedAt()
        {
            return ExceptField("createdAt");
        }

        public CoverQueryBuilder WithUpdatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("updatedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public CoverQueryBuilder ExceptUpdatedAt()
        {
            return ExceptField("updatedAt");
        }

        public CoverQueryBuilder WithPublishedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("publishedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public CoverQueryBuilder ExceptPublishedAt()
        {
            return ExceptField("publishedAt");
        }
    }

    public partial class CoverEntityResponseCollectionQueryBuilder : GraphQlQueryBuilder<CoverEntityResponseCollectionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(CoverQueryBuilder) },
                new GraphQlFieldMetadata { Name = "pageInfo", IsComplex = true, QueryBuilderType = typeof(PaginationQueryBuilder) }
            };

        protected override string TypeName { get { return "CoverEntityResponseCollection"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public CoverEntityResponseCollectionQueryBuilder WithNodes(CoverQueryBuilder coverQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("nodes", alias, coverQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CoverEntityResponseCollectionQueryBuilder ExceptNodes()
        {
            return ExceptField("nodes");
        }

        public CoverEntityResponseCollectionQueryBuilder WithPageInfo(PaginationQueryBuilder paginationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pageInfo", alias, paginationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public CoverEntityResponseCollectionQueryBuilder ExceptPageInfo()
        {
            return ExceptField("pageInfo");
        }
    }

    public partial class DefaultWalletQueryBuilder : GraphQlQueryBuilder<DefaultWalletQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "documentId" },
                new GraphQlFieldMetadata { Name = "Name" },
                new GraphQlFieldMetadata { Name = "Link" },
                new GraphQlFieldMetadata { Name = "order" },
                new GraphQlFieldMetadata { Name = "Icon", IsComplex = true, QueryBuilderType = typeof(UploadFileQueryBuilder) },
                new GraphQlFieldMetadata { Name = "createdAt" },
                new GraphQlFieldMetadata { Name = "updatedAt" },
                new GraphQlFieldMetadata { Name = "publishedAt" }
            };

        protected override string TypeName { get { return "DefaultWallet"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public DefaultWalletQueryBuilder WithDocumentId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("documentId", alias, new GraphQlDirective[] { include, skip });
        }

        public DefaultWalletQueryBuilder ExceptDocumentId()
        {
            return ExceptField("documentId");
        }

        public DefaultWalletQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("Name", alias, new GraphQlDirective[] { include, skip });
        }

        public DefaultWalletQueryBuilder ExceptName()
        {
            return ExceptField("Name");
        }

        public DefaultWalletQueryBuilder WithLink(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("Link", alias, new GraphQlDirective[] { include, skip });
        }

        public DefaultWalletQueryBuilder ExceptLink()
        {
            return ExceptField("Link");
        }

        public DefaultWalletQueryBuilder WithOrder(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("order", alias, new GraphQlDirective[] { include, skip });
        }

        public DefaultWalletQueryBuilder ExceptOrder()
        {
            return ExceptField("order");
        }

        public DefaultWalletQueryBuilder WithIcon(UploadFileQueryBuilder uploadFileQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("Icon", alias, uploadFileQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public DefaultWalletQueryBuilder ExceptIcon()
        {
            return ExceptField("Icon");
        }

        public DefaultWalletQueryBuilder WithCreatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdAt", alias, new GraphQlDirective[] { include, skip });
        }

        public DefaultWalletQueryBuilder ExceptCreatedAt()
        {
            return ExceptField("createdAt");
        }

        public DefaultWalletQueryBuilder WithUpdatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("updatedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public DefaultWalletQueryBuilder ExceptUpdatedAt()
        {
            return ExceptField("updatedAt");
        }

        public DefaultWalletQueryBuilder WithPublishedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("publishedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public DefaultWalletQueryBuilder ExceptPublishedAt()
        {
            return ExceptField("publishedAt");
        }
    }

    public partial class DefaultWalletEntityResponseCollectionQueryBuilder : GraphQlQueryBuilder<DefaultWalletEntityResponseCollectionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(DefaultWalletQueryBuilder) },
                new GraphQlFieldMetadata { Name = "pageInfo", IsComplex = true, QueryBuilderType = typeof(PaginationQueryBuilder) }
            };

        protected override string TypeName { get { return "DefaultWalletEntityResponseCollection"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public DefaultWalletEntityResponseCollectionQueryBuilder WithNodes(DefaultWalletQueryBuilder defaultWalletQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("nodes", alias, defaultWalletQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public DefaultWalletEntityResponseCollectionQueryBuilder ExceptNodes()
        {
            return ExceptField("nodes");
        }

        public DefaultWalletEntityResponseCollectionQueryBuilder WithPageInfo(PaginationQueryBuilder paginationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pageInfo", alias, paginationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public DefaultWalletEntityResponseCollectionQueryBuilder ExceptPageInfo()
        {
            return ExceptField("pageInfo");
        }
    }

    public partial class EvmVersionQueryBuilder : GraphQlQueryBuilder<EvmVersionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "documentId" },
                new GraphQlFieldMetadata { Name = "EVMVersion" },
                new GraphQlFieldMetadata { Name = "createdAt" },
                new GraphQlFieldMetadata { Name = "updatedAt" },
                new GraphQlFieldMetadata { Name = "publishedAt" }
            };

        protected override string TypeName { get { return "EvmVersion"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public EvmVersionQueryBuilder WithDocumentId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("documentId", alias, new GraphQlDirective[] { include, skip });
        }

        public EvmVersionQueryBuilder ExceptDocumentId()
        {
            return ExceptField("documentId");
        }

        public EvmVersionQueryBuilder WithEvmVersion(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("EVMVersion", alias, new GraphQlDirective[] { include, skip });
        }

        public EvmVersionQueryBuilder ExceptEvmVersion()
        {
            return ExceptField("EVMVersion");
        }

        public EvmVersionQueryBuilder WithCreatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdAt", alias, new GraphQlDirective[] { include, skip });
        }

        public EvmVersionQueryBuilder ExceptCreatedAt()
        {
            return ExceptField("createdAt");
        }

        public EvmVersionQueryBuilder WithUpdatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("updatedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public EvmVersionQueryBuilder ExceptUpdatedAt()
        {
            return ExceptField("updatedAt");
        }

        public EvmVersionQueryBuilder WithPublishedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("publishedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public EvmVersionQueryBuilder ExceptPublishedAt()
        {
            return ExceptField("publishedAt");
        }
    }

    public partial class EvmVersionEntityResponseCollectionQueryBuilder : GraphQlQueryBuilder<EvmVersionEntityResponseCollectionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(EvmVersionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "pageInfo", IsComplex = true, QueryBuilderType = typeof(PaginationQueryBuilder) }
            };

        protected override string TypeName { get { return "EvmVersionEntityResponseCollection"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public EvmVersionEntityResponseCollectionQueryBuilder WithNodes(EvmVersionQueryBuilder evmVersionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("nodes", alias, evmVersionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public EvmVersionEntityResponseCollectionQueryBuilder ExceptNodes()
        {
            return ExceptField("nodes");
        }

        public EvmVersionEntityResponseCollectionQueryBuilder WithPageInfo(PaginationQueryBuilder paginationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pageInfo", alias, paginationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public EvmVersionEntityResponseCollectionQueryBuilder ExceptPageInfo()
        {
            return ExceptField("pageInfo");
        }
    }

    public partial class FooterQueryBuilder : GraphQlQueryBuilder<FooterQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "documentId" },
                new GraphQlFieldMetadata { Name = "Company", IsComplex = true, QueryBuilderType = typeof(ComponentSimpleUrlSimpleUrlQueryBuilder) },
                new GraphQlFieldMetadata { Name = "Help", IsComplex = true, QueryBuilderType = typeof(ComponentSimpleUrlSimpleUrlQueryBuilder) },
                new GraphQlFieldMetadata { Name = "Information", IsComplex = true, QueryBuilderType = typeof(ComponentSimpleUrlSimpleUrlQueryBuilder) },
                new GraphQlFieldMetadata { Name = "Social", IsComplex = true, QueryBuilderType = typeof(ComponentSimpleUrlSimpleUrlQueryBuilder) },
                new GraphQlFieldMetadata { Name = "Boost_Social", IsComplex = true, QueryBuilderType = typeof(ComponentSimpleUrlSimpleUrlQueryBuilder) },
                new GraphQlFieldMetadata { Name = "createdAt" },
                new GraphQlFieldMetadata { Name = "updatedAt" },
                new GraphQlFieldMetadata { Name = "publishedAt" }
            };

        protected override string TypeName { get { return "Footer"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public FooterQueryBuilder WithDocumentId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("documentId", alias, new GraphQlDirective[] { include, skip });
        }

        public FooterQueryBuilder ExceptDocumentId()
        {
            return ExceptField("documentId");
        }

        public FooterQueryBuilder WithCompany(ComponentSimpleUrlSimpleUrlQueryBuilder componentSimpleUrlSimpleUrlQueryBuilder, QueryBuilderParameter<ComponentSimpleUrlSimpleUrlFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("Company", alias, componentSimpleUrlSimpleUrlQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public FooterQueryBuilder ExceptCompany()
        {
            return ExceptField("Company");
        }

        public FooterQueryBuilder WithHelp(ComponentSimpleUrlSimpleUrlQueryBuilder componentSimpleUrlSimpleUrlQueryBuilder, QueryBuilderParameter<ComponentSimpleUrlSimpleUrlFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("Help", alias, componentSimpleUrlSimpleUrlQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public FooterQueryBuilder ExceptHelp()
        {
            return ExceptField("Help");
        }

        public FooterQueryBuilder WithInformation(ComponentSimpleUrlSimpleUrlQueryBuilder componentSimpleUrlSimpleUrlQueryBuilder, QueryBuilderParameter<ComponentSimpleUrlSimpleUrlFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("Information", alias, componentSimpleUrlSimpleUrlQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public FooterQueryBuilder ExceptInformation()
        {
            return ExceptField("Information");
        }

        public FooterQueryBuilder WithSocial(ComponentSimpleUrlSimpleUrlQueryBuilder componentSimpleUrlSimpleUrlQueryBuilder, QueryBuilderParameter<ComponentSimpleUrlSimpleUrlFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("Social", alias, componentSimpleUrlSimpleUrlQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public FooterQueryBuilder ExceptSocial()
        {
            return ExceptField("Social");
        }

        public FooterQueryBuilder WithBoostSocial(ComponentSimpleUrlSimpleUrlQueryBuilder componentSimpleUrlSimpleUrlQueryBuilder, QueryBuilderParameter<ComponentSimpleUrlSimpleUrlFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("Boost_Social", alias, componentSimpleUrlSimpleUrlQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public FooterQueryBuilder ExceptBoostSocial()
        {
            return ExceptField("Boost_Social");
        }

        public FooterQueryBuilder WithCreatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdAt", alias, new GraphQlDirective[] { include, skip });
        }

        public FooterQueryBuilder ExceptCreatedAt()
        {
            return ExceptField("createdAt");
        }

        public FooterQueryBuilder WithUpdatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("updatedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public FooterQueryBuilder ExceptUpdatedAt()
        {
            return ExceptField("updatedAt");
        }

        public FooterQueryBuilder WithPublishedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("publishedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public FooterQueryBuilder ExceptPublishedAt()
        {
            return ExceptField("publishedAt");
        }
    }

    public partial class GrowQueryBuilder : GraphQlQueryBuilder<GrowQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "documentId" },
                new GraphQlFieldMetadata { Name = "reward" },
                new GraphQlFieldMetadata { Name = "text" },
                new GraphQlFieldMetadata { Name = "mainIcon", IsComplex = true, QueryBuilderType = typeof(UploadFileQueryBuilder) },
                new GraphQlFieldMetadata { Name = "projectName" },
                new GraphQlFieldMetadata { Name = "participants" },
                new GraphQlFieldMetadata { Name = "mainPicture", IsComplex = true, QueryBuilderType = typeof(UploadFileQueryBuilder) },
                new GraphQlFieldMetadata { Name = "startTime" },
                new GraphQlFieldMetadata { Name = "subTitle" },
                new GraphQlFieldMetadata { Name = "data_ccode" },
                new GraphQlFieldMetadata { Name = "DescriptionMainText" },
                new GraphQlFieldMetadata { Name = "DescriptionSubText" },
                new GraphQlFieldMetadata { Name = "finishTime" },
                new GraphQlFieldMetadata { Name = "Banner", IsComplex = true, QueryBuilderType = typeof(UploadFileQueryBuilder) },
                new GraphQlFieldMetadata { Name = "BannerUrl" },
                new GraphQlFieldMetadata { Name = "BannerText" },
                new GraphQlFieldMetadata { Name = "order" },
                new GraphQlFieldMetadata { Name = "showInMainBanner" },
                new GraphQlFieldMetadata { Name = "Show" },
                new GraphQlFieldMetadata { Name = "grow_badge", IsComplex = true, QueryBuilderType = typeof(GrowBadgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "createdAt" },
                new GraphQlFieldMetadata { Name = "updatedAt" },
                new GraphQlFieldMetadata { Name = "publishedAt" }
            };

        protected override string TypeName { get { return "Grow"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public GrowQueryBuilder WithDocumentId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("documentId", alias, new GraphQlDirective[] { include, skip });
        }

        public GrowQueryBuilder ExceptDocumentId()
        {
            return ExceptField("documentId");
        }

        public GrowQueryBuilder WithReward(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("reward", alias, new GraphQlDirective[] { include, skip });
        }

        public GrowQueryBuilder ExceptReward()
        {
            return ExceptField("reward");
        }

        public GrowQueryBuilder WithText(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("text", alias, new GraphQlDirective[] { include, skip });
        }

        public GrowQueryBuilder ExceptText()
        {
            return ExceptField("text");
        }

        public GrowQueryBuilder WithMainIcon(UploadFileQueryBuilder uploadFileQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("mainIcon", alias, uploadFileQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GrowQueryBuilder ExceptMainIcon()
        {
            return ExceptField("mainIcon");
        }

        public GrowQueryBuilder WithProjectName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("projectName", alias, new GraphQlDirective[] { include, skip });
        }

        public GrowQueryBuilder ExceptProjectName()
        {
            return ExceptField("projectName");
        }

        public GrowQueryBuilder WithParticipants(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("participants", alias, new GraphQlDirective[] { include, skip });
        }

        public GrowQueryBuilder ExceptParticipants()
        {
            return ExceptField("participants");
        }

        public GrowQueryBuilder WithMainPicture(UploadFileQueryBuilder uploadFileQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("mainPicture", alias, uploadFileQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GrowQueryBuilder ExceptMainPicture()
        {
            return ExceptField("mainPicture");
        }

        public GrowQueryBuilder WithStartTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("startTime", alias, new GraphQlDirective[] { include, skip });
        }

        public GrowQueryBuilder ExceptStartTime()
        {
            return ExceptField("startTime");
        }

        public GrowQueryBuilder WithSubTitle(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("subTitle", alias, new GraphQlDirective[] { include, skip });
        }

        public GrowQueryBuilder ExceptSubTitle()
        {
            return ExceptField("subTitle");
        }

        public GrowQueryBuilder WithDataCcode(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("data_ccode", alias, new GraphQlDirective[] { include, skip });
        }

        public GrowQueryBuilder ExceptDataCcode()
        {
            return ExceptField("data_ccode");
        }

        public GrowQueryBuilder WithDescriptionMainText(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("DescriptionMainText", alias, new GraphQlDirective[] { include, skip });
        }

        public GrowQueryBuilder ExceptDescriptionMainText()
        {
            return ExceptField("DescriptionMainText");
        }

        public GrowQueryBuilder WithDescriptionSubText(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("DescriptionSubText", alias, new GraphQlDirective[] { include, skip });
        }

        public GrowQueryBuilder ExceptDescriptionSubText()
        {
            return ExceptField("DescriptionSubText");
        }

        public GrowQueryBuilder WithFinishTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("finishTime", alias, new GraphQlDirective[] { include, skip });
        }

        public GrowQueryBuilder ExceptFinishTime()
        {
            return ExceptField("finishTime");
        }

        public GrowQueryBuilder WithBanner(UploadFileQueryBuilder uploadFileQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("Banner", alias, uploadFileQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GrowQueryBuilder ExceptBanner()
        {
            return ExceptField("Banner");
        }

        public GrowQueryBuilder WithBannerUrl(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("BannerUrl", alias, new GraphQlDirective[] { include, skip });
        }

        public GrowQueryBuilder ExceptBannerUrl()
        {
            return ExceptField("BannerUrl");
        }

        public GrowQueryBuilder WithBannerText(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("BannerText", alias, new GraphQlDirective[] { include, skip });
        }

        public GrowQueryBuilder ExceptBannerText()
        {
            return ExceptField("BannerText");
        }

        public GrowQueryBuilder WithOrder(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("order", alias, new GraphQlDirective[] { include, skip });
        }

        public GrowQueryBuilder ExceptOrder()
        {
            return ExceptField("order");
        }

        public GrowQueryBuilder WithShowInMainBanner(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("showInMainBanner", alias, new GraphQlDirective[] { include, skip });
        }

        public GrowQueryBuilder ExceptShowInMainBanner()
        {
            return ExceptField("showInMainBanner");
        }

        public GrowQueryBuilder WithShow(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("Show", alias, new GraphQlDirective[] { include, skip });
        }

        public GrowQueryBuilder ExceptShow()
        {
            return ExceptField("Show");
        }

        public GrowQueryBuilder WithGrowBadge(GrowBadgeQueryBuilder growBadgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("grow_badge", alias, growBadgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GrowQueryBuilder ExceptGrowBadge()
        {
            return ExceptField("grow_badge");
        }

        public GrowQueryBuilder WithCreatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdAt", alias, new GraphQlDirective[] { include, skip });
        }

        public GrowQueryBuilder ExceptCreatedAt()
        {
            return ExceptField("createdAt");
        }

        public GrowQueryBuilder WithUpdatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("updatedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public GrowQueryBuilder ExceptUpdatedAt()
        {
            return ExceptField("updatedAt");
        }

        public GrowQueryBuilder WithPublishedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("publishedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public GrowQueryBuilder ExceptPublishedAt()
        {
            return ExceptField("publishedAt");
        }
    }

    public partial class GrowEntityResponseCollectionQueryBuilder : GraphQlQueryBuilder<GrowEntityResponseCollectionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(GrowQueryBuilder) },
                new GraphQlFieldMetadata { Name = "pageInfo", IsComplex = true, QueryBuilderType = typeof(PaginationQueryBuilder) }
            };

        protected override string TypeName { get { return "GrowEntityResponseCollection"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public GrowEntityResponseCollectionQueryBuilder WithNodes(GrowQueryBuilder growQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("nodes", alias, growQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GrowEntityResponseCollectionQueryBuilder ExceptNodes()
        {
            return ExceptField("nodes");
        }

        public GrowEntityResponseCollectionQueryBuilder WithPageInfo(PaginationQueryBuilder paginationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pageInfo", alias, paginationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GrowEntityResponseCollectionQueryBuilder ExceptPageInfo()
        {
            return ExceptField("pageInfo");
        }
    }

    public partial class GrowBadgeQueryBuilder : GraphQlQueryBuilder<GrowBadgeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "documentId" },
                new GraphQlFieldMetadata { Name = "Name" },
                new GraphQlFieldMetadata { Name = "BackgroundColor" },
                new GraphQlFieldMetadata { Name = "TooltipText" },
                new GraphQlFieldMetadata { Name = "Color" },
                new GraphQlFieldMetadata { Name = "createdAt" },
                new GraphQlFieldMetadata { Name = "updatedAt" },
                new GraphQlFieldMetadata { Name = "publishedAt" }
            };

        protected override string TypeName { get { return "GrowBadge"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public GrowBadgeQueryBuilder WithDocumentId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("documentId", alias, new GraphQlDirective[] { include, skip });
        }

        public GrowBadgeQueryBuilder ExceptDocumentId()
        {
            return ExceptField("documentId");
        }

        public GrowBadgeQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("Name", alias, new GraphQlDirective[] { include, skip });
        }

        public GrowBadgeQueryBuilder ExceptName()
        {
            return ExceptField("Name");
        }

        public GrowBadgeQueryBuilder WithBackgroundColor(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("BackgroundColor", alias, new GraphQlDirective[] { include, skip });
        }

        public GrowBadgeQueryBuilder ExceptBackgroundColor()
        {
            return ExceptField("BackgroundColor");
        }

        public GrowBadgeQueryBuilder WithTooltipText(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("TooltipText", alias, new GraphQlDirective[] { include, skip });
        }

        public GrowBadgeQueryBuilder ExceptTooltipText()
        {
            return ExceptField("TooltipText");
        }

        public GrowBadgeQueryBuilder WithColor(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("Color", alias, new GraphQlDirective[] { include, skip });
        }

        public GrowBadgeQueryBuilder ExceptColor()
        {
            return ExceptField("Color");
        }

        public GrowBadgeQueryBuilder WithCreatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdAt", alias, new GraphQlDirective[] { include, skip });
        }

        public GrowBadgeQueryBuilder ExceptCreatedAt()
        {
            return ExceptField("createdAt");
        }

        public GrowBadgeQueryBuilder WithUpdatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("updatedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public GrowBadgeQueryBuilder ExceptUpdatedAt()
        {
            return ExceptField("updatedAt");
        }

        public GrowBadgeQueryBuilder WithPublishedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("publishedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public GrowBadgeQueryBuilder ExceptPublishedAt()
        {
            return ExceptField("publishedAt");
        }
    }

    public partial class GrowBadgeEntityResponseCollectionQueryBuilder : GraphQlQueryBuilder<GrowBadgeEntityResponseCollectionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(GrowBadgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "pageInfo", IsComplex = true, QueryBuilderType = typeof(PaginationQueryBuilder) }
            };

        protected override string TypeName { get { return "GrowBadgeEntityResponseCollection"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public GrowBadgeEntityResponseCollectionQueryBuilder WithNodes(GrowBadgeQueryBuilder growBadgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("nodes", alias, growBadgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GrowBadgeEntityResponseCollectionQueryBuilder ExceptNodes()
        {
            return ExceptField("nodes");
        }

        public GrowBadgeEntityResponseCollectionQueryBuilder WithPageInfo(PaginationQueryBuilder paginationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pageInfo", alias, paginationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GrowBadgeEntityResponseCollectionQueryBuilder ExceptPageInfo()
        {
            return ExceptField("pageInfo");
        }
    }

    public partial class HeaderQueryBuilder : GraphQlQueryBuilder<HeaderQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "documentId" },
                new GraphQlFieldMetadata { Name = "HeaderList", IsComplex = true, QueryBuilderType = typeof(ComponentHeaderSimpleUrlHeaderSimpleUrlQueryBuilder) },
                new GraphQlFieldMetadata { Name = "createdAt" },
                new GraphQlFieldMetadata { Name = "updatedAt" },
                new GraphQlFieldMetadata { Name = "publishedAt" }
            };

        protected override string TypeName { get { return "Header"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public HeaderQueryBuilder WithDocumentId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("documentId", alias, new GraphQlDirective[] { include, skip });
        }

        public HeaderQueryBuilder ExceptDocumentId()
        {
            return ExceptField("documentId");
        }

        public HeaderQueryBuilder WithHeaderList(ComponentHeaderSimpleUrlHeaderSimpleUrlQueryBuilder componentHeaderSimpleUrlHeaderSimpleUrlQueryBuilder, QueryBuilderParameter<ComponentHeaderSimpleUrlHeaderSimpleUrlFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("HeaderList", alias, componentHeaderSimpleUrlHeaderSimpleUrlQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public HeaderQueryBuilder ExceptHeaderList()
        {
            return ExceptField("HeaderList");
        }

        public HeaderQueryBuilder WithCreatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdAt", alias, new GraphQlDirective[] { include, skip });
        }

        public HeaderQueryBuilder ExceptCreatedAt()
        {
            return ExceptField("createdAt");
        }

        public HeaderQueryBuilder WithUpdatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("updatedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public HeaderQueryBuilder ExceptUpdatedAt()
        {
            return ExceptField("updatedAt");
        }

        public HeaderQueryBuilder WithPublishedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("publishedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public HeaderQueryBuilder ExceptPublishedAt()
        {
            return ExceptField("publishedAt");
        }
    }

    public partial class IdoBadgeQueryBuilder : GraphQlQueryBuilder<IdoBadgeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "documentId" },
                new GraphQlFieldMetadata { Name = "Name" },
                new GraphQlFieldMetadata { Name = "ExplainText" },
                new GraphQlFieldMetadata { Name = "ColorCode" },
                new GraphQlFieldMetadata { Name = "createdAt" },
                new GraphQlFieldMetadata { Name = "updatedAt" },
                new GraphQlFieldMetadata { Name = "publishedAt" }
            };

        protected override string TypeName { get { return "IdoBadge"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public IdoBadgeQueryBuilder WithDocumentId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("documentId", alias, new GraphQlDirective[] { include, skip });
        }

        public IdoBadgeQueryBuilder ExceptDocumentId()
        {
            return ExceptField("documentId");
        }

        public IdoBadgeQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("Name", alias, new GraphQlDirective[] { include, skip });
        }

        public IdoBadgeQueryBuilder ExceptName()
        {
            return ExceptField("Name");
        }

        public IdoBadgeQueryBuilder WithExplainText(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("ExplainText", alias, new GraphQlDirective[] { include, skip });
        }

        public IdoBadgeQueryBuilder ExceptExplainText()
        {
            return ExceptField("ExplainText");
        }

        public IdoBadgeQueryBuilder WithColorCode(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("ColorCode", alias, new GraphQlDirective[] { include, skip });
        }

        public IdoBadgeQueryBuilder ExceptColorCode()
        {
            return ExceptField("ColorCode");
        }

        public IdoBadgeQueryBuilder WithCreatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdAt", alias, new GraphQlDirective[] { include, skip });
        }

        public IdoBadgeQueryBuilder ExceptCreatedAt()
        {
            return ExceptField("createdAt");
        }

        public IdoBadgeQueryBuilder WithUpdatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("updatedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public IdoBadgeQueryBuilder ExceptUpdatedAt()
        {
            return ExceptField("updatedAt");
        }

        public IdoBadgeQueryBuilder WithPublishedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("publishedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public IdoBadgeQueryBuilder ExceptPublishedAt()
        {
            return ExceptField("publishedAt");
        }
    }

    public partial class IdoBadgeEntityResponseCollectionQueryBuilder : GraphQlQueryBuilder<IdoBadgeEntityResponseCollectionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(IdoBadgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "pageInfo", IsComplex = true, QueryBuilderType = typeof(PaginationQueryBuilder) }
            };

        protected override string TypeName { get { return "IdoBadgeEntityResponseCollection"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public IdoBadgeEntityResponseCollectionQueryBuilder WithNodes(IdoBadgeQueryBuilder idoBadgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("nodes", alias, idoBadgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public IdoBadgeEntityResponseCollectionQueryBuilder ExceptNodes()
        {
            return ExceptField("nodes");
        }

        public IdoBadgeEntityResponseCollectionQueryBuilder WithPageInfo(PaginationQueryBuilder paginationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pageInfo", alias, paginationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public IdoBadgeEntityResponseCollectionQueryBuilder ExceptPageInfo()
        {
            return ExceptField("pageInfo");
        }
    }

    public partial class IgnoreLeaderBoardWalletQueryBuilder : GraphQlQueryBuilder<IgnoreLeaderBoardWalletQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "documentId" },
                new GraphQlFieldMetadata { Name = "Wallet" },
                new GraphQlFieldMetadata { Name = "Reason" },
                new GraphQlFieldMetadata { Name = "createdAt" },
                new GraphQlFieldMetadata { Name = "updatedAt" },
                new GraphQlFieldMetadata { Name = "publishedAt" }
            };

        protected override string TypeName { get { return "IgnoreLeaderBoardWallet"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public IgnoreLeaderBoardWalletQueryBuilder WithDocumentId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("documentId", alias, new GraphQlDirective[] { include, skip });
        }

        public IgnoreLeaderBoardWalletQueryBuilder ExceptDocumentId()
        {
            return ExceptField("documentId");
        }

        public IgnoreLeaderBoardWalletQueryBuilder WithWallet(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("Wallet", alias, new GraphQlDirective[] { include, skip });
        }

        public IgnoreLeaderBoardWalletQueryBuilder ExceptWallet()
        {
            return ExceptField("Wallet");
        }

        public IgnoreLeaderBoardWalletQueryBuilder WithReason(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("Reason", alias, new GraphQlDirective[] { include, skip });
        }

        public IgnoreLeaderBoardWalletQueryBuilder ExceptReason()
        {
            return ExceptField("Reason");
        }

        public IgnoreLeaderBoardWalletQueryBuilder WithCreatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdAt", alias, new GraphQlDirective[] { include, skip });
        }

        public IgnoreLeaderBoardWalletQueryBuilder ExceptCreatedAt()
        {
            return ExceptField("createdAt");
        }

        public IgnoreLeaderBoardWalletQueryBuilder WithUpdatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("updatedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public IgnoreLeaderBoardWalletQueryBuilder ExceptUpdatedAt()
        {
            return ExceptField("updatedAt");
        }

        public IgnoreLeaderBoardWalletQueryBuilder WithPublishedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("publishedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public IgnoreLeaderBoardWalletQueryBuilder ExceptPublishedAt()
        {
            return ExceptField("publishedAt");
        }
    }

    public partial class IgnoreLeaderBoardWalletEntityResponseCollectionQueryBuilder : GraphQlQueryBuilder<IgnoreLeaderBoardWalletEntityResponseCollectionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(IgnoreLeaderBoardWalletQueryBuilder) },
                new GraphQlFieldMetadata { Name = "pageInfo", IsComplex = true, QueryBuilderType = typeof(PaginationQueryBuilder) }
            };

        protected override string TypeName { get { return "IgnoreLeaderBoardWalletEntityResponseCollection"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public IgnoreLeaderBoardWalletEntityResponseCollectionQueryBuilder WithNodes(IgnoreLeaderBoardWalletQueryBuilder ignoreLeaderBoardWalletQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("nodes", alias, ignoreLeaderBoardWalletQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public IgnoreLeaderBoardWalletEntityResponseCollectionQueryBuilder ExceptNodes()
        {
            return ExceptField("nodes");
        }

        public IgnoreLeaderBoardWalletEntityResponseCollectionQueryBuilder WithPageInfo(PaginationQueryBuilder paginationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pageInfo", alias, paginationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public IgnoreLeaderBoardWalletEntityResponseCollectionQueryBuilder ExceptPageInfo()
        {
            return ExceptField("pageInfo");
        }
    }

    public partial class InvestTermQueryBuilder : GraphQlQueryBuilder<InvestTermQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "documentId" },
                new GraphQlFieldMetadata { Name = "Value" },
                new GraphQlFieldMetadata { Name = "createdAt" },
                new GraphQlFieldMetadata { Name = "updatedAt" },
                new GraphQlFieldMetadata { Name = "publishedAt" }
            };

        protected override string TypeName { get { return "InvestTerm"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public InvestTermQueryBuilder WithDocumentId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("documentId", alias, new GraphQlDirective[] { include, skip });
        }

        public InvestTermQueryBuilder ExceptDocumentId()
        {
            return ExceptField("documentId");
        }

        public InvestTermQueryBuilder WithValue(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("Value", alias, new GraphQlDirective[] { include, skip });
        }

        public InvestTermQueryBuilder ExceptValue()
        {
            return ExceptField("Value");
        }

        public InvestTermQueryBuilder WithCreatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdAt", alias, new GraphQlDirective[] { include, skip });
        }

        public InvestTermQueryBuilder ExceptCreatedAt()
        {
            return ExceptField("createdAt");
        }

        public InvestTermQueryBuilder WithUpdatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("updatedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public InvestTermQueryBuilder ExceptUpdatedAt()
        {
            return ExceptField("updatedAt");
        }

        public InvestTermQueryBuilder WithPublishedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("publishedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public InvestTermQueryBuilder ExceptPublishedAt()
        {
            return ExceptField("publishedAt");
        }
    }

    public partial class InvestorQueryBuilder : GraphQlQueryBuilder<InvestorQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "documentId" },
                new GraphQlFieldMetadata { Name = "Name" },
                new GraphQlFieldMetadata { Name = "Icon", IsComplex = true, QueryBuilderType = typeof(UploadFileQueryBuilder) },
                new GraphQlFieldMetadata { Name = "createdAt" },
                new GraphQlFieldMetadata { Name = "updatedAt" },
                new GraphQlFieldMetadata { Name = "publishedAt" }
            };

        protected override string TypeName { get { return "Investor"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public InvestorQueryBuilder WithDocumentId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("documentId", alias, new GraphQlDirective[] { include, skip });
        }

        public InvestorQueryBuilder ExceptDocumentId()
        {
            return ExceptField("documentId");
        }

        public InvestorQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("Name", alias, new GraphQlDirective[] { include, skip });
        }

        public InvestorQueryBuilder ExceptName()
        {
            return ExceptField("Name");
        }

        public InvestorQueryBuilder WithIcon(UploadFileQueryBuilder uploadFileQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("Icon", alias, uploadFileQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public InvestorQueryBuilder ExceptIcon()
        {
            return ExceptField("Icon");
        }

        public InvestorQueryBuilder WithCreatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdAt", alias, new GraphQlDirective[] { include, skip });
        }

        public InvestorQueryBuilder ExceptCreatedAt()
        {
            return ExceptField("createdAt");
        }

        public InvestorQueryBuilder WithUpdatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("updatedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public InvestorQueryBuilder ExceptUpdatedAt()
        {
            return ExceptField("updatedAt");
        }

        public InvestorQueryBuilder WithPublishedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("publishedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public InvestorQueryBuilder ExceptPublishedAt()
        {
            return ExceptField("publishedAt");
        }
    }

    public partial class InvestorEntityResponseCollectionQueryBuilder : GraphQlQueryBuilder<InvestorEntityResponseCollectionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(InvestorQueryBuilder) },
                new GraphQlFieldMetadata { Name = "pageInfo", IsComplex = true, QueryBuilderType = typeof(PaginationQueryBuilder) }
            };

        protected override string TypeName { get { return "InvestorEntityResponseCollection"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public InvestorEntityResponseCollectionQueryBuilder WithNodes(InvestorQueryBuilder investorQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("nodes", alias, investorQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public InvestorEntityResponseCollectionQueryBuilder ExceptNodes()
        {
            return ExceptField("nodes");
        }

        public InvestorEntityResponseCollectionQueryBuilder WithPageInfo(PaginationQueryBuilder paginationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pageInfo", alias, paginationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public InvestorEntityResponseCollectionQueryBuilder ExceptPageInfo()
        {
            return ExceptField("pageInfo");
        }
    }

    public partial class LatestTypeQueryBuilder : GraphQlQueryBuilder<LatestTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "documentId" },
                new GraphQlFieldMetadata { Name = "Version", IsComplex = true, QueryBuilderType = typeof(ComponentVersionVersionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "createdAt" },
                new GraphQlFieldMetadata { Name = "updatedAt" },
                new GraphQlFieldMetadata { Name = "publishedAt" }
            };

        protected override string TypeName { get { return "LatestType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public LatestTypeQueryBuilder WithDocumentId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("documentId", alias, new GraphQlDirective[] { include, skip });
        }

        public LatestTypeQueryBuilder ExceptDocumentId()
        {
            return ExceptField("documentId");
        }

        public LatestTypeQueryBuilder WithVersion(ComponentVersionVersionQueryBuilder componentVersionVersionQueryBuilder, QueryBuilderParameter<ComponentVersionVersionFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("Version", alias, componentVersionVersionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public LatestTypeQueryBuilder ExceptVersion()
        {
            return ExceptField("Version");
        }

        public LatestTypeQueryBuilder WithCreatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdAt", alias, new GraphQlDirective[] { include, skip });
        }

        public LatestTypeQueryBuilder ExceptCreatedAt()
        {
            return ExceptField("createdAt");
        }

        public LatestTypeQueryBuilder WithUpdatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("updatedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public LatestTypeQueryBuilder ExceptUpdatedAt()
        {
            return ExceptField("updatedAt");
        }

        public LatestTypeQueryBuilder WithPublishedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("publishedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public LatestTypeQueryBuilder ExceptPublishedAt()
        {
            return ExceptField("publishedAt");
        }
    }

    public partial class LinkTypeQueryBuilder : GraphQlQueryBuilder<LinkTypeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "documentId" },
                new GraphQlFieldMetadata { Name = "Name" },
                new GraphQlFieldMetadata { Name = "IsOnTop" },
                new GraphQlFieldMetadata { Name = "DarkIcon", IsComplex = true, QueryBuilderType = typeof(UploadFileQueryBuilder) },
                new GraphQlFieldMetadata { Name = "LightIcon", IsComplex = true, QueryBuilderType = typeof(UploadFileQueryBuilder) },
                new GraphQlFieldMetadata { Name = "createdAt" },
                new GraphQlFieldMetadata { Name = "updatedAt" },
                new GraphQlFieldMetadata { Name = "publishedAt" }
            };

        protected override string TypeName { get { return "LinkType"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public LinkTypeQueryBuilder WithDocumentId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("documentId", alias, new GraphQlDirective[] { include, skip });
        }

        public LinkTypeQueryBuilder ExceptDocumentId()
        {
            return ExceptField("documentId");
        }

        public LinkTypeQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("Name", alias, new GraphQlDirective[] { include, skip });
        }

        public LinkTypeQueryBuilder ExceptName()
        {
            return ExceptField("Name");
        }

        public LinkTypeQueryBuilder WithIsOnTop(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("IsOnTop", alias, new GraphQlDirective[] { include, skip });
        }

        public LinkTypeQueryBuilder ExceptIsOnTop()
        {
            return ExceptField("IsOnTop");
        }

        public LinkTypeQueryBuilder WithDarkIcon(UploadFileQueryBuilder uploadFileQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("DarkIcon", alias, uploadFileQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LinkTypeQueryBuilder ExceptDarkIcon()
        {
            return ExceptField("DarkIcon");
        }

        public LinkTypeQueryBuilder WithLightIcon(UploadFileQueryBuilder uploadFileQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("LightIcon", alias, uploadFileQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LinkTypeQueryBuilder ExceptLightIcon()
        {
            return ExceptField("LightIcon");
        }

        public LinkTypeQueryBuilder WithCreatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdAt", alias, new GraphQlDirective[] { include, skip });
        }

        public LinkTypeQueryBuilder ExceptCreatedAt()
        {
            return ExceptField("createdAt");
        }

        public LinkTypeQueryBuilder WithUpdatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("updatedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public LinkTypeQueryBuilder ExceptUpdatedAt()
        {
            return ExceptField("updatedAt");
        }

        public LinkTypeQueryBuilder WithPublishedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("publishedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public LinkTypeQueryBuilder ExceptPublishedAt()
        {
            return ExceptField("publishedAt");
        }
    }

    public partial class LinkTypeEntityResponseCollectionQueryBuilder : GraphQlQueryBuilder<LinkTypeEntityResponseCollectionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(LinkTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "pageInfo", IsComplex = true, QueryBuilderType = typeof(PaginationQueryBuilder) }
            };

        protected override string TypeName { get { return "LinkTypeEntityResponseCollection"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public LinkTypeEntityResponseCollectionQueryBuilder WithNodes(LinkTypeQueryBuilder linkTypeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("nodes", alias, linkTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LinkTypeEntityResponseCollectionQueryBuilder ExceptNodes()
        {
            return ExceptField("nodes");
        }

        public LinkTypeEntityResponseCollectionQueryBuilder WithPageInfo(PaginationQueryBuilder paginationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pageInfo", alias, paginationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LinkTypeEntityResponseCollectionQueryBuilder ExceptPageInfo()
        {
            return ExceptField("pageInfo");
        }
    }

    public partial class LockPoolzTermQueryBuilder : GraphQlQueryBuilder<LockPoolzTermQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "documentId" },
                new GraphQlFieldMetadata { Name = "Value" },
                new GraphQlFieldMetadata { Name = "createdAt" },
                new GraphQlFieldMetadata { Name = "updatedAt" },
                new GraphQlFieldMetadata { Name = "publishedAt" }
            };

        protected override string TypeName { get { return "LockPoolzTerm"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public LockPoolzTermQueryBuilder WithDocumentId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("documentId", alias, new GraphQlDirective[] { include, skip });
        }

        public LockPoolzTermQueryBuilder ExceptDocumentId()
        {
            return ExceptField("documentId");
        }

        public LockPoolzTermQueryBuilder WithValue(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("Value", alias, new GraphQlDirective[] { include, skip });
        }

        public LockPoolzTermQueryBuilder ExceptValue()
        {
            return ExceptField("Value");
        }

        public LockPoolzTermQueryBuilder WithCreatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdAt", alias, new GraphQlDirective[] { include, skip });
        }

        public LockPoolzTermQueryBuilder ExceptCreatedAt()
        {
            return ExceptField("createdAt");
        }

        public LockPoolzTermQueryBuilder WithUpdatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("updatedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public LockPoolzTermQueryBuilder ExceptUpdatedAt()
        {
            return ExceptField("updatedAt");
        }

        public LockPoolzTermQueryBuilder WithPublishedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("publishedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public LockPoolzTermQueryBuilder ExceptPublishedAt()
        {
            return ExceptField("publishedAt");
        }
    }

    public partial class LockTokenWhitelistQueryBuilder : GraphQlQueryBuilder<LockTokenWhitelistQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "documentId" },
                new GraphQlFieldMetadata { Name = "Name" },
                new GraphQlFieldMetadata { Name = "Address" },
                new GraphQlFieldMetadata { Name = "Type" },
                new GraphQlFieldMetadata { Name = "chain_settings_connection", IsComplex = true, QueryBuilderType = typeof(ChainSettingRelationResponseCollectionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "chain_settings", IsComplex = true, QueryBuilderType = typeof(ChainSettingQueryBuilder) },
                new GraphQlFieldMetadata { Name = "createdAt" },
                new GraphQlFieldMetadata { Name = "updatedAt" },
                new GraphQlFieldMetadata { Name = "publishedAt" }
            };

        protected override string TypeName { get { return "LockTokenWhitelist"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public LockTokenWhitelistQueryBuilder WithDocumentId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("documentId", alias, new GraphQlDirective[] { include, skip });
        }

        public LockTokenWhitelistQueryBuilder ExceptDocumentId()
        {
            return ExceptField("documentId");
        }

        public LockTokenWhitelistQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("Name", alias, new GraphQlDirective[] { include, skip });
        }

        public LockTokenWhitelistQueryBuilder ExceptName()
        {
            return ExceptField("Name");
        }

        public LockTokenWhitelistQueryBuilder WithAddress(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("Address", alias, new GraphQlDirective[] { include, skip });
        }

        public LockTokenWhitelistQueryBuilder ExceptAddress()
        {
            return ExceptField("Address");
        }

        public LockTokenWhitelistQueryBuilder WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("Type", alias, new GraphQlDirective[] { include, skip });
        }

        public LockTokenWhitelistQueryBuilder ExceptType()
        {
            return ExceptField("Type");
        }

        public LockTokenWhitelistQueryBuilder WithChainSettingsConnection(ChainSettingRelationResponseCollectionQueryBuilder chainSettingRelationResponseCollectionQueryBuilder, QueryBuilderParameter<ChainSettingFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("chain_settings_connection", alias, chainSettingRelationResponseCollectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public LockTokenWhitelistQueryBuilder ExceptChainSettingsConnection()
        {
            return ExceptField("chain_settings_connection");
        }

        public LockTokenWhitelistQueryBuilder WithChainSettings(ChainSettingQueryBuilder chainSettingQueryBuilder, QueryBuilderParameter<ChainSettingFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("chain_settings", alias, chainSettingQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public LockTokenWhitelistQueryBuilder ExceptChainSettings()
        {
            return ExceptField("chain_settings");
        }

        public LockTokenWhitelistQueryBuilder WithCreatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdAt", alias, new GraphQlDirective[] { include, skip });
        }

        public LockTokenWhitelistQueryBuilder ExceptCreatedAt()
        {
            return ExceptField("createdAt");
        }

        public LockTokenWhitelistQueryBuilder WithUpdatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("updatedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public LockTokenWhitelistQueryBuilder ExceptUpdatedAt()
        {
            return ExceptField("updatedAt");
        }

        public LockTokenWhitelistQueryBuilder WithPublishedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("publishedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public LockTokenWhitelistQueryBuilder ExceptPublishedAt()
        {
            return ExceptField("publishedAt");
        }
    }

    public partial class LockTokenWhitelistEntityResponseCollectionQueryBuilder : GraphQlQueryBuilder<LockTokenWhitelistEntityResponseCollectionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(LockTokenWhitelistQueryBuilder) },
                new GraphQlFieldMetadata { Name = "pageInfo", IsComplex = true, QueryBuilderType = typeof(PaginationQueryBuilder) }
            };

        protected override string TypeName { get { return "LockTokenWhitelistEntityResponseCollection"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public LockTokenWhitelistEntityResponseCollectionQueryBuilder WithNodes(LockTokenWhitelistQueryBuilder lockTokenWhitelistQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("nodes", alias, lockTokenWhitelistQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LockTokenWhitelistEntityResponseCollectionQueryBuilder ExceptNodes()
        {
            return ExceptField("nodes");
        }

        public LockTokenWhitelistEntityResponseCollectionQueryBuilder WithPageInfo(PaginationQueryBuilder paginationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pageInfo", alias, paginationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public LockTokenWhitelistEntityResponseCollectionQueryBuilder ExceptPageInfo()
        {
            return ExceptField("pageInfo");
        }
    }

    public partial class MainQueryBuilder : GraphQlQueryBuilder<MainQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "documentId" },
                new GraphQlFieldMetadata { Name = "sections", IsComplex = true, QueryBuilderType = typeof(ComponentSectionSectionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "createdAt" },
                new GraphQlFieldMetadata { Name = "updatedAt" },
                new GraphQlFieldMetadata { Name = "publishedAt" }
            };

        protected override string TypeName { get { return "Main"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MainQueryBuilder WithDocumentId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("documentId", alias, new GraphQlDirective[] { include, skip });
        }

        public MainQueryBuilder ExceptDocumentId()
        {
            return ExceptField("documentId");
        }

        public MainQueryBuilder WithSections(ComponentSectionSectionQueryBuilder componentSectionSectionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("sections", alias, componentSectionSectionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MainQueryBuilder ExceptSections()
        {
            return ExceptField("sections");
        }

        public MainQueryBuilder WithCreatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdAt", alias, new GraphQlDirective[] { include, skip });
        }

        public MainQueryBuilder ExceptCreatedAt()
        {
            return ExceptField("createdAt");
        }

        public MainQueryBuilder WithUpdatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("updatedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public MainQueryBuilder ExceptUpdatedAt()
        {
            return ExceptField("updatedAt");
        }

        public MainQueryBuilder WithPublishedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("publishedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public MainQueryBuilder ExceptPublishedAt()
        {
            return ExceptField("publishedAt");
        }
    }

    public partial class MarketCapBadgeQueryBuilder : GraphQlQueryBuilder<MarketCapBadgeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "documentId" },
                new GraphQlFieldMetadata { Name = "Link" },
                new GraphQlFieldMetadata { Name = "icon", IsComplex = true, QueryBuilderType = typeof(UploadFileQueryBuilder) },
                new GraphQlFieldMetadata { Name = "createdAt" },
                new GraphQlFieldMetadata { Name = "updatedAt" },
                new GraphQlFieldMetadata { Name = "publishedAt" }
            };

        protected override string TypeName { get { return "MarketCapBadge"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MarketCapBadgeQueryBuilder WithDocumentId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("documentId", alias, new GraphQlDirective[] { include, skip });
        }

        public MarketCapBadgeQueryBuilder ExceptDocumentId()
        {
            return ExceptField("documentId");
        }

        public MarketCapBadgeQueryBuilder WithLink(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("Link", alias, new GraphQlDirective[] { include, skip });
        }

        public MarketCapBadgeQueryBuilder ExceptLink()
        {
            return ExceptField("Link");
        }

        public MarketCapBadgeQueryBuilder WithIcon(UploadFileQueryBuilder uploadFileQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("icon", alias, uploadFileQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MarketCapBadgeQueryBuilder ExceptIcon()
        {
            return ExceptField("icon");
        }

        public MarketCapBadgeQueryBuilder WithCreatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdAt", alias, new GraphQlDirective[] { include, skip });
        }

        public MarketCapBadgeQueryBuilder ExceptCreatedAt()
        {
            return ExceptField("createdAt");
        }

        public MarketCapBadgeQueryBuilder WithUpdatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("updatedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public MarketCapBadgeQueryBuilder ExceptUpdatedAt()
        {
            return ExceptField("updatedAt");
        }

        public MarketCapBadgeQueryBuilder WithPublishedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("publishedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public MarketCapBadgeQueryBuilder ExceptPublishedAt()
        {
            return ExceptField("publishedAt");
        }
    }

    public partial class MarketCapBadgeEntityResponseCollectionQueryBuilder : GraphQlQueryBuilder<MarketCapBadgeEntityResponseCollectionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(MarketCapBadgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "pageInfo", IsComplex = true, QueryBuilderType = typeof(PaginationQueryBuilder) }
            };

        protected override string TypeName { get { return "MarketCapBadgeEntityResponseCollection"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MarketCapBadgeEntityResponseCollectionQueryBuilder WithNodes(MarketCapBadgeQueryBuilder marketCapBadgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("nodes", alias, marketCapBadgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MarketCapBadgeEntityResponseCollectionQueryBuilder ExceptNodes()
        {
            return ExceptField("nodes");
        }

        public MarketCapBadgeEntityResponseCollectionQueryBuilder WithPageInfo(PaginationQueryBuilder paginationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pageInfo", alias, paginationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MarketCapBadgeEntityResponseCollectionQueryBuilder ExceptPageInfo()
        {
            return ExceptField("pageInfo");
        }
    }

    public partial class MediaKitQueryBuilder : GraphQlQueryBuilder<MediaKitQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "documentId" },
                new GraphQlFieldMetadata { Name = "Name" },
                new GraphQlFieldMetadata { Name = "Text" },
                new GraphQlFieldMetadata { Name = "Link", IsComplex = true, QueryBuilderType = typeof(ComponentDictionaryLinksQueryBuilder) },
                new GraphQlFieldMetadata { Name = "createdAt" },
                new GraphQlFieldMetadata { Name = "updatedAt" },
                new GraphQlFieldMetadata { Name = "publishedAt" }
            };

        protected override string TypeName { get { return "MediaKit"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MediaKitQueryBuilder WithDocumentId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("documentId", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaKitQueryBuilder ExceptDocumentId()
        {
            return ExceptField("documentId");
        }

        public MediaKitQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("Name", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaKitQueryBuilder ExceptName()
        {
            return ExceptField("Name");
        }

        public MediaKitQueryBuilder WithText(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("Text", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaKitQueryBuilder ExceptText()
        {
            return ExceptField("Text");
        }

        public MediaKitQueryBuilder WithLink(ComponentDictionaryLinksQueryBuilder componentDictionaryLinksQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("Link", alias, componentDictionaryLinksQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MediaKitQueryBuilder ExceptLink()
        {
            return ExceptField("Link");
        }

        public MediaKitQueryBuilder WithCreatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdAt", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaKitQueryBuilder ExceptCreatedAt()
        {
            return ExceptField("createdAt");
        }

        public MediaKitQueryBuilder WithUpdatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("updatedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaKitQueryBuilder ExceptUpdatedAt()
        {
            return ExceptField("updatedAt");
        }

        public MediaKitQueryBuilder WithPublishedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("publishedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public MediaKitQueryBuilder ExceptPublishedAt()
        {
            return ExceptField("publishedAt");
        }
    }

    public partial class MediaKitEntityResponseCollectionQueryBuilder : GraphQlQueryBuilder<MediaKitEntityResponseCollectionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(MediaKitQueryBuilder) },
                new GraphQlFieldMetadata { Name = "pageInfo", IsComplex = true, QueryBuilderType = typeof(PaginationQueryBuilder) }
            };

        protected override string TypeName { get { return "MediaKitEntityResponseCollection"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MediaKitEntityResponseCollectionQueryBuilder WithNodes(MediaKitQueryBuilder mediaKitQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("nodes", alias, mediaKitQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MediaKitEntityResponseCollectionQueryBuilder ExceptNodes()
        {
            return ExceptField("nodes");
        }

        public MediaKitEntityResponseCollectionQueryBuilder WithPageInfo(PaginationQueryBuilder paginationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pageInfo", alias, paginationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MediaKitEntityResponseCollectionQueryBuilder ExceptPageInfo()
        {
            return ExceptField("pageInfo");
        }
    }

    public partial class NonEvmChainQueryBuilder : GraphQlQueryBuilder<NonEvmChainQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "documentId" },
                new GraphQlFieldMetadata { Name = "Icon", IsComplex = true, QueryBuilderType = typeof(UploadFileQueryBuilder) },
                new GraphQlFieldMetadata { Name = "DisplayText" },
                new GraphQlFieldMetadata { Name = "Regex" },
                new GraphQlFieldMetadata { Name = "createdAt" },
                new GraphQlFieldMetadata { Name = "updatedAt" },
                new GraphQlFieldMetadata { Name = "publishedAt" }
            };

        protected override string TypeName { get { return "NonEvmChain"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public NonEvmChainQueryBuilder WithDocumentId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("documentId", alias, new GraphQlDirective[] { include, skip });
        }

        public NonEvmChainQueryBuilder ExceptDocumentId()
        {
            return ExceptField("documentId");
        }

        public NonEvmChainQueryBuilder WithIcon(UploadFileQueryBuilder uploadFileQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("Icon", alias, uploadFileQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public NonEvmChainQueryBuilder ExceptIcon()
        {
            return ExceptField("Icon");
        }

        public NonEvmChainQueryBuilder WithDisplayText(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("DisplayText", alias, new GraphQlDirective[] { include, skip });
        }

        public NonEvmChainQueryBuilder ExceptDisplayText()
        {
            return ExceptField("DisplayText");
        }

        public NonEvmChainQueryBuilder WithRegex(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("Regex", alias, new GraphQlDirective[] { include, skip });
        }

        public NonEvmChainQueryBuilder ExceptRegex()
        {
            return ExceptField("Regex");
        }

        public NonEvmChainQueryBuilder WithCreatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdAt", alias, new GraphQlDirective[] { include, skip });
        }

        public NonEvmChainQueryBuilder ExceptCreatedAt()
        {
            return ExceptField("createdAt");
        }

        public NonEvmChainQueryBuilder WithUpdatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("updatedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public NonEvmChainQueryBuilder ExceptUpdatedAt()
        {
            return ExceptField("updatedAt");
        }

        public NonEvmChainQueryBuilder WithPublishedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("publishedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public NonEvmChainQueryBuilder ExceptPublishedAt()
        {
            return ExceptField("publishedAt");
        }
    }

    public partial class NonEvmChainEntityResponseCollectionQueryBuilder : GraphQlQueryBuilder<NonEvmChainEntityResponseCollectionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(NonEvmChainQueryBuilder) },
                new GraphQlFieldMetadata { Name = "pageInfo", IsComplex = true, QueryBuilderType = typeof(PaginationQueryBuilder) }
            };

        protected override string TypeName { get { return "NonEvmChainEntityResponseCollection"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public NonEvmChainEntityResponseCollectionQueryBuilder WithNodes(NonEvmChainQueryBuilder nonEvmChainQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("nodes", alias, nonEvmChainQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public NonEvmChainEntityResponseCollectionQueryBuilder ExceptNodes()
        {
            return ExceptField("nodes");
        }

        public NonEvmChainEntityResponseCollectionQueryBuilder WithPageInfo(PaginationQueryBuilder paginationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pageInfo", alias, paginationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public NonEvmChainEntityResponseCollectionQueryBuilder ExceptPageInfo()
        {
            return ExceptField("pageInfo");
        }
    }

    public partial class OpenGrantQueryBuilder : GraphQlQueryBuilder<OpenGrantQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "documentId" },
                new GraphQlFieldMetadata { Name = "Name" },
                new GraphQlFieldMetadata { Name = "Text" },
                new GraphQlFieldMetadata { Name = "Link" },
                new GraphQlFieldMetadata { Name = "icon", IsComplex = true, QueryBuilderType = typeof(UploadFileQueryBuilder) },
                new GraphQlFieldMetadata { Name = "createdAt" },
                new GraphQlFieldMetadata { Name = "updatedAt" },
                new GraphQlFieldMetadata { Name = "publishedAt" }
            };

        protected override string TypeName { get { return "OpenGrant"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public OpenGrantQueryBuilder WithDocumentId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("documentId", alias, new GraphQlDirective[] { include, skip });
        }

        public OpenGrantQueryBuilder ExceptDocumentId()
        {
            return ExceptField("documentId");
        }

        public OpenGrantQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("Name", alias, new GraphQlDirective[] { include, skip });
        }

        public OpenGrantQueryBuilder ExceptName()
        {
            return ExceptField("Name");
        }

        public OpenGrantQueryBuilder WithText(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("Text", alias, new GraphQlDirective[] { include, skip });
        }

        public OpenGrantQueryBuilder ExceptText()
        {
            return ExceptField("Text");
        }

        public OpenGrantQueryBuilder WithLink(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("Link", alias, new GraphQlDirective[] { include, skip });
        }

        public OpenGrantQueryBuilder ExceptLink()
        {
            return ExceptField("Link");
        }

        public OpenGrantQueryBuilder WithIcon(UploadFileQueryBuilder uploadFileQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("icon", alias, uploadFileQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public OpenGrantQueryBuilder ExceptIcon()
        {
            return ExceptField("icon");
        }

        public OpenGrantQueryBuilder WithCreatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdAt", alias, new GraphQlDirective[] { include, skip });
        }

        public OpenGrantQueryBuilder ExceptCreatedAt()
        {
            return ExceptField("createdAt");
        }

        public OpenGrantQueryBuilder WithUpdatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("updatedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public OpenGrantQueryBuilder ExceptUpdatedAt()
        {
            return ExceptField("updatedAt");
        }

        public OpenGrantQueryBuilder WithPublishedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("publishedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public OpenGrantQueryBuilder ExceptPublishedAt()
        {
            return ExceptField("publishedAt");
        }
    }

    public partial class OpenGrantEntityResponseCollectionQueryBuilder : GraphQlQueryBuilder<OpenGrantEntityResponseCollectionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(OpenGrantQueryBuilder) },
                new GraphQlFieldMetadata { Name = "pageInfo", IsComplex = true, QueryBuilderType = typeof(PaginationQueryBuilder) }
            };

        protected override string TypeName { get { return "OpenGrantEntityResponseCollection"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public OpenGrantEntityResponseCollectionQueryBuilder WithNodes(OpenGrantQueryBuilder openGrantQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("nodes", alias, openGrantQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public OpenGrantEntityResponseCollectionQueryBuilder ExceptNodes()
        {
            return ExceptField("nodes");
        }

        public OpenGrantEntityResponseCollectionQueryBuilder WithPageInfo(PaginationQueryBuilder paginationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pageInfo", alias, paginationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public OpenGrantEntityResponseCollectionQueryBuilder ExceptPageInfo()
        {
            return ExceptField("pageInfo");
        }
    }

    public partial class OurPartnerQueryBuilder : GraphQlQueryBuilder<OurPartnerQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "documentId" },
                new GraphQlFieldMetadata { Name = "Name" },
                new GraphQlFieldMetadata { Name = "DarkLogo", IsComplex = true, QueryBuilderType = typeof(UploadFileQueryBuilder) },
                new GraphQlFieldMetadata { Name = "createdAt" },
                new GraphQlFieldMetadata { Name = "updatedAt" },
                new GraphQlFieldMetadata { Name = "publishedAt" }
            };

        protected override string TypeName { get { return "OurPartner"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public OurPartnerQueryBuilder WithDocumentId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("documentId", alias, new GraphQlDirective[] { include, skip });
        }

        public OurPartnerQueryBuilder ExceptDocumentId()
        {
            return ExceptField("documentId");
        }

        public OurPartnerQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("Name", alias, new GraphQlDirective[] { include, skip });
        }

        public OurPartnerQueryBuilder ExceptName()
        {
            return ExceptField("Name");
        }

        public OurPartnerQueryBuilder WithDarkLogo(UploadFileQueryBuilder uploadFileQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("DarkLogo", alias, uploadFileQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public OurPartnerQueryBuilder ExceptDarkLogo()
        {
            return ExceptField("DarkLogo");
        }

        public OurPartnerQueryBuilder WithCreatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdAt", alias, new GraphQlDirective[] { include, skip });
        }

        public OurPartnerQueryBuilder ExceptCreatedAt()
        {
            return ExceptField("createdAt");
        }

        public OurPartnerQueryBuilder WithUpdatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("updatedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public OurPartnerQueryBuilder ExceptUpdatedAt()
        {
            return ExceptField("updatedAt");
        }

        public OurPartnerQueryBuilder WithPublishedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("publishedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public OurPartnerQueryBuilder ExceptPublishedAt()
        {
            return ExceptField("publishedAt");
        }
    }

    public partial class OurPartnerEntityResponseCollectionQueryBuilder : GraphQlQueryBuilder<OurPartnerEntityResponseCollectionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(OurPartnerQueryBuilder) },
                new GraphQlFieldMetadata { Name = "pageInfo", IsComplex = true, QueryBuilderType = typeof(PaginationQueryBuilder) }
            };

        protected override string TypeName { get { return "OurPartnerEntityResponseCollection"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public OurPartnerEntityResponseCollectionQueryBuilder WithNodes(OurPartnerQueryBuilder ourPartnerQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("nodes", alias, ourPartnerQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public OurPartnerEntityResponseCollectionQueryBuilder ExceptNodes()
        {
            return ExceptField("nodes");
        }

        public OurPartnerEntityResponseCollectionQueryBuilder WithPageInfo(PaginationQueryBuilder paginationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pageInfo", alias, paginationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public OurPartnerEntityResponseCollectionQueryBuilder ExceptPageInfo()
        {
            return ExceptField("pageInfo");
        }
    }

    public partial class PageInfoQueryBuilder : GraphQlQueryBuilder<PageInfoQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "documentId" },
                new GraphQlFieldMetadata { Name = "Link" },
                new GraphQlFieldMetadata { Name = "Title" },
                new GraphQlFieldMetadata { Name = "Description" },
                new GraphQlFieldMetadata { Name = "createdAt" },
                new GraphQlFieldMetadata { Name = "updatedAt" },
                new GraphQlFieldMetadata { Name = "publishedAt" }
            };

        protected override string TypeName { get { return "PageInfo"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PageInfoQueryBuilder WithDocumentId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("documentId", alias, new GraphQlDirective[] { include, skip });
        }

        public PageInfoQueryBuilder ExceptDocumentId()
        {
            return ExceptField("documentId");
        }

        public PageInfoQueryBuilder WithLink(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("Link", alias, new GraphQlDirective[] { include, skip });
        }

        public PageInfoQueryBuilder ExceptLink()
        {
            return ExceptField("Link");
        }

        public PageInfoQueryBuilder WithTitle(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("Title", alias, new GraphQlDirective[] { include, skip });
        }

        public PageInfoQueryBuilder ExceptTitle()
        {
            return ExceptField("Title");
        }

        public PageInfoQueryBuilder WithDescription(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("Description", alias, new GraphQlDirective[] { include, skip });
        }

        public PageInfoQueryBuilder ExceptDescription()
        {
            return ExceptField("Description");
        }

        public PageInfoQueryBuilder WithCreatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdAt", alias, new GraphQlDirective[] { include, skip });
        }

        public PageInfoQueryBuilder ExceptCreatedAt()
        {
            return ExceptField("createdAt");
        }

        public PageInfoQueryBuilder WithUpdatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("updatedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public PageInfoQueryBuilder ExceptUpdatedAt()
        {
            return ExceptField("updatedAt");
        }

        public PageInfoQueryBuilder WithPublishedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("publishedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public PageInfoQueryBuilder ExceptPublishedAt()
        {
            return ExceptField("publishedAt");
        }
    }

    public partial class PageInfoEntityResponseCollectionQueryBuilder : GraphQlQueryBuilder<PageInfoEntityResponseCollectionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(PageInfoQueryBuilder) },
                new GraphQlFieldMetadata { Name = "pageInfo", IsComplex = true, QueryBuilderType = typeof(PaginationQueryBuilder) }
            };

        protected override string TypeName { get { return "PageInfoEntityResponseCollection"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PageInfoEntityResponseCollectionQueryBuilder WithNodes(PageInfoQueryBuilder pageInfoQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("nodes", alias, pageInfoQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PageInfoEntityResponseCollectionQueryBuilder ExceptNodes()
        {
            return ExceptField("nodes");
        }

        public PageInfoEntityResponseCollectionQueryBuilder WithPageInfo(PaginationQueryBuilder paginationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pageInfo", alias, paginationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PageInfoEntityResponseCollectionQueryBuilder ExceptPageInfo()
        {
            return ExceptField("pageInfo");
        }
    }

    public partial class PoolzBoutiqueQueryBuilder : GraphQlQueryBuilder<PoolzBoutiqueQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "documentId" },
                new GraphQlFieldMetadata { Name = "projectName" },
                new GraphQlFieldMetadata { Name = "TokenAddress" },
                new GraphQlFieldMetadata { Name = "chainID" },
                new GraphQlFieldMetadata { Name = "Logo", IsComplex = true, QueryBuilderType = typeof(UploadFileQueryBuilder) },
                new GraphQlFieldMetadata { Name = "WebSite" },
                new GraphQlFieldMetadata { Name = "Twitter" },
                new GraphQlFieldMetadata { Name = "Telegram" },
                new GraphQlFieldMetadata { Name = "Discord" },
                new GraphQlFieldMetadata { Name = "Color" },
                new GraphQlFieldMetadata { Name = "createdAt" },
                new GraphQlFieldMetadata { Name = "updatedAt" },
                new GraphQlFieldMetadata { Name = "publishedAt" }
            };

        protected override string TypeName { get { return "PoolzBoutique"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PoolzBoutiqueQueryBuilder WithDocumentId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("documentId", alias, new GraphQlDirective[] { include, skip });
        }

        public PoolzBoutiqueQueryBuilder ExceptDocumentId()
        {
            return ExceptField("documentId");
        }

        public PoolzBoutiqueQueryBuilder WithProjectName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("projectName", alias, new GraphQlDirective[] { include, skip });
        }

        public PoolzBoutiqueQueryBuilder ExceptProjectName()
        {
            return ExceptField("projectName");
        }

        public PoolzBoutiqueQueryBuilder WithTokenAddress(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("TokenAddress", alias, new GraphQlDirective[] { include, skip });
        }

        public PoolzBoutiqueQueryBuilder ExceptTokenAddress()
        {
            return ExceptField("TokenAddress");
        }

        public PoolzBoutiqueQueryBuilder WithChainId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("chainID", alias, new GraphQlDirective[] { include, skip });
        }

        public PoolzBoutiqueQueryBuilder ExceptChainId()
        {
            return ExceptField("chainID");
        }

        public PoolzBoutiqueQueryBuilder WithLogo(UploadFileQueryBuilder uploadFileQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("Logo", alias, uploadFileQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PoolzBoutiqueQueryBuilder ExceptLogo()
        {
            return ExceptField("Logo");
        }

        public PoolzBoutiqueQueryBuilder WithWebSite(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("WebSite", alias, new GraphQlDirective[] { include, skip });
        }

        public PoolzBoutiqueQueryBuilder ExceptWebSite()
        {
            return ExceptField("WebSite");
        }

        public PoolzBoutiqueQueryBuilder WithTwitter(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("Twitter", alias, new GraphQlDirective[] { include, skip });
        }

        public PoolzBoutiqueQueryBuilder ExceptTwitter()
        {
            return ExceptField("Twitter");
        }

        public PoolzBoutiqueQueryBuilder WithTelegram(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("Telegram", alias, new GraphQlDirective[] { include, skip });
        }

        public PoolzBoutiqueQueryBuilder ExceptTelegram()
        {
            return ExceptField("Telegram");
        }

        public PoolzBoutiqueQueryBuilder WithDiscord(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("Discord", alias, new GraphQlDirective[] { include, skip });
        }

        public PoolzBoutiqueQueryBuilder ExceptDiscord()
        {
            return ExceptField("Discord");
        }

        public PoolzBoutiqueQueryBuilder WithColor(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("Color", alias, new GraphQlDirective[] { include, skip });
        }

        public PoolzBoutiqueQueryBuilder ExceptColor()
        {
            return ExceptField("Color");
        }

        public PoolzBoutiqueQueryBuilder WithCreatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdAt", alias, new GraphQlDirective[] { include, skip });
        }

        public PoolzBoutiqueQueryBuilder ExceptCreatedAt()
        {
            return ExceptField("createdAt");
        }

        public PoolzBoutiqueQueryBuilder WithUpdatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("updatedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public PoolzBoutiqueQueryBuilder ExceptUpdatedAt()
        {
            return ExceptField("updatedAt");
        }

        public PoolzBoutiqueQueryBuilder WithPublishedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("publishedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public PoolzBoutiqueQueryBuilder ExceptPublishedAt()
        {
            return ExceptField("publishedAt");
        }
    }

    public partial class PoolzBoutiqueEntityResponseCollectionQueryBuilder : GraphQlQueryBuilder<PoolzBoutiqueEntityResponseCollectionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(PoolzBoutiqueQueryBuilder) },
                new GraphQlFieldMetadata { Name = "pageInfo", IsComplex = true, QueryBuilderType = typeof(PaginationQueryBuilder) }
            };

        protected override string TypeName { get { return "PoolzBoutiqueEntityResponseCollection"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PoolzBoutiqueEntityResponseCollectionQueryBuilder WithNodes(PoolzBoutiqueQueryBuilder poolzBoutiqueQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("nodes", alias, poolzBoutiqueQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PoolzBoutiqueEntityResponseCollectionQueryBuilder ExceptNodes()
        {
            return ExceptField("nodes");
        }

        public PoolzBoutiqueEntityResponseCollectionQueryBuilder WithPageInfo(PaginationQueryBuilder paginationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pageInfo", alias, paginationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PoolzBoutiqueEntityResponseCollectionQueryBuilder ExceptPageInfo()
        {
            return ExceptField("pageInfo");
        }
    }

    public partial class PragmaVersionQueryBuilder : GraphQlQueryBuilder<PragmaVersionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "documentId" },
                new GraphQlFieldMetadata { Name = "PragmaVersion" },
                new GraphQlFieldMetadata { Name = "createdAt" },
                new GraphQlFieldMetadata { Name = "updatedAt" },
                new GraphQlFieldMetadata { Name = "publishedAt" }
            };

        protected override string TypeName { get { return "PragmaVersion"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PragmaVersionQueryBuilder WithDocumentId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("documentId", alias, new GraphQlDirective[] { include, skip });
        }

        public PragmaVersionQueryBuilder ExceptDocumentId()
        {
            return ExceptField("documentId");
        }

        public PragmaVersionQueryBuilder WithPragmaVersion(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("PragmaVersion", alias, new GraphQlDirective[] { include, skip });
        }

        public PragmaVersionQueryBuilder ExceptPragmaVersion()
        {
            return ExceptField("PragmaVersion");
        }

        public PragmaVersionQueryBuilder WithCreatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdAt", alias, new GraphQlDirective[] { include, skip });
        }

        public PragmaVersionQueryBuilder ExceptCreatedAt()
        {
            return ExceptField("createdAt");
        }

        public PragmaVersionQueryBuilder WithUpdatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("updatedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public PragmaVersionQueryBuilder ExceptUpdatedAt()
        {
            return ExceptField("updatedAt");
        }

        public PragmaVersionQueryBuilder WithPublishedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("publishedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public PragmaVersionQueryBuilder ExceptPublishedAt()
        {
            return ExceptField("publishedAt");
        }
    }

    public partial class PragmaVersionEntityResponseCollectionQueryBuilder : GraphQlQueryBuilder<PragmaVersionEntityResponseCollectionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(PragmaVersionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "pageInfo", IsComplex = true, QueryBuilderType = typeof(PaginationQueryBuilder) }
            };

        protected override string TypeName { get { return "PragmaVersionEntityResponseCollection"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PragmaVersionEntityResponseCollectionQueryBuilder WithNodes(PragmaVersionQueryBuilder pragmaVersionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("nodes", alias, pragmaVersionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PragmaVersionEntityResponseCollectionQueryBuilder ExceptNodes()
        {
            return ExceptField("nodes");
        }

        public PragmaVersionEntityResponseCollectionQueryBuilder WithPageInfo(PaginationQueryBuilder paginationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pageInfo", alias, paginationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PragmaVersionEntityResponseCollectionQueryBuilder ExceptPageInfo()
        {
            return ExceptField("pageInfo");
        }
    }

    public partial class PrivacyQueryBuilder : GraphQlQueryBuilder<PrivacyQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "documentId" },
                new GraphQlFieldMetadata { Name = "Value" },
                new GraphQlFieldMetadata { Name = "createdAt" },
                new GraphQlFieldMetadata { Name = "updatedAt" },
                new GraphQlFieldMetadata { Name = "publishedAt" }
            };

        protected override string TypeName { get { return "Privacy"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PrivacyQueryBuilder WithDocumentId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("documentId", alias, new GraphQlDirective[] { include, skip });
        }

        public PrivacyQueryBuilder ExceptDocumentId()
        {
            return ExceptField("documentId");
        }

        public PrivacyQueryBuilder WithValue(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("Value", alias, new GraphQlDirective[] { include, skip });
        }

        public PrivacyQueryBuilder ExceptValue()
        {
            return ExceptField("Value");
        }

        public PrivacyQueryBuilder WithCreatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdAt", alias, new GraphQlDirective[] { include, skip });
        }

        public PrivacyQueryBuilder ExceptCreatedAt()
        {
            return ExceptField("createdAt");
        }

        public PrivacyQueryBuilder WithUpdatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("updatedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public PrivacyQueryBuilder ExceptUpdatedAt()
        {
            return ExceptField("updatedAt");
        }

        public PrivacyQueryBuilder WithPublishedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("publishedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public PrivacyQueryBuilder ExceptPublishedAt()
        {
            return ExceptField("publishedAt");
        }
    }

    public partial class ProjectsInformationQueryBuilder : GraphQlQueryBuilder<ProjectsInformationQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "documentId" },
                new GraphQlFieldMetadata { Name = "CryptorankKey" },
                new GraphQlFieldMetadata { Name = "PoolzBackId" },
                new GraphQlFieldMetadata { Name = "WhitelistId" },
                new GraphQlFieldMetadata { Name = "Name" },
                new GraphQlFieldMetadata { Name = "Logo", IsComplex = true, QueryBuilderType = typeof(UploadFileQueryBuilder) },
                new GraphQlFieldMetadata { Name = "Block", IsComplex = true, QueryBuilderType = typeof(UploadFileQueryBuilder) },
                new GraphQlFieldMetadata { Name = "VisualText", IsComplex = true, QueryBuilderType = typeof(ComponentVisualTextVisualTextQueryBuilder) },
                new GraphQlFieldMetadata { Name = "UploadPool", IsComplex = true, QueryBuilderType = typeof(ComponentUploadPoolUploadPoolQueryBuilder) },
                new GraphQlFieldMetadata { Name = "IsShow" },
                new GraphQlFieldMetadata { Name = "Syntetic", IsComplex = true, QueryBuilderType = typeof(ComponentSyntheticZoneSynteticQueryBuilder) },
                new GraphQlFieldMetadata { Name = "Original", IsComplex = true, QueryBuilderType = typeof(ComponentSyntheticZoneSynteticQueryBuilder) },
                new GraphQlFieldMetadata { Name = "Investors", IsComplex = true, QueryBuilderType = typeof(ComponentInvestorsInvestorsQueryBuilder) },
                new GraphQlFieldMetadata { Name = "coinmarketcapKey" },
                new GraphQlFieldMetadata { Name = "coingeckoKey" },
                new GraphQlFieldMetadata { Name = "MainListShow" },
                new GraphQlFieldMetadata { Name = "FullTokenDistribution", IsComplex = true, QueryBuilderType = typeof(ComponentFullTokenDistributionFullTokenDistributionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "ATHROI" },
                new GraphQlFieldMetadata { Name = "chain_setting", IsComplex = true, QueryBuilderType = typeof(ChainSettingQueryBuilder) },
                new GraphQlFieldMetadata { Name = "ido_badge", IsComplex = true, QueryBuilderType = typeof(IdoBadgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "Warning_Text" },
                new GraphQlFieldMetadata { Name = "blockLocations" },
                new GraphQlFieldMetadata { Name = "ProjectPhases", IsComplex = true, QueryBuilderType = typeof(ComponentPhaseStartEndAmountQueryBuilder) },
                new GraphQlFieldMetadata { Name = "Order" },
                new GraphQlFieldMetadata { Name = "createdAt" },
                new GraphQlFieldMetadata { Name = "updatedAt" },
                new GraphQlFieldMetadata { Name = "publishedAt" }
            };

        protected override string TypeName { get { return "ProjectsInformation"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ProjectsInformationQueryBuilder WithDocumentId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("documentId", alias, new GraphQlDirective[] { include, skip });
        }

        public ProjectsInformationQueryBuilder ExceptDocumentId()
        {
            return ExceptField("documentId");
        }

        public ProjectsInformationQueryBuilder WithCryptorankKey(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("CryptorankKey", alias, new GraphQlDirective[] { include, skip });
        }

        public ProjectsInformationQueryBuilder ExceptCryptorankKey()
        {
            return ExceptField("CryptorankKey");
        }

        public ProjectsInformationQueryBuilder WithPoolzBackId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("PoolzBackId", alias, new GraphQlDirective[] { include, skip });
        }

        public ProjectsInformationQueryBuilder ExceptPoolzBackId()
        {
            return ExceptField("PoolzBackId");
        }

        public ProjectsInformationQueryBuilder WithWhitelistId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("WhitelistId", alias, new GraphQlDirective[] { include, skip });
        }

        public ProjectsInformationQueryBuilder ExceptWhitelistId()
        {
            return ExceptField("WhitelistId");
        }

        public ProjectsInformationQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("Name", alias, new GraphQlDirective[] { include, skip });
        }

        public ProjectsInformationQueryBuilder ExceptName()
        {
            return ExceptField("Name");
        }

        public ProjectsInformationQueryBuilder WithLogo(UploadFileQueryBuilder uploadFileQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("Logo", alias, uploadFileQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ProjectsInformationQueryBuilder ExceptLogo()
        {
            return ExceptField("Logo");
        }

        public ProjectsInformationQueryBuilder WithBlock(UploadFileQueryBuilder uploadFileQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("Block", alias, uploadFileQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ProjectsInformationQueryBuilder ExceptBlock()
        {
            return ExceptField("Block");
        }

        public ProjectsInformationQueryBuilder WithVisualText(ComponentVisualTextVisualTextQueryBuilder componentVisualTextVisualTextQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("VisualText", alias, componentVisualTextVisualTextQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ProjectsInformationQueryBuilder ExceptVisualText()
        {
            return ExceptField("VisualText");
        }

        public ProjectsInformationQueryBuilder WithUploadPool(ComponentUploadPoolUploadPoolQueryBuilder componentUploadPoolUploadPoolQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("UploadPool", alias, componentUploadPoolUploadPoolQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ProjectsInformationQueryBuilder ExceptUploadPool()
        {
            return ExceptField("UploadPool");
        }

        public ProjectsInformationQueryBuilder WithIsShow(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("IsShow", alias, new GraphQlDirective[] { include, skip });
        }

        public ProjectsInformationQueryBuilder ExceptIsShow()
        {
            return ExceptField("IsShow");
        }

        public ProjectsInformationQueryBuilder WithSyntetic(ComponentSyntheticZoneSynteticQueryBuilder componentSyntheticZoneSynteticQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("Syntetic", alias, componentSyntheticZoneSynteticQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ProjectsInformationQueryBuilder ExceptSyntetic()
        {
            return ExceptField("Syntetic");
        }

        public ProjectsInformationQueryBuilder WithOriginal(ComponentSyntheticZoneSynteticQueryBuilder componentSyntheticZoneSynteticQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("Original", alias, componentSyntheticZoneSynteticQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ProjectsInformationQueryBuilder ExceptOriginal()
        {
            return ExceptField("Original");
        }

        public ProjectsInformationQueryBuilder WithInvestors(ComponentInvestorsInvestorsQueryBuilder componentInvestorsInvestorsQueryBuilder, QueryBuilderParameter<ComponentInvestorsInvestorsFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("Investors", alias, componentInvestorsInvestorsQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ProjectsInformationQueryBuilder ExceptInvestors()
        {
            return ExceptField("Investors");
        }

        public ProjectsInformationQueryBuilder WithCoinmarketcapKey(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("coinmarketcapKey", alias, new GraphQlDirective[] { include, skip });
        }

        public ProjectsInformationQueryBuilder ExceptCoinmarketcapKey()
        {
            return ExceptField("coinmarketcapKey");
        }

        public ProjectsInformationQueryBuilder WithCoingeckoKey(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("coingeckoKey", alias, new GraphQlDirective[] { include, skip });
        }

        public ProjectsInformationQueryBuilder ExceptCoingeckoKey()
        {
            return ExceptField("coingeckoKey");
        }

        public ProjectsInformationQueryBuilder WithMainListShow(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("MainListShow", alias, new GraphQlDirective[] { include, skip });
        }

        public ProjectsInformationQueryBuilder ExceptMainListShow()
        {
            return ExceptField("MainListShow");
        }

        public ProjectsInformationQueryBuilder WithFullTokenDistribution(ComponentFullTokenDistributionFullTokenDistributionQueryBuilder componentFullTokenDistributionFullTokenDistributionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("FullTokenDistribution", alias, componentFullTokenDistributionFullTokenDistributionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ProjectsInformationQueryBuilder ExceptFullTokenDistribution()
        {
            return ExceptField("FullTokenDistribution");
        }

        public ProjectsInformationQueryBuilder WithAthroi(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("ATHROI", alias, new GraphQlDirective[] { include, skip });
        }

        public ProjectsInformationQueryBuilder ExceptAthroi()
        {
            return ExceptField("ATHROI");
        }

        public ProjectsInformationQueryBuilder WithChainSetting(ChainSettingQueryBuilder chainSettingQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("chain_setting", alias, chainSettingQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ProjectsInformationQueryBuilder ExceptChainSetting()
        {
            return ExceptField("chain_setting");
        }

        public ProjectsInformationQueryBuilder WithIdoBadge(IdoBadgeQueryBuilder idoBadgeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("ido_badge", alias, idoBadgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ProjectsInformationQueryBuilder ExceptIdoBadge()
        {
            return ExceptField("ido_badge");
        }

        public ProjectsInformationQueryBuilder WithWarningText(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("Warning_Text", alias, new GraphQlDirective[] { include, skip });
        }

        public ProjectsInformationQueryBuilder ExceptWarningText()
        {
            return ExceptField("Warning_Text");
        }

        public ProjectsInformationQueryBuilder WithBlockLocations(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("blockLocations", alias, new GraphQlDirective[] { include, skip });
        }

        public ProjectsInformationQueryBuilder ExceptBlockLocations()
        {
            return ExceptField("blockLocations");
        }

        public ProjectsInformationQueryBuilder WithProjectPhases(ComponentPhaseStartEndAmountQueryBuilder componentPhaseStartEndAmountQueryBuilder, QueryBuilderParameter<ComponentPhaseStartEndAmountFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("ProjectPhases", alias, componentPhaseStartEndAmountQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public ProjectsInformationQueryBuilder ExceptProjectPhases()
        {
            return ExceptField("ProjectPhases");
        }

        public ProjectsInformationQueryBuilder WithOrder(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("Order", alias, new GraphQlDirective[] { include, skip });
        }

        public ProjectsInformationQueryBuilder ExceptOrder()
        {
            return ExceptField("Order");
        }

        public ProjectsInformationQueryBuilder WithCreatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdAt", alias, new GraphQlDirective[] { include, skip });
        }

        public ProjectsInformationQueryBuilder ExceptCreatedAt()
        {
            return ExceptField("createdAt");
        }

        public ProjectsInformationQueryBuilder WithUpdatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("updatedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public ProjectsInformationQueryBuilder ExceptUpdatedAt()
        {
            return ExceptField("updatedAt");
        }

        public ProjectsInformationQueryBuilder WithPublishedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("publishedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public ProjectsInformationQueryBuilder ExceptPublishedAt()
        {
            return ExceptField("publishedAt");
        }
    }

    public partial class ProjectsInformationEntityResponseCollectionQueryBuilder : GraphQlQueryBuilder<ProjectsInformationEntityResponseCollectionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(ProjectsInformationQueryBuilder) },
                new GraphQlFieldMetadata { Name = "pageInfo", IsComplex = true, QueryBuilderType = typeof(PaginationQueryBuilder) }
            };

        protected override string TypeName { get { return "ProjectsInformationEntityResponseCollection"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ProjectsInformationEntityResponseCollectionQueryBuilder WithNodes(ProjectsInformationQueryBuilder projectsInformationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("nodes", alias, projectsInformationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ProjectsInformationEntityResponseCollectionQueryBuilder ExceptNodes()
        {
            return ExceptField("nodes");
        }

        public ProjectsInformationEntityResponseCollectionQueryBuilder WithPageInfo(PaginationQueryBuilder paginationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pageInfo", alias, paginationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ProjectsInformationEntityResponseCollectionQueryBuilder ExceptPageInfo()
        {
            return ExceptField("pageInfo");
        }
    }

    public partial class ProjectsInformationRelationResponseCollectionQueryBuilder : GraphQlQueryBuilder<ProjectsInformationRelationResponseCollectionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(ProjectsInformationQueryBuilder) }
            };

        protected override string TypeName { get { return "ProjectsInformationRelationResponseCollection"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ProjectsInformationRelationResponseCollectionQueryBuilder WithNodes(ProjectsInformationQueryBuilder projectsInformationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("nodes", alias, projectsInformationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ProjectsInformationRelationResponseCollectionQueryBuilder ExceptNodes()
        {
            return ExceptField("nodes");
        }
    }

    public partial class SeasonPassQueryBuilder : GraphQlQueryBuilder<SeasonPassQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "documentId" },
                new GraphQlFieldMetadata { Name = "Wallet" },
                new GraphQlFieldMetadata { Name = "Amount" },
                new GraphQlFieldMetadata { Name = "ValidUntil" },
                new GraphQlFieldMetadata { Name = "Note" },
                new GraphQlFieldMetadata { Name = "createdAt" },
                new GraphQlFieldMetadata { Name = "updatedAt" },
                new GraphQlFieldMetadata { Name = "publishedAt" }
            };

        protected override string TypeName { get { return "SeasonPass"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public SeasonPassQueryBuilder WithDocumentId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("documentId", alias, new GraphQlDirective[] { include, skip });
        }

        public SeasonPassQueryBuilder ExceptDocumentId()
        {
            return ExceptField("documentId");
        }

        public SeasonPassQueryBuilder WithWallet(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("Wallet", alias, new GraphQlDirective[] { include, skip });
        }

        public SeasonPassQueryBuilder ExceptWallet()
        {
            return ExceptField("Wallet");
        }

        public SeasonPassQueryBuilder WithAmount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("Amount", alias, new GraphQlDirective[] { include, skip });
        }

        public SeasonPassQueryBuilder ExceptAmount()
        {
            return ExceptField("Amount");
        }

        public SeasonPassQueryBuilder WithValidUntil(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("ValidUntil", alias, new GraphQlDirective[] { include, skip });
        }

        public SeasonPassQueryBuilder ExceptValidUntil()
        {
            return ExceptField("ValidUntil");
        }

        public SeasonPassQueryBuilder WithNote(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("Note", alias, new GraphQlDirective[] { include, skip });
        }

        public SeasonPassQueryBuilder ExceptNote()
        {
            return ExceptField("Note");
        }

        public SeasonPassQueryBuilder WithCreatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdAt", alias, new GraphQlDirective[] { include, skip });
        }

        public SeasonPassQueryBuilder ExceptCreatedAt()
        {
            return ExceptField("createdAt");
        }

        public SeasonPassQueryBuilder WithUpdatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("updatedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public SeasonPassQueryBuilder ExceptUpdatedAt()
        {
            return ExceptField("updatedAt");
        }

        public SeasonPassQueryBuilder WithPublishedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("publishedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public SeasonPassQueryBuilder ExceptPublishedAt()
        {
            return ExceptField("publishedAt");
        }
    }

    public partial class SeasonPassEntityResponseCollectionQueryBuilder : GraphQlQueryBuilder<SeasonPassEntityResponseCollectionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(SeasonPassQueryBuilder) },
                new GraphQlFieldMetadata { Name = "pageInfo", IsComplex = true, QueryBuilderType = typeof(PaginationQueryBuilder) }
            };

        protected override string TypeName { get { return "SeasonPassEntityResponseCollection"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public SeasonPassEntityResponseCollectionQueryBuilder WithNodes(SeasonPassQueryBuilder seasonPassQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("nodes", alias, seasonPassQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SeasonPassEntityResponseCollectionQueryBuilder ExceptNodes()
        {
            return ExceptField("nodes");
        }

        public SeasonPassEntityResponseCollectionQueryBuilder WithPageInfo(PaginationQueryBuilder paginationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pageInfo", alias, paginationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SeasonPassEntityResponseCollectionQueryBuilder ExceptPageInfo()
        {
            return ExceptField("pageInfo");
        }
    }

    public partial class StakingCoolDownQueryBuilder : GraphQlQueryBuilder<StakingCoolDownQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "documentId" },
                new GraphQlFieldMetadata { Name = "Amount" },
                new GraphQlFieldMetadata { Name = "CoolDownPeriod" },
                new GraphQlFieldMetadata { Name = "type" },
                new GraphQlFieldMetadata { Name = "text" },
                new GraphQlFieldMetadata { Name = "createdAt" },
                new GraphQlFieldMetadata { Name = "updatedAt" },
                new GraphQlFieldMetadata { Name = "publishedAt" }
            };

        protected override string TypeName { get { return "StakingCoolDown"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public StakingCoolDownQueryBuilder WithDocumentId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("documentId", alias, new GraphQlDirective[] { include, skip });
        }

        public StakingCoolDownQueryBuilder ExceptDocumentId()
        {
            return ExceptField("documentId");
        }

        public StakingCoolDownQueryBuilder WithAmount(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("Amount", alias, new GraphQlDirective[] { include, skip });
        }

        public StakingCoolDownQueryBuilder ExceptAmount()
        {
            return ExceptField("Amount");
        }

        public StakingCoolDownQueryBuilder WithCoolDownPeriod(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("CoolDownPeriod", alias, new GraphQlDirective[] { include, skip });
        }

        public StakingCoolDownQueryBuilder ExceptCoolDownPeriod()
        {
            return ExceptField("CoolDownPeriod");
        }

        public StakingCoolDownQueryBuilder WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("type", alias, new GraphQlDirective[] { include, skip });
        }

        public StakingCoolDownQueryBuilder ExceptType()
        {
            return ExceptField("type");
        }

        public StakingCoolDownQueryBuilder WithText(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("text", alias, new GraphQlDirective[] { include, skip });
        }

        public StakingCoolDownQueryBuilder ExceptText()
        {
            return ExceptField("text");
        }

        public StakingCoolDownQueryBuilder WithCreatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdAt", alias, new GraphQlDirective[] { include, skip });
        }

        public StakingCoolDownQueryBuilder ExceptCreatedAt()
        {
            return ExceptField("createdAt");
        }

        public StakingCoolDownQueryBuilder WithUpdatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("updatedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public StakingCoolDownQueryBuilder ExceptUpdatedAt()
        {
            return ExceptField("updatedAt");
        }

        public StakingCoolDownQueryBuilder WithPublishedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("publishedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public StakingCoolDownQueryBuilder ExceptPublishedAt()
        {
            return ExceptField("publishedAt");
        }
    }

    public partial class StakingCoolDownEntityResponseCollectionQueryBuilder : GraphQlQueryBuilder<StakingCoolDownEntityResponseCollectionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(StakingCoolDownQueryBuilder) },
                new GraphQlFieldMetadata { Name = "pageInfo", IsComplex = true, QueryBuilderType = typeof(PaginationQueryBuilder) }
            };

        protected override string TypeName { get { return "StakingCoolDownEntityResponseCollection"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public StakingCoolDownEntityResponseCollectionQueryBuilder WithNodes(StakingCoolDownQueryBuilder stakingCoolDownQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("nodes", alias, stakingCoolDownQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public StakingCoolDownEntityResponseCollectionQueryBuilder ExceptNodes()
        {
            return ExceptField("nodes");
        }

        public StakingCoolDownEntityResponseCollectionQueryBuilder WithPageInfo(PaginationQueryBuilder paginationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pageInfo", alias, paginationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public StakingCoolDownEntityResponseCollectionQueryBuilder ExceptPageInfo()
        {
            return ExceptField("pageInfo");
        }
    }

    public partial class TokenomicQueryBuilder : GraphQlQueryBuilder<TokenomicQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "documentId" },
                new GraphQlFieldMetadata { Name = "List", IsComplex = true, QueryBuilderType = typeof(ComponentChainAddressesOnlyAddressQueryBuilder) },
                new GraphQlFieldMetadata { Name = "PoolxToken" },
                new GraphQlFieldMetadata { Name = "chain_setting", IsComplex = true, QueryBuilderType = typeof(ChainSettingQueryBuilder) },
                new GraphQlFieldMetadata { Name = "MultiCallContractAddress" },
                new GraphQlFieldMetadata { Name = "createdAt" },
                new GraphQlFieldMetadata { Name = "updatedAt" },
                new GraphQlFieldMetadata { Name = "publishedAt" }
            };

        protected override string TypeName { get { return "Tokenomic"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public TokenomicQueryBuilder WithDocumentId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("documentId", alias, new GraphQlDirective[] { include, skip });
        }

        public TokenomicQueryBuilder ExceptDocumentId()
        {
            return ExceptField("documentId");
        }

        public TokenomicQueryBuilder WithList(ComponentChainAddressesOnlyAddressQueryBuilder componentChainAddressesOnlyAddressQueryBuilder, QueryBuilderParameter<ComponentChainAddressesOnlyAddressFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("List", alias, componentChainAddressesOnlyAddressQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public TokenomicQueryBuilder ExceptList()
        {
            return ExceptField("List");
        }

        public TokenomicQueryBuilder WithPoolxToken(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("PoolxToken", alias, new GraphQlDirective[] { include, skip });
        }

        public TokenomicQueryBuilder ExceptPoolxToken()
        {
            return ExceptField("PoolxToken");
        }

        public TokenomicQueryBuilder WithChainSetting(ChainSettingQueryBuilder chainSettingQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("chain_setting", alias, chainSettingQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public TokenomicQueryBuilder ExceptChainSetting()
        {
            return ExceptField("chain_setting");
        }

        public TokenomicQueryBuilder WithMultiCallContractAddress(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("MultiCallContractAddress", alias, new GraphQlDirective[] { include, skip });
        }

        public TokenomicQueryBuilder ExceptMultiCallContractAddress()
        {
            return ExceptField("MultiCallContractAddress");
        }

        public TokenomicQueryBuilder WithCreatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdAt", alias, new GraphQlDirective[] { include, skip });
        }

        public TokenomicQueryBuilder ExceptCreatedAt()
        {
            return ExceptField("createdAt");
        }

        public TokenomicQueryBuilder WithUpdatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("updatedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public TokenomicQueryBuilder ExceptUpdatedAt()
        {
            return ExceptField("updatedAt");
        }

        public TokenomicQueryBuilder WithPublishedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("publishedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public TokenomicQueryBuilder ExceptPublishedAt()
        {
            return ExceptField("publishedAt");
        }
    }

    public partial class TradeContractQueryBuilder : GraphQlQueryBuilder<TradeContractQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "documentId" },
                new GraphQlFieldMetadata { Name = "Name" },
                new GraphQlFieldMetadata { Name = "AdressList", IsComplex = true, QueryBuilderType = typeof(ComponentTokenomicsListOfStringsQueryBuilder) },
                new GraphQlFieldMetadata { Name = "createdAt" },
                new GraphQlFieldMetadata { Name = "updatedAt" },
                new GraphQlFieldMetadata { Name = "publishedAt" }
            };

        protected override string TypeName { get { return "TradeContract"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public TradeContractQueryBuilder WithDocumentId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("documentId", alias, new GraphQlDirective[] { include, skip });
        }

        public TradeContractQueryBuilder ExceptDocumentId()
        {
            return ExceptField("documentId");
        }

        public TradeContractQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("Name", alias, new GraphQlDirective[] { include, skip });
        }

        public TradeContractQueryBuilder ExceptName()
        {
            return ExceptField("Name");
        }

        public TradeContractQueryBuilder WithAdressList(ComponentTokenomicsListOfStringsQueryBuilder componentTokenomicsListOfStringsQueryBuilder, QueryBuilderParameter<ComponentTokenomicsListOfStringsFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            return WithObjectField("AdressList", alias, componentTokenomicsListOfStringsQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public TradeContractQueryBuilder ExceptAdressList()
        {
            return ExceptField("AdressList");
        }

        public TradeContractQueryBuilder WithCreatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdAt", alias, new GraphQlDirective[] { include, skip });
        }

        public TradeContractQueryBuilder ExceptCreatedAt()
        {
            return ExceptField("createdAt");
        }

        public TradeContractQueryBuilder WithUpdatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("updatedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public TradeContractQueryBuilder ExceptUpdatedAt()
        {
            return ExceptField("updatedAt");
        }

        public TradeContractQueryBuilder WithPublishedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("publishedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public TradeContractQueryBuilder ExceptPublishedAt()
        {
            return ExceptField("publishedAt");
        }
    }

    public partial class TradeContractEntityResponseCollectionQueryBuilder : GraphQlQueryBuilder<TradeContractEntityResponseCollectionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(TradeContractQueryBuilder) },
                new GraphQlFieldMetadata { Name = "pageInfo", IsComplex = true, QueryBuilderType = typeof(PaginationQueryBuilder) }
            };

        protected override string TypeName { get { return "TradeContractEntityResponseCollection"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public TradeContractEntityResponseCollectionQueryBuilder WithNodes(TradeContractQueryBuilder tradeContractQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("nodes", alias, tradeContractQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public TradeContractEntityResponseCollectionQueryBuilder ExceptNodes()
        {
            return ExceptField("nodes");
        }

        public TradeContractEntityResponseCollectionQueryBuilder WithPageInfo(PaginationQueryBuilder paginationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pageInfo", alias, paginationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public TradeContractEntityResponseCollectionQueryBuilder ExceptPageInfo()
        {
            return ExceptField("pageInfo");
        }
    }

    public partial class VaultFaqQueryBuilder : GraphQlQueryBuilder<VaultFaqQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "documentId" },
                new GraphQlFieldMetadata { Name = "ShortText" },
                new GraphQlFieldMetadata { Name = "LongText" },
                new GraphQlFieldMetadata { Name = "createdAt" },
                new GraphQlFieldMetadata { Name = "updatedAt" },
                new GraphQlFieldMetadata { Name = "publishedAt" }
            };

        protected override string TypeName { get { return "VaultFaq"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public VaultFaqQueryBuilder WithDocumentId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("documentId", alias, new GraphQlDirective[] { include, skip });
        }

        public VaultFaqQueryBuilder ExceptDocumentId()
        {
            return ExceptField("documentId");
        }

        public VaultFaqQueryBuilder WithShortText(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("ShortText", alias, new GraphQlDirective[] { include, skip });
        }

        public VaultFaqQueryBuilder ExceptShortText()
        {
            return ExceptField("ShortText");
        }

        public VaultFaqQueryBuilder WithLongText(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("LongText", alias, new GraphQlDirective[] { include, skip });
        }

        public VaultFaqQueryBuilder ExceptLongText()
        {
            return ExceptField("LongText");
        }

        public VaultFaqQueryBuilder WithCreatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdAt", alias, new GraphQlDirective[] { include, skip });
        }

        public VaultFaqQueryBuilder ExceptCreatedAt()
        {
            return ExceptField("createdAt");
        }

        public VaultFaqQueryBuilder WithUpdatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("updatedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public VaultFaqQueryBuilder ExceptUpdatedAt()
        {
            return ExceptField("updatedAt");
        }

        public VaultFaqQueryBuilder WithPublishedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("publishedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public VaultFaqQueryBuilder ExceptPublishedAt()
        {
            return ExceptField("publishedAt");
        }
    }

    public partial class VaultFaqEntityResponseCollectionQueryBuilder : GraphQlQueryBuilder<VaultFaqEntityResponseCollectionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(VaultFaqQueryBuilder) },
                new GraphQlFieldMetadata { Name = "pageInfo", IsComplex = true, QueryBuilderType = typeof(PaginationQueryBuilder) }
            };

        protected override string TypeName { get { return "VaultFaqEntityResponseCollection"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public VaultFaqEntityResponseCollectionQueryBuilder WithNodes(VaultFaqQueryBuilder vaultFaqQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("nodes", alias, vaultFaqQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public VaultFaqEntityResponseCollectionQueryBuilder ExceptNodes()
        {
            return ExceptField("nodes");
        }

        public VaultFaqEntityResponseCollectionQueryBuilder WithPageInfo(PaginationQueryBuilder paginationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pageInfo", alias, paginationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public VaultFaqEntityResponseCollectionQueryBuilder ExceptPageInfo()
        {
            return ExceptField("pageInfo");
        }
    }

    public partial class GenericMorphQueryBuilder : GraphQlQueryBuilder<GenericMorphQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata = new GraphQlFieldMetadata[0];

        public GenericMorphQueryBuilder()
        {
            WithTypeName();
        }

        protected override string TypeName { get { return "GenericMorph"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public GenericMorphQueryBuilder WithComponentVisualTextVisualTextFragment(ComponentVisualTextVisualTextQueryBuilder componentVisualTextVisualTextQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(componentVisualTextVisualTextQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericMorphQueryBuilder WithComponentVersionVersionFragment(ComponentVersionVersionQueryBuilder componentVersionVersionQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(componentVersionVersionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericMorphQueryBuilder WithComponentUploadPoolUploadPoolFragment(ComponentUploadPoolUploadPoolQueryBuilder componentUploadPoolUploadPoolQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(componentUploadPoolUploadPoolQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericMorphQueryBuilder WithComponentTokenomicsTokenomicsFragment(ComponentTokenomicsTokenomicsQueryBuilder componentTokenomicsTokenomicsQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(componentTokenomicsTokenomicsQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericMorphQueryBuilder WithComponentTokenomicsListOfStringsFragment(ComponentTokenomicsListOfStringsQueryBuilder componentTokenomicsListOfStringsQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(componentTokenomicsListOfStringsQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericMorphQueryBuilder WithComponentTokenDistributionTokenDistributionFragment(ComponentTokenDistributionTokenDistributionQueryBuilder componentTokenDistributionTokenDistributionQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(componentTokenDistributionTokenDistributionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericMorphQueryBuilder WithComponentSyntheticZoneSynteticFragment(ComponentSyntheticZoneSynteticQueryBuilder componentSyntheticZoneSynteticQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(componentSyntheticZoneSynteticQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericMorphQueryBuilder WithComponentSmartLinksSmartLinksFragment(ComponentSmartLinksSmartLinksQueryBuilder componentSmartLinksSmartLinksQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(componentSmartLinksSmartLinksQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericMorphQueryBuilder WithComponentSimpleUrlSimpleUrlFragment(ComponentSimpleUrlSimpleUrlQueryBuilder componentSimpleUrlSimpleUrlQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(componentSimpleUrlSimpleUrlQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericMorphQueryBuilder WithComponentSectionSectionFragment(ComponentSectionSectionQueryBuilder componentSectionSectionQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(componentSectionSectionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericMorphQueryBuilder WithComponentOverviewOverviewFragment(ComponentOverviewOverviewQueryBuilder componentOverviewOverviewQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(componentOverviewOverviewQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericMorphQueryBuilder WithComponentPhaseStartEndAmountFragment(ComponentPhaseStartEndAmountQueryBuilder componentPhaseStartEndAmountQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(componentPhaseStartEndAmountQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericMorphQueryBuilder WithComponentIconTextIconTextFragment(ComponentIconTextIconTextQueryBuilder componentIconTextIconTextQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(componentIconTextIconTextQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericMorphQueryBuilder WithComponentHtmlColorTextHtmlColorTextFragment(ComponentHtmlColorTextHtmlColorTextQueryBuilder componentHtmlColorTextHtmlColorTextQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(componentHtmlColorTextHtmlColorTextQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericMorphQueryBuilder WithComponentMainCtaMainCtaFragment(ComponentMainCtaMainCtaQueryBuilder componentMainCtaMainCtaQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(componentMainCtaMainCtaQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericMorphQueryBuilder WithComponentHeaderSimpleUrlHeaderSimpleUrlFragment(ComponentHeaderSimpleUrlHeaderSimpleUrlQueryBuilder componentHeaderSimpleUrlHeaderSimpleUrlQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(componentHeaderSimpleUrlHeaderSimpleUrlQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericMorphQueryBuilder WithComponentHighlightsHighlightsFragment(ComponentHighlightsHighlightsQueryBuilder componentHighlightsHighlightsQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(componentHighlightsHighlightsQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericMorphQueryBuilder WithComponentDictionaryLinksFragment(ComponentDictionaryLinksQueryBuilder componentDictionaryLinksQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(componentDictionaryLinksQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericMorphQueryBuilder WithComponentContractOnChainContractOnChainFragment(ComponentContractOnChainContractOnChainQueryBuilder componentContractOnChainContractOnChainQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(componentContractOnChainContractOnChainQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericMorphQueryBuilder WithComponentCompilerSettingCompilerSettingsFragment(ComponentCompilerSettingCompilerSettingsQueryBuilder componentCompilerSettingCompilerSettingsQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(componentCompilerSettingCompilerSettingsQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericMorphQueryBuilder WithComponentColorIconColorIconFragment(ComponentColorIconColorIconQueryBuilder componentColorIconColorIconQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(componentColorIconColorIconQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericMorphQueryBuilder WithComponentInvestorsInvestorsFragment(ComponentInvestorsInvestorsQueryBuilder componentInvestorsInvestorsQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(componentInvestorsInvestorsQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericMorphQueryBuilder WithComponentChainAddressesOnlyAddressFragment(ComponentChainAddressesOnlyAddressQueryBuilder componentChainAddressesOnlyAddressQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(componentChainAddressesOnlyAddressQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericMorphQueryBuilder WithComponentChainAddressesChainAddressesFragment(ComponentChainAddressesChainAddressesQueryBuilder componentChainAddressesChainAddressesQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(componentChainAddressesChainAddressesQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericMorphQueryBuilder WithComponentFullTokenDistributionFullTokenDistributionFragment(ComponentFullTokenDistributionFullTokenDistributionQueryBuilder componentFullTokenDistributionFullTokenDistributionQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(componentFullTokenDistributionFullTokenDistributionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericMorphQueryBuilder WithUploadFileFragment(UploadFileQueryBuilder uploadFileQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(uploadFileQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericMorphQueryBuilder WithI18NLocaleFragment(I18NLocaleQueryBuilder i18NLocaleQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(i18NLocaleQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericMorphQueryBuilder WithReviewWorkflowsWorkflowFragment(ReviewWorkflowsWorkflowQueryBuilder reviewWorkflowsWorkflowQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(reviewWorkflowsWorkflowQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericMorphQueryBuilder WithReviewWorkflowsWorkflowStageFragment(ReviewWorkflowsWorkflowStageQueryBuilder reviewWorkflowsWorkflowStageQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(reviewWorkflowsWorkflowStageQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericMorphQueryBuilder WithUsersPermissionsPermissionFragment(UsersPermissionsPermissionQueryBuilder usersPermissionsPermissionQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(usersPermissionsPermissionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericMorphQueryBuilder WithUsersPermissionsRoleFragment(UsersPermissionsRoleQueryBuilder usersPermissionsRoleQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(usersPermissionsRoleQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericMorphQueryBuilder WithUsersPermissionsUserFragment(UsersPermissionsUserQueryBuilder usersPermissionsUserQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(usersPermissionsUserQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericMorphQueryBuilder WithAboutUsFragment(AboutUsQueryBuilder aboutUsQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(aboutUsQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericMorphQueryBuilder WithAccountFragment(AccountQueryBuilder accountQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(accountQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericMorphQueryBuilder WithAuthAdministratorFragment(AuthAdministratorQueryBuilder authAdministratorQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(authAdministratorQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericMorphQueryBuilder WithAuthAdministratorsResourceFragment(AuthAdministratorsResourceQueryBuilder authAdministratorsResourceQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(authAdministratorsResourceQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericMorphQueryBuilder WithAuthResourceFragment(AuthResourceQueryBuilder authResourceQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(authResourceQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericMorphQueryBuilder WithAuthRoleFragment(AuthRoleQueryBuilder authRoleQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(authRoleQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericMorphQueryBuilder WithAuthUserFragment(AuthUserQueryBuilder authUserQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(authUserQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericMorphQueryBuilder WithAutoSignUpFragment(AutoSignUpQueryBuilder autoSignUpQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(autoSignUpQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericMorphQueryBuilder WithBoostFragment(BoostQueryBuilder boostQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(boostQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericMorphQueryBuilder WithBuyPoolzFragment(BuyPoolzQueryBuilder buyPoolzQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(buyPoolzQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericMorphQueryBuilder WithBuyWithFragment(BuyWithQueryBuilder buyWithQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(buyWithQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericMorphQueryBuilder WithChainFragment(ChainQueryBuilder chainQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(chainQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericMorphQueryBuilder WithChainSettingFragment(ChainSettingQueryBuilder chainSettingQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(chainSettingQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericMorphQueryBuilder WithConditionFragment(ConditionQueryBuilder conditionQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(conditionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericMorphQueryBuilder WithContractFragment(ContractQueryBuilder contractQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(contractQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericMorphQueryBuilder WithContractTypeFragment(ContractTypeQueryBuilder contractTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(contractTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericMorphQueryBuilder WithContractsOnChainFragment(ContractsOnChainQueryBuilder contractsOnChainQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(contractsOnChainQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericMorphQueryBuilder WithCoverFragment(CoverQueryBuilder coverQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(coverQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericMorphQueryBuilder WithDefaultWalletFragment(DefaultWalletQueryBuilder defaultWalletQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(defaultWalletQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericMorphQueryBuilder WithEvmVersionFragment(EvmVersionQueryBuilder evmVersionQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(evmVersionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericMorphQueryBuilder WithFooterFragment(FooterQueryBuilder footerQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(footerQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericMorphQueryBuilder WithGrowFragment(GrowQueryBuilder growQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(growQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericMorphQueryBuilder WithGrowBadgeFragment(GrowBadgeQueryBuilder growBadgeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(growBadgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericMorphQueryBuilder WithHeaderFragment(HeaderQueryBuilder headerQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(headerQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericMorphQueryBuilder WithIdoBadgeFragment(IdoBadgeQueryBuilder idoBadgeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(idoBadgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericMorphQueryBuilder WithIgnoreLeaderBoardWalletFragment(IgnoreLeaderBoardWalletQueryBuilder ignoreLeaderBoardWalletQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(ignoreLeaderBoardWalletQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericMorphQueryBuilder WithInvestTermFragment(InvestTermQueryBuilder investTermQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(investTermQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericMorphQueryBuilder WithInvestorFragment(InvestorQueryBuilder investorQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(investorQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericMorphQueryBuilder WithLatestTypeFragment(LatestTypeQueryBuilder latestTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(latestTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericMorphQueryBuilder WithLinkTypeFragment(LinkTypeQueryBuilder linkTypeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(linkTypeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericMorphQueryBuilder WithLockPoolzTermFragment(LockPoolzTermQueryBuilder lockPoolzTermQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(lockPoolzTermQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericMorphQueryBuilder WithLockTokenWhitelistFragment(LockTokenWhitelistQueryBuilder lockTokenWhitelistQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(lockTokenWhitelistQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericMorphQueryBuilder WithMainFragment(MainQueryBuilder mainQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(mainQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericMorphQueryBuilder WithMarketCapBadgeFragment(MarketCapBadgeQueryBuilder marketCapBadgeQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(marketCapBadgeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericMorphQueryBuilder WithMediaKitFragment(MediaKitQueryBuilder mediaKitQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(mediaKitQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericMorphQueryBuilder WithNonEvmChainFragment(NonEvmChainQueryBuilder nonEvmChainQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(nonEvmChainQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericMorphQueryBuilder WithOpenGrantFragment(OpenGrantQueryBuilder openGrantQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(openGrantQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericMorphQueryBuilder WithOurPartnerFragment(OurPartnerQueryBuilder ourPartnerQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(ourPartnerQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericMorphQueryBuilder WithPageInfoFragment(PageInfoQueryBuilder pageInfoQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(pageInfoQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericMorphQueryBuilder WithPoolzBoutiqueFragment(PoolzBoutiqueQueryBuilder poolzBoutiqueQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(poolzBoutiqueQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericMorphQueryBuilder WithPragmaVersionFragment(PragmaVersionQueryBuilder pragmaVersionQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(pragmaVersionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericMorphQueryBuilder WithPrivacyFragment(PrivacyQueryBuilder privacyQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(privacyQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericMorphQueryBuilder WithProjectsInformationFragment(ProjectsInformationQueryBuilder projectsInformationQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(projectsInformationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericMorphQueryBuilder WithSeasonPassFragment(SeasonPassQueryBuilder seasonPassQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(seasonPassQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericMorphQueryBuilder WithStakingCoolDownFragment(StakingCoolDownQueryBuilder stakingCoolDownQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(stakingCoolDownQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericMorphQueryBuilder WithTokenomicFragment(TokenomicQueryBuilder tokenomicQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(tokenomicQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericMorphQueryBuilder WithTradeContractFragment(TradeContractQueryBuilder tradeContractQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(tradeContractQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public GenericMorphQueryBuilder WithVaultFaqFragment(VaultFaqQueryBuilder vaultFaqQueryBuilder, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithFragment(vaultFaqQueryBuilder, new GraphQlDirective[] { include, skip });
        }
    }

    public partial class UsersPermissionsMeQueryBuilder : GraphQlQueryBuilder<UsersPermissionsMeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "documentId" },
                new GraphQlFieldMetadata { Name = "username" },
                new GraphQlFieldMetadata { Name = "email" },
                new GraphQlFieldMetadata { Name = "confirmed" },
                new GraphQlFieldMetadata { Name = "blocked" },
                new GraphQlFieldMetadata { Name = "role", IsComplex = true, QueryBuilderType = typeof(UsersPermissionsMeRoleQueryBuilder) }
            };

        protected override string TypeName { get { return "UsersPermissionsMe"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public UsersPermissionsMeQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public UsersPermissionsMeQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public UsersPermissionsMeQueryBuilder WithDocumentId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("documentId", alias, new GraphQlDirective[] { include, skip });
        }

        public UsersPermissionsMeQueryBuilder ExceptDocumentId()
        {
            return ExceptField("documentId");
        }

        public UsersPermissionsMeQueryBuilder WithUsername(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("username", alias, new GraphQlDirective[] { include, skip });
        }

        public UsersPermissionsMeQueryBuilder ExceptUsername()
        {
            return ExceptField("username");
        }

        public UsersPermissionsMeQueryBuilder WithEmail(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("email", alias, new GraphQlDirective[] { include, skip });
        }

        public UsersPermissionsMeQueryBuilder ExceptEmail()
        {
            return ExceptField("email");
        }

        public UsersPermissionsMeQueryBuilder WithConfirmed(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("confirmed", alias, new GraphQlDirective[] { include, skip });
        }

        public UsersPermissionsMeQueryBuilder ExceptConfirmed()
        {
            return ExceptField("confirmed");
        }

        public UsersPermissionsMeQueryBuilder WithBlocked(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("blocked", alias, new GraphQlDirective[] { include, skip });
        }

        public UsersPermissionsMeQueryBuilder ExceptBlocked()
        {
            return ExceptField("blocked");
        }

        public UsersPermissionsMeQueryBuilder WithRole(UsersPermissionsMeRoleQueryBuilder usersPermissionsMeRoleQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("role", alias, usersPermissionsMeRoleQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public UsersPermissionsMeQueryBuilder ExceptRole()
        {
            return ExceptField("role");
        }
    }

    public partial class UsersPermissionsMeRoleQueryBuilder : GraphQlQueryBuilder<UsersPermissionsMeRoleQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "description" },
                new GraphQlFieldMetadata { Name = "type" }
            };

        protected override string TypeName { get { return "UsersPermissionsMeRole"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public UsersPermissionsMeRoleQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public UsersPermissionsMeRoleQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public UsersPermissionsMeRoleQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public UsersPermissionsMeRoleQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public UsersPermissionsMeRoleQueryBuilder WithDescription(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("description", alias, new GraphQlDirective[] { include, skip });
        }

        public UsersPermissionsMeRoleQueryBuilder ExceptDescription()
        {
            return ExceptField("description");
        }

        public UsersPermissionsMeRoleQueryBuilder WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("type", alias, new GraphQlDirective[] { include, skip });
        }

        public UsersPermissionsMeRoleQueryBuilder ExceptType()
        {
            return ExceptField("type");
        }
    }

    public partial class UsersPermissionsPasswordPayloadQueryBuilder : GraphQlQueryBuilder<UsersPermissionsPasswordPayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "ok" }
            };

        protected override string TypeName { get { return "UsersPermissionsPasswordPayload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public UsersPermissionsPasswordPayloadQueryBuilder WithOk(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("ok", alias, new GraphQlDirective[] { include, skip });
        }

        public UsersPermissionsPasswordPayloadQueryBuilder ExceptOk()
        {
            return ExceptField("ok");
        }
    }

    public partial class UsersPermissionsLoginPayloadQueryBuilder : GraphQlQueryBuilder<UsersPermissionsLoginPayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "jwt" },
                new GraphQlFieldMetadata { Name = "user", IsComplex = true, QueryBuilderType = typeof(UsersPermissionsMeQueryBuilder) }
            };

        protected override string TypeName { get { return "UsersPermissionsLoginPayload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public UsersPermissionsLoginPayloadQueryBuilder WithJwt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("jwt", alias, new GraphQlDirective[] { include, skip });
        }

        public UsersPermissionsLoginPayloadQueryBuilder ExceptJwt()
        {
            return ExceptField("jwt");
        }

        public UsersPermissionsLoginPayloadQueryBuilder WithUser(UsersPermissionsMeQueryBuilder usersPermissionsMeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("user", alias, usersPermissionsMeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public UsersPermissionsLoginPayloadQueryBuilder ExceptUser()
        {
            return ExceptField("user");
        }
    }

    public partial class UsersPermissionsCreateRolePayloadQueryBuilder : GraphQlQueryBuilder<UsersPermissionsCreateRolePayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "ok" }
            };

        protected override string TypeName { get { return "UsersPermissionsCreateRolePayload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public UsersPermissionsCreateRolePayloadQueryBuilder WithOk(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("ok", alias, new GraphQlDirective[] { include, skip });
        }

        public UsersPermissionsCreateRolePayloadQueryBuilder ExceptOk()
        {
            return ExceptField("ok");
        }
    }

    public partial class UsersPermissionsUpdateRolePayloadQueryBuilder : GraphQlQueryBuilder<UsersPermissionsUpdateRolePayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "ok" }
            };

        protected override string TypeName { get { return "UsersPermissionsUpdateRolePayload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public UsersPermissionsUpdateRolePayloadQueryBuilder WithOk(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("ok", alias, new GraphQlDirective[] { include, skip });
        }

        public UsersPermissionsUpdateRolePayloadQueryBuilder ExceptOk()
        {
            return ExceptField("ok");
        }
    }

    public partial class UsersPermissionsDeleteRolePayloadQueryBuilder : GraphQlQueryBuilder<UsersPermissionsDeleteRolePayloadQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "ok" }
            };

        protected override string TypeName { get { return "UsersPermissionsDeleteRolePayload"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public UsersPermissionsDeleteRolePayloadQueryBuilder WithOk(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("ok", alias, new GraphQlDirective[] { include, skip });
        }

        public UsersPermissionsDeleteRolePayloadQueryBuilder ExceptOk()
        {
            return ExceptField("ok");
        }
    }

    public partial class QueryQueryBuilder : GraphQlQueryBuilder<QueryQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "uploadFile", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(UploadFileQueryBuilder) },
                new GraphQlFieldMetadata { Name = "uploadFiles_connection", IsComplex = true, QueryBuilderType = typeof(UploadFileEntityResponseCollectionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "uploadFiles", IsComplex = true, QueryBuilderType = typeof(UploadFileQueryBuilder) },
                new GraphQlFieldMetadata { Name = "i18NLocale", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(I18NLocaleQueryBuilder) },
                new GraphQlFieldMetadata { Name = "i18NLocales_connection", IsComplex = true, QueryBuilderType = typeof(I18NLocaleEntityResponseCollectionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "i18NLocales", IsComplex = true, QueryBuilderType = typeof(I18NLocaleQueryBuilder) },
                new GraphQlFieldMetadata { Name = "reviewWorkflowsWorkflow", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(ReviewWorkflowsWorkflowQueryBuilder) },
                new GraphQlFieldMetadata { Name = "reviewWorkflowsWorkflows_connection", IsComplex = true, QueryBuilderType = typeof(ReviewWorkflowsWorkflowEntityResponseCollectionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "reviewWorkflowsWorkflows", IsComplex = true, QueryBuilderType = typeof(ReviewWorkflowsWorkflowQueryBuilder) },
                new GraphQlFieldMetadata { Name = "reviewWorkflowsWorkflowStage", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(ReviewWorkflowsWorkflowStageQueryBuilder) },
                new GraphQlFieldMetadata { Name = "reviewWorkflowsWorkflowStages_connection", IsComplex = true, QueryBuilderType = typeof(ReviewWorkflowsWorkflowStageEntityResponseCollectionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "reviewWorkflowsWorkflowStages", IsComplex = true, QueryBuilderType = typeof(ReviewWorkflowsWorkflowStageQueryBuilder) },
                new GraphQlFieldMetadata { Name = "usersPermissionsRole", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(UsersPermissionsRoleQueryBuilder) },
                new GraphQlFieldMetadata { Name = "usersPermissionsRoles_connection", IsComplex = true, QueryBuilderType = typeof(UsersPermissionsRoleEntityResponseCollectionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "usersPermissionsRoles", IsComplex = true, QueryBuilderType = typeof(UsersPermissionsRoleQueryBuilder) },
                new GraphQlFieldMetadata { Name = "usersPermissionsUser", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(UsersPermissionsUserQueryBuilder) },
                new GraphQlFieldMetadata { Name = "usersPermissionsUsers_connection", IsComplex = true, QueryBuilderType = typeof(UsersPermissionsUserEntityResponseCollectionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "usersPermissionsUsers", IsComplex = true, QueryBuilderType = typeof(UsersPermissionsUserQueryBuilder) },
                new GraphQlFieldMetadata { Name = "aboutUs", IsComplex = true, QueryBuilderType = typeof(AboutUsQueryBuilder) },
                new GraphQlFieldMetadata { Name = "account", IsComplex = true, QueryBuilderType = typeof(AccountQueryBuilder) },
                new GraphQlFieldMetadata { Name = "authAdministrator", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(AuthAdministratorQueryBuilder) },
                new GraphQlFieldMetadata { Name = "authAdministrators_connection", IsComplex = true, QueryBuilderType = typeof(AuthAdministratorEntityResponseCollectionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "authAdministrators", IsComplex = true, QueryBuilderType = typeof(AuthAdministratorQueryBuilder) },
                new GraphQlFieldMetadata { Name = "authAdministratorsResource", IsComplex = true, QueryBuilderType = typeof(AuthAdministratorsResourceQueryBuilder) },
                new GraphQlFieldMetadata { Name = "authResource", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(AuthResourceQueryBuilder) },
                new GraphQlFieldMetadata { Name = "authResources_connection", IsComplex = true, QueryBuilderType = typeof(AuthResourceEntityResponseCollectionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "authResources", IsComplex = true, QueryBuilderType = typeof(AuthResourceQueryBuilder) },
                new GraphQlFieldMetadata { Name = "authRole", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(AuthRoleQueryBuilder) },
                new GraphQlFieldMetadata { Name = "authRoles_connection", IsComplex = true, QueryBuilderType = typeof(AuthRoleEntityResponseCollectionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "authRoles", IsComplex = true, QueryBuilderType = typeof(AuthRoleQueryBuilder) },
                new GraphQlFieldMetadata { Name = "authUser", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(AuthUserQueryBuilder) },
                new GraphQlFieldMetadata { Name = "authUsers_connection", IsComplex = true, QueryBuilderType = typeof(AuthUserEntityResponseCollectionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "authUsers", IsComplex = true, QueryBuilderType = typeof(AuthUserQueryBuilder) },
                new GraphQlFieldMetadata { Name = "autoSignUp", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(AutoSignUpQueryBuilder) },
                new GraphQlFieldMetadata { Name = "autoSignUps_connection", IsComplex = true, QueryBuilderType = typeof(AutoSignUpEntityResponseCollectionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "autoSignUps", IsComplex = true, QueryBuilderType = typeof(AutoSignUpQueryBuilder) },
                new GraphQlFieldMetadata { Name = "boost", IsComplex = true, QueryBuilderType = typeof(BoostQueryBuilder) },
                new GraphQlFieldMetadata { Name = "buyPoolz", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(BuyPoolzQueryBuilder) },
                new GraphQlFieldMetadata { Name = "buyPoolzs_connection", IsComplex = true, QueryBuilderType = typeof(BuyPoolzEntityResponseCollectionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "buyPoolzs", IsComplex = true, QueryBuilderType = typeof(BuyPoolzQueryBuilder) },
                new GraphQlFieldMetadata { Name = "buyWith", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(BuyWithQueryBuilder) },
                new GraphQlFieldMetadata { Name = "buyWiths_connection", IsComplex = true, QueryBuilderType = typeof(BuyWithEntityResponseCollectionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "buyWiths", IsComplex = true, QueryBuilderType = typeof(BuyWithQueryBuilder) },
                new GraphQlFieldMetadata { Name = "chain", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(ChainQueryBuilder) },
                new GraphQlFieldMetadata { Name = "chains_connection", IsComplex = true, QueryBuilderType = typeof(ChainEntityResponseCollectionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "chains", IsComplex = true, QueryBuilderType = typeof(ChainQueryBuilder) },
                new GraphQlFieldMetadata { Name = "chainSetting", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(ChainSettingQueryBuilder) },
                new GraphQlFieldMetadata { Name = "chainSettings_connection", IsComplex = true, QueryBuilderType = typeof(ChainSettingEntityResponseCollectionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "chainSettings", IsComplex = true, QueryBuilderType = typeof(ChainSettingQueryBuilder) },
                new GraphQlFieldMetadata { Name = "condition", IsComplex = true, QueryBuilderType = typeof(ConditionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "contract", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(ContractQueryBuilder) },
                new GraphQlFieldMetadata { Name = "contracts_connection", IsComplex = true, QueryBuilderType = typeof(ContractEntityResponseCollectionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "contracts", IsComplex = true, QueryBuilderType = typeof(ContractQueryBuilder) },
                new GraphQlFieldMetadata { Name = "contractType", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(ContractTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "contractTypes_connection", IsComplex = true, QueryBuilderType = typeof(ContractTypeEntityResponseCollectionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "contractTypes", IsComplex = true, QueryBuilderType = typeof(ContractTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "contractsOnChain", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(ContractsOnChainQueryBuilder) },
                new GraphQlFieldMetadata { Name = "contractsOnChains_connection", IsComplex = true, QueryBuilderType = typeof(ContractsOnChainEntityResponseCollectionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "contractsOnChains", IsComplex = true, QueryBuilderType = typeof(ContractsOnChainQueryBuilder) },
                new GraphQlFieldMetadata { Name = "cover", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(CoverQueryBuilder) },
                new GraphQlFieldMetadata { Name = "covers_connection", IsComplex = true, QueryBuilderType = typeof(CoverEntityResponseCollectionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "covers", IsComplex = true, QueryBuilderType = typeof(CoverQueryBuilder) },
                new GraphQlFieldMetadata { Name = "defaultWallet", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(DefaultWalletQueryBuilder) },
                new GraphQlFieldMetadata { Name = "defaultWallets_connection", IsComplex = true, QueryBuilderType = typeof(DefaultWalletEntityResponseCollectionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "defaultWallets", IsComplex = true, QueryBuilderType = typeof(DefaultWalletQueryBuilder) },
                new GraphQlFieldMetadata { Name = "evmVersion", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(EvmVersionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "evmVersions_connection", IsComplex = true, QueryBuilderType = typeof(EvmVersionEntityResponseCollectionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "evmVersions", IsComplex = true, QueryBuilderType = typeof(EvmVersionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "footer", IsComplex = true, QueryBuilderType = typeof(FooterQueryBuilder) },
                new GraphQlFieldMetadata { Name = "grow", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(GrowQueryBuilder) },
                new GraphQlFieldMetadata { Name = "grows_connection", IsComplex = true, QueryBuilderType = typeof(GrowEntityResponseCollectionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "grows", IsComplex = true, QueryBuilderType = typeof(GrowQueryBuilder) },
                new GraphQlFieldMetadata { Name = "growBadge", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(GrowBadgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "growBadges_connection", IsComplex = true, QueryBuilderType = typeof(GrowBadgeEntityResponseCollectionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "growBadges", IsComplex = true, QueryBuilderType = typeof(GrowBadgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "header", IsComplex = true, QueryBuilderType = typeof(HeaderQueryBuilder) },
                new GraphQlFieldMetadata { Name = "idoBadge", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(IdoBadgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "idoBadges_connection", IsComplex = true, QueryBuilderType = typeof(IdoBadgeEntityResponseCollectionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "idoBadges", IsComplex = true, QueryBuilderType = typeof(IdoBadgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "ignoreLeaderBoardWallet", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(IgnoreLeaderBoardWalletQueryBuilder) },
                new GraphQlFieldMetadata { Name = "ignoreLeaderBoardWallets_connection", IsComplex = true, QueryBuilderType = typeof(IgnoreLeaderBoardWalletEntityResponseCollectionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "ignoreLeaderBoardWallets", IsComplex = true, QueryBuilderType = typeof(IgnoreLeaderBoardWalletQueryBuilder) },
                new GraphQlFieldMetadata { Name = "investTerm", IsComplex = true, QueryBuilderType = typeof(InvestTermQueryBuilder) },
                new GraphQlFieldMetadata { Name = "investor", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(InvestorQueryBuilder) },
                new GraphQlFieldMetadata { Name = "investors_connection", IsComplex = true, QueryBuilderType = typeof(InvestorEntityResponseCollectionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "investors", IsComplex = true, QueryBuilderType = typeof(InvestorQueryBuilder) },
                new GraphQlFieldMetadata { Name = "latestType", IsComplex = true, QueryBuilderType = typeof(LatestTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "linkType", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(LinkTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "linkTypes_connection", IsComplex = true, QueryBuilderType = typeof(LinkTypeEntityResponseCollectionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "linkTypes", IsComplex = true, QueryBuilderType = typeof(LinkTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "lockPoolzTerm", IsComplex = true, QueryBuilderType = typeof(LockPoolzTermQueryBuilder) },
                new GraphQlFieldMetadata { Name = "lockTokenWhitelist", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(LockTokenWhitelistQueryBuilder) },
                new GraphQlFieldMetadata { Name = "lockTokenWhitelists_connection", IsComplex = true, QueryBuilderType = typeof(LockTokenWhitelistEntityResponseCollectionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "lockTokenWhitelists", IsComplex = true, QueryBuilderType = typeof(LockTokenWhitelistQueryBuilder) },
                new GraphQlFieldMetadata { Name = "main", IsComplex = true, QueryBuilderType = typeof(MainQueryBuilder) },
                new GraphQlFieldMetadata { Name = "marketCapBadge", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(MarketCapBadgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "marketCapBadges_connection", IsComplex = true, QueryBuilderType = typeof(MarketCapBadgeEntityResponseCollectionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "marketCapBadges", IsComplex = true, QueryBuilderType = typeof(MarketCapBadgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "mediaKit", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(MediaKitQueryBuilder) },
                new GraphQlFieldMetadata { Name = "mediaKits_connection", IsComplex = true, QueryBuilderType = typeof(MediaKitEntityResponseCollectionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "mediaKits", IsComplex = true, QueryBuilderType = typeof(MediaKitQueryBuilder) },
                new GraphQlFieldMetadata { Name = "nonEvmChain", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(NonEvmChainQueryBuilder) },
                new GraphQlFieldMetadata { Name = "nonEvmChains_connection", IsComplex = true, QueryBuilderType = typeof(NonEvmChainEntityResponseCollectionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "nonEvmChains", IsComplex = true, QueryBuilderType = typeof(NonEvmChainQueryBuilder) },
                new GraphQlFieldMetadata { Name = "openGrant", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(OpenGrantQueryBuilder) },
                new GraphQlFieldMetadata { Name = "openGrants_connection", IsComplex = true, QueryBuilderType = typeof(OpenGrantEntityResponseCollectionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "openGrants", IsComplex = true, QueryBuilderType = typeof(OpenGrantQueryBuilder) },
                new GraphQlFieldMetadata { Name = "ourPartner", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(OurPartnerQueryBuilder) },
                new GraphQlFieldMetadata { Name = "ourPartners_connection", IsComplex = true, QueryBuilderType = typeof(OurPartnerEntityResponseCollectionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "ourPartners", IsComplex = true, QueryBuilderType = typeof(OurPartnerQueryBuilder) },
                new GraphQlFieldMetadata { Name = "pageInfo", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(PageInfoQueryBuilder) },
                new GraphQlFieldMetadata { Name = "pageInfos_connection", IsComplex = true, QueryBuilderType = typeof(PageInfoEntityResponseCollectionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "pageInfos", IsComplex = true, QueryBuilderType = typeof(PageInfoQueryBuilder) },
                new GraphQlFieldMetadata { Name = "poolzBoutique", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(PoolzBoutiqueQueryBuilder) },
                new GraphQlFieldMetadata { Name = "poolzBoutiques_connection", IsComplex = true, QueryBuilderType = typeof(PoolzBoutiqueEntityResponseCollectionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "poolzBoutiques", IsComplex = true, QueryBuilderType = typeof(PoolzBoutiqueQueryBuilder) },
                new GraphQlFieldMetadata { Name = "pragmaVersion", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(PragmaVersionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "pragmaVersions_connection", IsComplex = true, QueryBuilderType = typeof(PragmaVersionEntityResponseCollectionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "pragmaVersions", IsComplex = true, QueryBuilderType = typeof(PragmaVersionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "privacy", IsComplex = true, QueryBuilderType = typeof(PrivacyQueryBuilder) },
                new GraphQlFieldMetadata { Name = "projectsInformation", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(ProjectsInformationQueryBuilder) },
                new GraphQlFieldMetadata { Name = "projectsInformations_connection", IsComplex = true, QueryBuilderType = typeof(ProjectsInformationEntityResponseCollectionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "projectsInformations", IsComplex = true, QueryBuilderType = typeof(ProjectsInformationQueryBuilder) },
                new GraphQlFieldMetadata { Name = "seasonPass", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(SeasonPassQueryBuilder) },
                new GraphQlFieldMetadata { Name = "seasonPasses_connection", IsComplex = true, QueryBuilderType = typeof(SeasonPassEntityResponseCollectionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "seasonPasses", IsComplex = true, QueryBuilderType = typeof(SeasonPassQueryBuilder) },
                new GraphQlFieldMetadata { Name = "stakingCoolDown", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(StakingCoolDownQueryBuilder) },
                new GraphQlFieldMetadata { Name = "stakingCoolDowns_connection", IsComplex = true, QueryBuilderType = typeof(StakingCoolDownEntityResponseCollectionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "stakingCoolDowns", IsComplex = true, QueryBuilderType = typeof(StakingCoolDownQueryBuilder) },
                new GraphQlFieldMetadata { Name = "tokenomic", IsComplex = true, QueryBuilderType = typeof(TokenomicQueryBuilder) },
                new GraphQlFieldMetadata { Name = "tradeContract", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(TradeContractQueryBuilder) },
                new GraphQlFieldMetadata { Name = "tradeContracts_connection", IsComplex = true, QueryBuilderType = typeof(TradeContractEntityResponseCollectionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "tradeContracts", IsComplex = true, QueryBuilderType = typeof(TradeContractQueryBuilder) },
                new GraphQlFieldMetadata { Name = "vaultFaq", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(VaultFaqQueryBuilder) },
                new GraphQlFieldMetadata { Name = "vaultFaqs_connection", IsComplex = true, QueryBuilderType = typeof(VaultFaqEntityResponseCollectionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "vaultFaqs", IsComplex = true, QueryBuilderType = typeof(VaultFaqQueryBuilder) },
                new GraphQlFieldMetadata { Name = "me", IsComplex = true, QueryBuilderType = typeof(UsersPermissionsMeQueryBuilder) }
            };

        protected override string TypeName { get { return "Query"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public QueryQueryBuilder(string operationName = null) : base("query", operationName)
        {
        }

        public QueryQueryBuilder WithParameter<T>(GraphQlQueryParameter<T> parameter)
        {
            return WithParameterInternal(parameter);
        }

        public QueryQueryBuilder WithUploadFile(UploadFileQueryBuilder uploadFileQueryBuilder, QueryBuilderParameter<string> documentId, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("uploadFile", alias, uploadFileQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptUploadFile()
        {
            return ExceptField("uploadFile");
        }

        public QueryQueryBuilder WithUploadFilesConnection(UploadFileEntityResponseCollectionQueryBuilder uploadFileEntityResponseCollectionQueryBuilder, QueryBuilderParameter<UploadFileFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("uploadFiles_connection", alias, uploadFileEntityResponseCollectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptUploadFilesConnection()
        {
            return ExceptField("uploadFiles_connection");
        }

        public QueryQueryBuilder WithUploadFiles(UploadFileQueryBuilder uploadFileQueryBuilder, QueryBuilderParameter<UploadFileFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("uploadFiles", alias, uploadFileQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptUploadFiles()
        {
            return ExceptField("uploadFiles");
        }

        public QueryQueryBuilder WithI18NLocale(I18NLocaleQueryBuilder i18NLocaleQueryBuilder, QueryBuilderParameter<string> documentId, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("i18NLocale", alias, i18NLocaleQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptI18NLocale()
        {
            return ExceptField("i18NLocale");
        }

        public QueryQueryBuilder WithI18NLocalesConnection(I18NLocaleEntityResponseCollectionQueryBuilder i18NLocaleEntityResponseCollectionQueryBuilder, QueryBuilderParameter<I18NLocaleFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("i18NLocales_connection", alias, i18NLocaleEntityResponseCollectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptI18NLocalesConnection()
        {
            return ExceptField("i18NLocales_connection");
        }

        public QueryQueryBuilder WithI18NLocales(I18NLocaleQueryBuilder i18NLocaleQueryBuilder, QueryBuilderParameter<I18NLocaleFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("i18NLocales", alias, i18NLocaleQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptI18NLocales()
        {
            return ExceptField("i18NLocales");
        }

        public QueryQueryBuilder WithReviewWorkflowsWorkflow(ReviewWorkflowsWorkflowQueryBuilder reviewWorkflowsWorkflowQueryBuilder, QueryBuilderParameter<string> documentId, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("reviewWorkflowsWorkflow", alias, reviewWorkflowsWorkflowQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptReviewWorkflowsWorkflow()
        {
            return ExceptField("reviewWorkflowsWorkflow");
        }

        public QueryQueryBuilder WithReviewWorkflowsWorkflowsConnection(ReviewWorkflowsWorkflowEntityResponseCollectionQueryBuilder reviewWorkflowsWorkflowEntityResponseCollectionQueryBuilder, QueryBuilderParameter<ReviewWorkflowsWorkflowFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("reviewWorkflowsWorkflows_connection", alias, reviewWorkflowsWorkflowEntityResponseCollectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptReviewWorkflowsWorkflowsConnection()
        {
            return ExceptField("reviewWorkflowsWorkflows_connection");
        }

        public QueryQueryBuilder WithReviewWorkflowsWorkflows(ReviewWorkflowsWorkflowQueryBuilder reviewWorkflowsWorkflowQueryBuilder, QueryBuilderParameter<ReviewWorkflowsWorkflowFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("reviewWorkflowsWorkflows", alias, reviewWorkflowsWorkflowQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptReviewWorkflowsWorkflows()
        {
            return ExceptField("reviewWorkflowsWorkflows");
        }

        public QueryQueryBuilder WithReviewWorkflowsWorkflowStage(ReviewWorkflowsWorkflowStageQueryBuilder reviewWorkflowsWorkflowStageQueryBuilder, QueryBuilderParameter<string> documentId, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("reviewWorkflowsWorkflowStage", alias, reviewWorkflowsWorkflowStageQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptReviewWorkflowsWorkflowStage()
        {
            return ExceptField("reviewWorkflowsWorkflowStage");
        }

        public QueryQueryBuilder WithReviewWorkflowsWorkflowStagesConnection(ReviewWorkflowsWorkflowStageEntityResponseCollectionQueryBuilder reviewWorkflowsWorkflowStageEntityResponseCollectionQueryBuilder, QueryBuilderParameter<ReviewWorkflowsWorkflowStageFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("reviewWorkflowsWorkflowStages_connection", alias, reviewWorkflowsWorkflowStageEntityResponseCollectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptReviewWorkflowsWorkflowStagesConnection()
        {
            return ExceptField("reviewWorkflowsWorkflowStages_connection");
        }

        public QueryQueryBuilder WithReviewWorkflowsWorkflowStages(ReviewWorkflowsWorkflowStageQueryBuilder reviewWorkflowsWorkflowStageQueryBuilder, QueryBuilderParameter<ReviewWorkflowsWorkflowStageFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("reviewWorkflowsWorkflowStages", alias, reviewWorkflowsWorkflowStageQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptReviewWorkflowsWorkflowStages()
        {
            return ExceptField("reviewWorkflowsWorkflowStages");
        }

        public QueryQueryBuilder WithUsersPermissionsRole(UsersPermissionsRoleQueryBuilder usersPermissionsRoleQueryBuilder, QueryBuilderParameter<string> documentId, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("usersPermissionsRole", alias, usersPermissionsRoleQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptUsersPermissionsRole()
        {
            return ExceptField("usersPermissionsRole");
        }

        public QueryQueryBuilder WithUsersPermissionsRolesConnection(UsersPermissionsRoleEntityResponseCollectionQueryBuilder usersPermissionsRoleEntityResponseCollectionQueryBuilder, QueryBuilderParameter<UsersPermissionsRoleFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("usersPermissionsRoles_connection", alias, usersPermissionsRoleEntityResponseCollectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptUsersPermissionsRolesConnection()
        {
            return ExceptField("usersPermissionsRoles_connection");
        }

        public QueryQueryBuilder WithUsersPermissionsRoles(UsersPermissionsRoleQueryBuilder usersPermissionsRoleQueryBuilder, QueryBuilderParameter<UsersPermissionsRoleFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("usersPermissionsRoles", alias, usersPermissionsRoleQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptUsersPermissionsRoles()
        {
            return ExceptField("usersPermissionsRoles");
        }

        public QueryQueryBuilder WithUsersPermissionsUser(UsersPermissionsUserQueryBuilder usersPermissionsUserQueryBuilder, QueryBuilderParameter<string> documentId, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("usersPermissionsUser", alias, usersPermissionsUserQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptUsersPermissionsUser()
        {
            return ExceptField("usersPermissionsUser");
        }

        public QueryQueryBuilder WithUsersPermissionsUsersConnection(UsersPermissionsUserEntityResponseCollectionQueryBuilder usersPermissionsUserEntityResponseCollectionQueryBuilder, QueryBuilderParameter<UsersPermissionsUserFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("usersPermissionsUsers_connection", alias, usersPermissionsUserEntityResponseCollectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptUsersPermissionsUsersConnection()
        {
            return ExceptField("usersPermissionsUsers_connection");
        }

        public QueryQueryBuilder WithUsersPermissionsUsers(UsersPermissionsUserQueryBuilder usersPermissionsUserQueryBuilder, QueryBuilderParameter<UsersPermissionsUserFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("usersPermissionsUsers", alias, usersPermissionsUserQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptUsersPermissionsUsers()
        {
            return ExceptField("usersPermissionsUsers");
        }

        public QueryQueryBuilder WithAboutUs(AboutUsQueryBuilder aboutUsQueryBuilder, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("aboutUs", alias, aboutUsQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptAboutUs()
        {
            return ExceptField("aboutUs");
        }

        public QueryQueryBuilder WithAccount(AccountQueryBuilder accountQueryBuilder, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("account", alias, accountQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptAccount()
        {
            return ExceptField("account");
        }

        public QueryQueryBuilder WithAuthAdministrator(AuthAdministratorQueryBuilder authAdministratorQueryBuilder, QueryBuilderParameter<string> documentId, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("authAdministrator", alias, authAdministratorQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptAuthAdministrator()
        {
            return ExceptField("authAdministrator");
        }

        public QueryQueryBuilder WithAuthAdministratorsConnection(AuthAdministratorEntityResponseCollectionQueryBuilder authAdministratorEntityResponseCollectionQueryBuilder, QueryBuilderParameter<AuthAdministratorFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("authAdministrators_connection", alias, authAdministratorEntityResponseCollectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptAuthAdministratorsConnection()
        {
            return ExceptField("authAdministrators_connection");
        }

        public QueryQueryBuilder WithAuthAdministrators(AuthAdministratorQueryBuilder authAdministratorQueryBuilder, QueryBuilderParameter<AuthAdministratorFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("authAdministrators", alias, authAdministratorQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptAuthAdministrators()
        {
            return ExceptField("authAdministrators");
        }

        public QueryQueryBuilder WithAuthAdministratorsResource(AuthAdministratorsResourceQueryBuilder authAdministratorsResourceQueryBuilder, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("authAdministratorsResource", alias, authAdministratorsResourceQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptAuthAdministratorsResource()
        {
            return ExceptField("authAdministratorsResource");
        }

        public QueryQueryBuilder WithAuthResource(AuthResourceQueryBuilder authResourceQueryBuilder, QueryBuilderParameter<string> documentId, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("authResource", alias, authResourceQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptAuthResource()
        {
            return ExceptField("authResource");
        }

        public QueryQueryBuilder WithAuthResourcesConnection(AuthResourceEntityResponseCollectionQueryBuilder authResourceEntityResponseCollectionQueryBuilder, QueryBuilderParameter<AuthResourceFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("authResources_connection", alias, authResourceEntityResponseCollectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptAuthResourcesConnection()
        {
            return ExceptField("authResources_connection");
        }

        public QueryQueryBuilder WithAuthResources(AuthResourceQueryBuilder authResourceQueryBuilder, QueryBuilderParameter<AuthResourceFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("authResources", alias, authResourceQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptAuthResources()
        {
            return ExceptField("authResources");
        }

        public QueryQueryBuilder WithAuthRole(AuthRoleQueryBuilder authRoleQueryBuilder, QueryBuilderParameter<string> documentId, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("authRole", alias, authRoleQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptAuthRole()
        {
            return ExceptField("authRole");
        }

        public QueryQueryBuilder WithAuthRolesConnection(AuthRoleEntityResponseCollectionQueryBuilder authRoleEntityResponseCollectionQueryBuilder, QueryBuilderParameter<AuthRoleFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("authRoles_connection", alias, authRoleEntityResponseCollectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptAuthRolesConnection()
        {
            return ExceptField("authRoles_connection");
        }

        public QueryQueryBuilder WithAuthRoles(AuthRoleQueryBuilder authRoleQueryBuilder, QueryBuilderParameter<AuthRoleFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("authRoles", alias, authRoleQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptAuthRoles()
        {
            return ExceptField("authRoles");
        }

        public QueryQueryBuilder WithAuthUser(AuthUserQueryBuilder authUserQueryBuilder, QueryBuilderParameter<string> documentId, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("authUser", alias, authUserQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptAuthUser()
        {
            return ExceptField("authUser");
        }

        public QueryQueryBuilder WithAuthUsersConnection(AuthUserEntityResponseCollectionQueryBuilder authUserEntityResponseCollectionQueryBuilder, QueryBuilderParameter<AuthUserFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("authUsers_connection", alias, authUserEntityResponseCollectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptAuthUsersConnection()
        {
            return ExceptField("authUsers_connection");
        }

        public QueryQueryBuilder WithAuthUsers(AuthUserQueryBuilder authUserQueryBuilder, QueryBuilderParameter<AuthUserFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("authUsers", alias, authUserQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptAuthUsers()
        {
            return ExceptField("authUsers");
        }

        public QueryQueryBuilder WithAutoSignUp(AutoSignUpQueryBuilder autoSignUpQueryBuilder, QueryBuilderParameter<string> documentId, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("autoSignUp", alias, autoSignUpQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptAutoSignUp()
        {
            return ExceptField("autoSignUp");
        }

        public QueryQueryBuilder WithAutoSignUpsConnection(AutoSignUpEntityResponseCollectionQueryBuilder autoSignUpEntityResponseCollectionQueryBuilder, QueryBuilderParameter<AutoSignUpFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("autoSignUps_connection", alias, autoSignUpEntityResponseCollectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptAutoSignUpsConnection()
        {
            return ExceptField("autoSignUps_connection");
        }

        public QueryQueryBuilder WithAutoSignUps(AutoSignUpQueryBuilder autoSignUpQueryBuilder, QueryBuilderParameter<AutoSignUpFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("autoSignUps", alias, autoSignUpQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptAutoSignUps()
        {
            return ExceptField("autoSignUps");
        }

        public QueryQueryBuilder WithBoost(BoostQueryBuilder boostQueryBuilder, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("boost", alias, boostQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptBoost()
        {
            return ExceptField("boost");
        }

        public QueryQueryBuilder WithBuyPoolz(BuyPoolzQueryBuilder buyPoolzQueryBuilder, QueryBuilderParameter<string> documentId, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("buyPoolz", alias, buyPoolzQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptBuyPoolz()
        {
            return ExceptField("buyPoolz");
        }

        public QueryQueryBuilder WithBuyPoolzsConnection(BuyPoolzEntityResponseCollectionQueryBuilder buyPoolzEntityResponseCollectionQueryBuilder, QueryBuilderParameter<BuyPoolzFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("buyPoolzs_connection", alias, buyPoolzEntityResponseCollectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptBuyPoolzsConnection()
        {
            return ExceptField("buyPoolzs_connection");
        }

        public QueryQueryBuilder WithBuyPoolzs(BuyPoolzQueryBuilder buyPoolzQueryBuilder, QueryBuilderParameter<BuyPoolzFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("buyPoolzs", alias, buyPoolzQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptBuyPoolzs()
        {
            return ExceptField("buyPoolzs");
        }

        public QueryQueryBuilder WithBuyWith(BuyWithQueryBuilder buyWithQueryBuilder, QueryBuilderParameter<string> documentId, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("buyWith", alias, buyWithQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptBuyWith()
        {
            return ExceptField("buyWith");
        }

        public QueryQueryBuilder WithBuyWithsConnection(BuyWithEntityResponseCollectionQueryBuilder buyWithEntityResponseCollectionQueryBuilder, QueryBuilderParameter<BuyWithFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("buyWiths_connection", alias, buyWithEntityResponseCollectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptBuyWithsConnection()
        {
            return ExceptField("buyWiths_connection");
        }

        public QueryQueryBuilder WithBuyWiths(BuyWithQueryBuilder buyWithQueryBuilder, QueryBuilderParameter<BuyWithFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("buyWiths", alias, buyWithQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptBuyWiths()
        {
            return ExceptField("buyWiths");
        }

        public QueryQueryBuilder WithChain(ChainQueryBuilder chainQueryBuilder, QueryBuilderParameter<string> documentId, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("chain", alias, chainQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptChain()
        {
            return ExceptField("chain");
        }

        public QueryQueryBuilder WithChainsConnection(ChainEntityResponseCollectionQueryBuilder chainEntityResponseCollectionQueryBuilder, QueryBuilderParameter<ChainFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("chains_connection", alias, chainEntityResponseCollectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptChainsConnection()
        {
            return ExceptField("chains_connection");
        }

        public QueryQueryBuilder WithChains(ChainQueryBuilder chainQueryBuilder, QueryBuilderParameter<ChainFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("chains", alias, chainQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptChains()
        {
            return ExceptField("chains");
        }

        public QueryQueryBuilder WithChainSetting(ChainSettingQueryBuilder chainSettingQueryBuilder, QueryBuilderParameter<string> documentId, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("chainSetting", alias, chainSettingQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptChainSetting()
        {
            return ExceptField("chainSetting");
        }

        public QueryQueryBuilder WithChainSettingsConnection(ChainSettingEntityResponseCollectionQueryBuilder chainSettingEntityResponseCollectionQueryBuilder, QueryBuilderParameter<ChainSettingFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("chainSettings_connection", alias, chainSettingEntityResponseCollectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptChainSettingsConnection()
        {
            return ExceptField("chainSettings_connection");
        }

        public QueryQueryBuilder WithChainSettings(ChainSettingQueryBuilder chainSettingQueryBuilder, QueryBuilderParameter<ChainSettingFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("chainSettings", alias, chainSettingQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptChainSettings()
        {
            return ExceptField("chainSettings");
        }

        public QueryQueryBuilder WithCondition(ConditionQueryBuilder conditionQueryBuilder, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("condition", alias, conditionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptCondition()
        {
            return ExceptField("condition");
        }

        public QueryQueryBuilder WithContract(ContractQueryBuilder contractQueryBuilder, QueryBuilderParameter<string> documentId, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("contract", alias, contractQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptContract()
        {
            return ExceptField("contract");
        }

        public QueryQueryBuilder WithContractsConnection(ContractEntityResponseCollectionQueryBuilder contractEntityResponseCollectionQueryBuilder, QueryBuilderParameter<ContractFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("contracts_connection", alias, contractEntityResponseCollectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptContractsConnection()
        {
            return ExceptField("contracts_connection");
        }

        public QueryQueryBuilder WithContracts(ContractQueryBuilder contractQueryBuilder, QueryBuilderParameter<ContractFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("contracts", alias, contractQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptContracts()
        {
            return ExceptField("contracts");
        }

        public QueryQueryBuilder WithContractType(ContractTypeQueryBuilder contractTypeQueryBuilder, QueryBuilderParameter<string> documentId, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("contractType", alias, contractTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptContractType()
        {
            return ExceptField("contractType");
        }

        public QueryQueryBuilder WithContractTypesConnection(ContractTypeEntityResponseCollectionQueryBuilder contractTypeEntityResponseCollectionQueryBuilder, QueryBuilderParameter<ContractTypeFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("contractTypes_connection", alias, contractTypeEntityResponseCollectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptContractTypesConnection()
        {
            return ExceptField("contractTypes_connection");
        }

        public QueryQueryBuilder WithContractTypes(ContractTypeQueryBuilder contractTypeQueryBuilder, QueryBuilderParameter<ContractTypeFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("contractTypes", alias, contractTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptContractTypes()
        {
            return ExceptField("contractTypes");
        }

        public QueryQueryBuilder WithContractsOnChain(ContractsOnChainQueryBuilder contractsOnChainQueryBuilder, QueryBuilderParameter<string> documentId, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("contractsOnChain", alias, contractsOnChainQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptContractsOnChain()
        {
            return ExceptField("contractsOnChain");
        }

        public QueryQueryBuilder WithContractsOnChainsConnection(ContractsOnChainEntityResponseCollectionQueryBuilder contractsOnChainEntityResponseCollectionQueryBuilder, QueryBuilderParameter<ContractsOnChainFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("contractsOnChains_connection", alias, contractsOnChainEntityResponseCollectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptContractsOnChainsConnection()
        {
            return ExceptField("contractsOnChains_connection");
        }

        public QueryQueryBuilder WithContractsOnChains(ContractsOnChainQueryBuilder contractsOnChainQueryBuilder, QueryBuilderParameter<ContractsOnChainFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("contractsOnChains", alias, contractsOnChainQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptContractsOnChains()
        {
            return ExceptField("contractsOnChains");
        }

        public QueryQueryBuilder WithCover(CoverQueryBuilder coverQueryBuilder, QueryBuilderParameter<string> documentId, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("cover", alias, coverQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptCover()
        {
            return ExceptField("cover");
        }

        public QueryQueryBuilder WithCoversConnection(CoverEntityResponseCollectionQueryBuilder coverEntityResponseCollectionQueryBuilder, QueryBuilderParameter<CoverFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("covers_connection", alias, coverEntityResponseCollectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptCoversConnection()
        {
            return ExceptField("covers_connection");
        }

        public QueryQueryBuilder WithCovers(CoverQueryBuilder coverQueryBuilder, QueryBuilderParameter<CoverFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("covers", alias, coverQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptCovers()
        {
            return ExceptField("covers");
        }

        public QueryQueryBuilder WithDefaultWallet(DefaultWalletQueryBuilder defaultWalletQueryBuilder, QueryBuilderParameter<string> documentId, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("defaultWallet", alias, defaultWalletQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptDefaultWallet()
        {
            return ExceptField("defaultWallet");
        }

        public QueryQueryBuilder WithDefaultWalletsConnection(DefaultWalletEntityResponseCollectionQueryBuilder defaultWalletEntityResponseCollectionQueryBuilder, QueryBuilderParameter<DefaultWalletFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("defaultWallets_connection", alias, defaultWalletEntityResponseCollectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptDefaultWalletsConnection()
        {
            return ExceptField("defaultWallets_connection");
        }

        public QueryQueryBuilder WithDefaultWallets(DefaultWalletQueryBuilder defaultWalletQueryBuilder, QueryBuilderParameter<DefaultWalletFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("defaultWallets", alias, defaultWalletQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptDefaultWallets()
        {
            return ExceptField("defaultWallets");
        }

        public QueryQueryBuilder WithEvmVersion(EvmVersionQueryBuilder evmVersionQueryBuilder, QueryBuilderParameter<string> documentId, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("evmVersion", alias, evmVersionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptEvmVersion()
        {
            return ExceptField("evmVersion");
        }

        public QueryQueryBuilder WithEvmVersionsConnection(EvmVersionEntityResponseCollectionQueryBuilder evmVersionEntityResponseCollectionQueryBuilder, QueryBuilderParameter<EvmVersionFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("evmVersions_connection", alias, evmVersionEntityResponseCollectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptEvmVersionsConnection()
        {
            return ExceptField("evmVersions_connection");
        }

        public QueryQueryBuilder WithEvmVersions(EvmVersionQueryBuilder evmVersionQueryBuilder, QueryBuilderParameter<EvmVersionFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("evmVersions", alias, evmVersionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptEvmVersions()
        {
            return ExceptField("evmVersions");
        }

        public QueryQueryBuilder WithFooter(FooterQueryBuilder footerQueryBuilder, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("footer", alias, footerQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptFooter()
        {
            return ExceptField("footer");
        }

        public QueryQueryBuilder WithGrow(GrowQueryBuilder growQueryBuilder, QueryBuilderParameter<string> documentId, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("grow", alias, growQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptGrow()
        {
            return ExceptField("grow");
        }

        public QueryQueryBuilder WithGrowsConnection(GrowEntityResponseCollectionQueryBuilder growEntityResponseCollectionQueryBuilder, QueryBuilderParameter<GrowFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("grows_connection", alias, growEntityResponseCollectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptGrowsConnection()
        {
            return ExceptField("grows_connection");
        }

        public QueryQueryBuilder WithGrows(GrowQueryBuilder growQueryBuilder, QueryBuilderParameter<GrowFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("grows", alias, growQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptGrows()
        {
            return ExceptField("grows");
        }

        public QueryQueryBuilder WithGrowBadge(GrowBadgeQueryBuilder growBadgeQueryBuilder, QueryBuilderParameter<string> documentId, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("growBadge", alias, growBadgeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptGrowBadge()
        {
            return ExceptField("growBadge");
        }

        public QueryQueryBuilder WithGrowBadgesConnection(GrowBadgeEntityResponseCollectionQueryBuilder growBadgeEntityResponseCollectionQueryBuilder, QueryBuilderParameter<GrowBadgeFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("growBadges_connection", alias, growBadgeEntityResponseCollectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptGrowBadgesConnection()
        {
            return ExceptField("growBadges_connection");
        }

        public QueryQueryBuilder WithGrowBadges(GrowBadgeQueryBuilder growBadgeQueryBuilder, QueryBuilderParameter<GrowBadgeFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("growBadges", alias, growBadgeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptGrowBadges()
        {
            return ExceptField("growBadges");
        }

        public QueryQueryBuilder WithHeader(HeaderQueryBuilder headerQueryBuilder, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("header", alias, headerQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptHeader()
        {
            return ExceptField("header");
        }

        public QueryQueryBuilder WithIdoBadge(IdoBadgeQueryBuilder idoBadgeQueryBuilder, QueryBuilderParameter<string> documentId, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("idoBadge", alias, idoBadgeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptIdoBadge()
        {
            return ExceptField("idoBadge");
        }

        public QueryQueryBuilder WithIdoBadgesConnection(IdoBadgeEntityResponseCollectionQueryBuilder idoBadgeEntityResponseCollectionQueryBuilder, QueryBuilderParameter<IdoBadgeFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("idoBadges_connection", alias, idoBadgeEntityResponseCollectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptIdoBadgesConnection()
        {
            return ExceptField("idoBadges_connection");
        }

        public QueryQueryBuilder WithIdoBadges(IdoBadgeQueryBuilder idoBadgeQueryBuilder, QueryBuilderParameter<IdoBadgeFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("idoBadges", alias, idoBadgeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptIdoBadges()
        {
            return ExceptField("idoBadges");
        }

        public QueryQueryBuilder WithIgnoreLeaderBoardWallet(IgnoreLeaderBoardWalletQueryBuilder ignoreLeaderBoardWalletQueryBuilder, QueryBuilderParameter<string> documentId, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("ignoreLeaderBoardWallet", alias, ignoreLeaderBoardWalletQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptIgnoreLeaderBoardWallet()
        {
            return ExceptField("ignoreLeaderBoardWallet");
        }

        public QueryQueryBuilder WithIgnoreLeaderBoardWalletsConnection(IgnoreLeaderBoardWalletEntityResponseCollectionQueryBuilder ignoreLeaderBoardWalletEntityResponseCollectionQueryBuilder, QueryBuilderParameter<IgnoreLeaderBoardWalletFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("ignoreLeaderBoardWallets_connection", alias, ignoreLeaderBoardWalletEntityResponseCollectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptIgnoreLeaderBoardWalletsConnection()
        {
            return ExceptField("ignoreLeaderBoardWallets_connection");
        }

        public QueryQueryBuilder WithIgnoreLeaderBoardWallets(IgnoreLeaderBoardWalletQueryBuilder ignoreLeaderBoardWalletQueryBuilder, QueryBuilderParameter<IgnoreLeaderBoardWalletFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("ignoreLeaderBoardWallets", alias, ignoreLeaderBoardWalletQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptIgnoreLeaderBoardWallets()
        {
            return ExceptField("ignoreLeaderBoardWallets");
        }

        public QueryQueryBuilder WithInvestTerm(InvestTermQueryBuilder investTermQueryBuilder, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("investTerm", alias, investTermQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptInvestTerm()
        {
            return ExceptField("investTerm");
        }

        public QueryQueryBuilder WithInvestor(InvestorQueryBuilder investorQueryBuilder, QueryBuilderParameter<string> documentId, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("investor", alias, investorQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptInvestor()
        {
            return ExceptField("investor");
        }

        public QueryQueryBuilder WithInvestorsConnection(InvestorEntityResponseCollectionQueryBuilder investorEntityResponseCollectionQueryBuilder, QueryBuilderParameter<InvestorFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("investors_connection", alias, investorEntityResponseCollectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptInvestorsConnection()
        {
            return ExceptField("investors_connection");
        }

        public QueryQueryBuilder WithInvestors(InvestorQueryBuilder investorQueryBuilder, QueryBuilderParameter<InvestorFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("investors", alias, investorQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptInvestors()
        {
            return ExceptField("investors");
        }

        public QueryQueryBuilder WithLatestType(LatestTypeQueryBuilder latestTypeQueryBuilder, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("latestType", alias, latestTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptLatestType()
        {
            return ExceptField("latestType");
        }

        public QueryQueryBuilder WithLinkType(LinkTypeQueryBuilder linkTypeQueryBuilder, QueryBuilderParameter<string> documentId, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("linkType", alias, linkTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptLinkType()
        {
            return ExceptField("linkType");
        }

        public QueryQueryBuilder WithLinkTypesConnection(LinkTypeEntityResponseCollectionQueryBuilder linkTypeEntityResponseCollectionQueryBuilder, QueryBuilderParameter<LinkTypeFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("linkTypes_connection", alias, linkTypeEntityResponseCollectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptLinkTypesConnection()
        {
            return ExceptField("linkTypes_connection");
        }

        public QueryQueryBuilder WithLinkTypes(LinkTypeQueryBuilder linkTypeQueryBuilder, QueryBuilderParameter<LinkTypeFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("linkTypes", alias, linkTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptLinkTypes()
        {
            return ExceptField("linkTypes");
        }

        public QueryQueryBuilder WithLockPoolzTerm(LockPoolzTermQueryBuilder lockPoolzTermQueryBuilder, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("lockPoolzTerm", alias, lockPoolzTermQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptLockPoolzTerm()
        {
            return ExceptField("lockPoolzTerm");
        }

        public QueryQueryBuilder WithLockTokenWhitelist(LockTokenWhitelistQueryBuilder lockTokenWhitelistQueryBuilder, QueryBuilderParameter<string> documentId, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("lockTokenWhitelist", alias, lockTokenWhitelistQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptLockTokenWhitelist()
        {
            return ExceptField("lockTokenWhitelist");
        }

        public QueryQueryBuilder WithLockTokenWhitelistsConnection(LockTokenWhitelistEntityResponseCollectionQueryBuilder lockTokenWhitelistEntityResponseCollectionQueryBuilder, QueryBuilderParameter<LockTokenWhitelistFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("lockTokenWhitelists_connection", alias, lockTokenWhitelistEntityResponseCollectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptLockTokenWhitelistsConnection()
        {
            return ExceptField("lockTokenWhitelists_connection");
        }

        public QueryQueryBuilder WithLockTokenWhitelists(LockTokenWhitelistQueryBuilder lockTokenWhitelistQueryBuilder, QueryBuilderParameter<LockTokenWhitelistFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("lockTokenWhitelists", alias, lockTokenWhitelistQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptLockTokenWhitelists()
        {
            return ExceptField("lockTokenWhitelists");
        }

        public QueryQueryBuilder WithMain(MainQueryBuilder mainQueryBuilder, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("main", alias, mainQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptMain()
        {
            return ExceptField("main");
        }

        public QueryQueryBuilder WithMarketCapBadge(MarketCapBadgeQueryBuilder marketCapBadgeQueryBuilder, QueryBuilderParameter<string> documentId, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("marketCapBadge", alias, marketCapBadgeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptMarketCapBadge()
        {
            return ExceptField("marketCapBadge");
        }

        public QueryQueryBuilder WithMarketCapBadgesConnection(MarketCapBadgeEntityResponseCollectionQueryBuilder marketCapBadgeEntityResponseCollectionQueryBuilder, QueryBuilderParameter<MarketCapBadgeFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("marketCapBadges_connection", alias, marketCapBadgeEntityResponseCollectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptMarketCapBadgesConnection()
        {
            return ExceptField("marketCapBadges_connection");
        }

        public QueryQueryBuilder WithMarketCapBadges(MarketCapBadgeQueryBuilder marketCapBadgeQueryBuilder, QueryBuilderParameter<MarketCapBadgeFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("marketCapBadges", alias, marketCapBadgeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptMarketCapBadges()
        {
            return ExceptField("marketCapBadges");
        }

        public QueryQueryBuilder WithMediaKit(MediaKitQueryBuilder mediaKitQueryBuilder, QueryBuilderParameter<string> documentId, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("mediaKit", alias, mediaKitQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptMediaKit()
        {
            return ExceptField("mediaKit");
        }

        public QueryQueryBuilder WithMediaKitsConnection(MediaKitEntityResponseCollectionQueryBuilder mediaKitEntityResponseCollectionQueryBuilder, QueryBuilderParameter<MediaKitFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("mediaKits_connection", alias, mediaKitEntityResponseCollectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptMediaKitsConnection()
        {
            return ExceptField("mediaKits_connection");
        }

        public QueryQueryBuilder WithMediaKits(MediaKitQueryBuilder mediaKitQueryBuilder, QueryBuilderParameter<MediaKitFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("mediaKits", alias, mediaKitQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptMediaKits()
        {
            return ExceptField("mediaKits");
        }

        public QueryQueryBuilder WithNonEvmChain(NonEvmChainQueryBuilder nonEvmChainQueryBuilder, QueryBuilderParameter<string> documentId, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("nonEvmChain", alias, nonEvmChainQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptNonEvmChain()
        {
            return ExceptField("nonEvmChain");
        }

        public QueryQueryBuilder WithNonEvmChainsConnection(NonEvmChainEntityResponseCollectionQueryBuilder nonEvmChainEntityResponseCollectionQueryBuilder, QueryBuilderParameter<NonEvmChainFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("nonEvmChains_connection", alias, nonEvmChainEntityResponseCollectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptNonEvmChainsConnection()
        {
            return ExceptField("nonEvmChains_connection");
        }

        public QueryQueryBuilder WithNonEvmChains(NonEvmChainQueryBuilder nonEvmChainQueryBuilder, QueryBuilderParameter<NonEvmChainFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("nonEvmChains", alias, nonEvmChainQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptNonEvmChains()
        {
            return ExceptField("nonEvmChains");
        }

        public QueryQueryBuilder WithOpenGrant(OpenGrantQueryBuilder openGrantQueryBuilder, QueryBuilderParameter<string> documentId, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("openGrant", alias, openGrantQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptOpenGrant()
        {
            return ExceptField("openGrant");
        }

        public QueryQueryBuilder WithOpenGrantsConnection(OpenGrantEntityResponseCollectionQueryBuilder openGrantEntityResponseCollectionQueryBuilder, QueryBuilderParameter<OpenGrantFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("openGrants_connection", alias, openGrantEntityResponseCollectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptOpenGrantsConnection()
        {
            return ExceptField("openGrants_connection");
        }

        public QueryQueryBuilder WithOpenGrants(OpenGrantQueryBuilder openGrantQueryBuilder, QueryBuilderParameter<OpenGrantFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("openGrants", alias, openGrantQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptOpenGrants()
        {
            return ExceptField("openGrants");
        }

        public QueryQueryBuilder WithOurPartner(OurPartnerQueryBuilder ourPartnerQueryBuilder, QueryBuilderParameter<string> documentId, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("ourPartner", alias, ourPartnerQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptOurPartner()
        {
            return ExceptField("ourPartner");
        }

        public QueryQueryBuilder WithOurPartnersConnection(OurPartnerEntityResponseCollectionQueryBuilder ourPartnerEntityResponseCollectionQueryBuilder, QueryBuilderParameter<OurPartnerFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("ourPartners_connection", alias, ourPartnerEntityResponseCollectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptOurPartnersConnection()
        {
            return ExceptField("ourPartners_connection");
        }

        public QueryQueryBuilder WithOurPartners(OurPartnerQueryBuilder ourPartnerQueryBuilder, QueryBuilderParameter<OurPartnerFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("ourPartners", alias, ourPartnerQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptOurPartners()
        {
            return ExceptField("ourPartners");
        }

        public QueryQueryBuilder WithPageInfo(PageInfoQueryBuilder pageInfoQueryBuilder, QueryBuilderParameter<string> documentId, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("pageInfo", alias, pageInfoQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptPageInfo()
        {
            return ExceptField("pageInfo");
        }

        public QueryQueryBuilder WithPageInfosConnection(PageInfoEntityResponseCollectionQueryBuilder pageInfoEntityResponseCollectionQueryBuilder, QueryBuilderParameter<PageInfoFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("pageInfos_connection", alias, pageInfoEntityResponseCollectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptPageInfosConnection()
        {
            return ExceptField("pageInfos_connection");
        }

        public QueryQueryBuilder WithPageInfos(PageInfoQueryBuilder pageInfoQueryBuilder, QueryBuilderParameter<PageInfoFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("pageInfos", alias, pageInfoQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptPageInfos()
        {
            return ExceptField("pageInfos");
        }

        public QueryQueryBuilder WithPoolzBoutique(PoolzBoutiqueQueryBuilder poolzBoutiqueQueryBuilder, QueryBuilderParameter<string> documentId, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("poolzBoutique", alias, poolzBoutiqueQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptPoolzBoutique()
        {
            return ExceptField("poolzBoutique");
        }

        public QueryQueryBuilder WithPoolzBoutiquesConnection(PoolzBoutiqueEntityResponseCollectionQueryBuilder poolzBoutiqueEntityResponseCollectionQueryBuilder, QueryBuilderParameter<PoolzBoutiqueFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("poolzBoutiques_connection", alias, poolzBoutiqueEntityResponseCollectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptPoolzBoutiquesConnection()
        {
            return ExceptField("poolzBoutiques_connection");
        }

        public QueryQueryBuilder WithPoolzBoutiques(PoolzBoutiqueQueryBuilder poolzBoutiqueQueryBuilder, QueryBuilderParameter<PoolzBoutiqueFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("poolzBoutiques", alias, poolzBoutiqueQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptPoolzBoutiques()
        {
            return ExceptField("poolzBoutiques");
        }

        public QueryQueryBuilder WithPragmaVersion(PragmaVersionQueryBuilder pragmaVersionQueryBuilder, QueryBuilderParameter<string> documentId, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("pragmaVersion", alias, pragmaVersionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptPragmaVersion()
        {
            return ExceptField("pragmaVersion");
        }

        public QueryQueryBuilder WithPragmaVersionsConnection(PragmaVersionEntityResponseCollectionQueryBuilder pragmaVersionEntityResponseCollectionQueryBuilder, QueryBuilderParameter<PragmaVersionFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("pragmaVersions_connection", alias, pragmaVersionEntityResponseCollectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptPragmaVersionsConnection()
        {
            return ExceptField("pragmaVersions_connection");
        }

        public QueryQueryBuilder WithPragmaVersions(PragmaVersionQueryBuilder pragmaVersionQueryBuilder, QueryBuilderParameter<PragmaVersionFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("pragmaVersions", alias, pragmaVersionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptPragmaVersions()
        {
            return ExceptField("pragmaVersions");
        }

        public QueryQueryBuilder WithPrivacy(PrivacyQueryBuilder privacyQueryBuilder, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("privacy", alias, privacyQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptPrivacy()
        {
            return ExceptField("privacy");
        }

        public QueryQueryBuilder WithProjectsInformation(ProjectsInformationQueryBuilder projectsInformationQueryBuilder, QueryBuilderParameter<string> documentId, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("projectsInformation", alias, projectsInformationQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptProjectsInformation()
        {
            return ExceptField("projectsInformation");
        }

        public QueryQueryBuilder WithProjectsInformationsConnection(ProjectsInformationEntityResponseCollectionQueryBuilder projectsInformationEntityResponseCollectionQueryBuilder, QueryBuilderParameter<ProjectsInformationFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("projectsInformations_connection", alias, projectsInformationEntityResponseCollectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptProjectsInformationsConnection()
        {
            return ExceptField("projectsInformations_connection");
        }

        public QueryQueryBuilder WithProjectsInformations(ProjectsInformationQueryBuilder projectsInformationQueryBuilder, QueryBuilderParameter<ProjectsInformationFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("projectsInformations", alias, projectsInformationQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptProjectsInformations()
        {
            return ExceptField("projectsInformations");
        }

        public QueryQueryBuilder WithSeasonPass(SeasonPassQueryBuilder seasonPassQueryBuilder, QueryBuilderParameter<string> documentId, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("seasonPass", alias, seasonPassQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptSeasonPass()
        {
            return ExceptField("seasonPass");
        }

        public QueryQueryBuilder WithSeasonPassesConnection(SeasonPassEntityResponseCollectionQueryBuilder seasonPassEntityResponseCollectionQueryBuilder, QueryBuilderParameter<SeasonPassFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("seasonPasses_connection", alias, seasonPassEntityResponseCollectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptSeasonPassesConnection()
        {
            return ExceptField("seasonPasses_connection");
        }

        public QueryQueryBuilder WithSeasonPasses(SeasonPassQueryBuilder seasonPassQueryBuilder, QueryBuilderParameter<SeasonPassFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("seasonPasses", alias, seasonPassQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptSeasonPasses()
        {
            return ExceptField("seasonPasses");
        }

        public QueryQueryBuilder WithStakingCoolDown(StakingCoolDownQueryBuilder stakingCoolDownQueryBuilder, QueryBuilderParameter<string> documentId, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("stakingCoolDown", alias, stakingCoolDownQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptStakingCoolDown()
        {
            return ExceptField("stakingCoolDown");
        }

        public QueryQueryBuilder WithStakingCoolDownsConnection(StakingCoolDownEntityResponseCollectionQueryBuilder stakingCoolDownEntityResponseCollectionQueryBuilder, QueryBuilderParameter<StakingCoolDownFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("stakingCoolDowns_connection", alias, stakingCoolDownEntityResponseCollectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptStakingCoolDownsConnection()
        {
            return ExceptField("stakingCoolDowns_connection");
        }

        public QueryQueryBuilder WithStakingCoolDowns(StakingCoolDownQueryBuilder stakingCoolDownQueryBuilder, QueryBuilderParameter<StakingCoolDownFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("stakingCoolDowns", alias, stakingCoolDownQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptStakingCoolDowns()
        {
            return ExceptField("stakingCoolDowns");
        }

        public QueryQueryBuilder WithTokenomic(TokenomicQueryBuilder tokenomicQueryBuilder, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("tokenomic", alias, tokenomicQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptTokenomic()
        {
            return ExceptField("tokenomic");
        }

        public QueryQueryBuilder WithTradeContract(TradeContractQueryBuilder tradeContractQueryBuilder, QueryBuilderParameter<string> documentId, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("tradeContract", alias, tradeContractQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptTradeContract()
        {
            return ExceptField("tradeContract");
        }

        public QueryQueryBuilder WithTradeContractsConnection(TradeContractEntityResponseCollectionQueryBuilder tradeContractEntityResponseCollectionQueryBuilder, QueryBuilderParameter<TradeContractFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("tradeContracts_connection", alias, tradeContractEntityResponseCollectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptTradeContractsConnection()
        {
            return ExceptField("tradeContracts_connection");
        }

        public QueryQueryBuilder WithTradeContracts(TradeContractQueryBuilder tradeContractQueryBuilder, QueryBuilderParameter<TradeContractFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("tradeContracts", alias, tradeContractQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptTradeContracts()
        {
            return ExceptField("tradeContracts");
        }

        public QueryQueryBuilder WithVaultFaq(VaultFaqQueryBuilder vaultFaqQueryBuilder, QueryBuilderParameter<string> documentId, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("vaultFaq", alias, vaultFaqQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptVaultFaq()
        {
            return ExceptField("vaultFaq");
        }

        public QueryQueryBuilder WithVaultFaqsConnection(VaultFaqEntityResponseCollectionQueryBuilder vaultFaqEntityResponseCollectionQueryBuilder, QueryBuilderParameter<VaultFaqFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("vaultFaqs_connection", alias, vaultFaqEntityResponseCollectionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptVaultFaqsConnection()
        {
            return ExceptField("vaultFaqs_connection");
        }

        public QueryQueryBuilder WithVaultFaqs(VaultFaqQueryBuilder vaultFaqQueryBuilder, QueryBuilderParameter<VaultFaqFiltersInput> filters = null, QueryBuilderParameter<PaginationArg> pagination = null, QueryBuilderParameter<IEnumerable<string>> sort = null, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (filters != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filters", ArgumentValue = filters} );

            if (pagination != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pagination", ArgumentValue = pagination} );

            if (sort != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "sort", ArgumentValue = sort} );

            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            return WithObjectField("vaultFaqs", alias, vaultFaqQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public QueryQueryBuilder ExceptVaultFaqs()
        {
            return ExceptField("vaultFaqs");
        }

        public QueryQueryBuilder WithMe(UsersPermissionsMeQueryBuilder usersPermissionsMeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("me", alias, usersPermissionsMeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public QueryQueryBuilder ExceptMe()
        {
            return ExceptField("me");
        }
    }

    public partial class MutationQueryBuilder : GraphQlQueryBuilder<MutationQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "createReviewWorkflowsWorkflow", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(ReviewWorkflowsWorkflowQueryBuilder) },
                new GraphQlFieldMetadata { Name = "updateReviewWorkflowsWorkflow", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(ReviewWorkflowsWorkflowQueryBuilder) },
                new GraphQlFieldMetadata { Name = "deleteReviewWorkflowsWorkflow", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(DeleteMutationResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "createReviewWorkflowsWorkflowStage", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(ReviewWorkflowsWorkflowStageQueryBuilder) },
                new GraphQlFieldMetadata { Name = "updateReviewWorkflowsWorkflowStage", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(ReviewWorkflowsWorkflowStageQueryBuilder) },
                new GraphQlFieldMetadata { Name = "deleteReviewWorkflowsWorkflowStage", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(DeleteMutationResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "updateAboutUs", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(AboutUsQueryBuilder) },
                new GraphQlFieldMetadata { Name = "deleteAboutUs", IsComplex = true, QueryBuilderType = typeof(DeleteMutationResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "updateAccount", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(AccountQueryBuilder) },
                new GraphQlFieldMetadata { Name = "deleteAccount", IsComplex = true, QueryBuilderType = typeof(DeleteMutationResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "createAuthAdministrator", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(AuthAdministratorQueryBuilder) },
                new GraphQlFieldMetadata { Name = "updateAuthAdministrator", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(AuthAdministratorQueryBuilder) },
                new GraphQlFieldMetadata { Name = "deleteAuthAdministrator", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(DeleteMutationResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "updateAuthAdministratorsResource", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(AuthAdministratorsResourceQueryBuilder) },
                new GraphQlFieldMetadata { Name = "deleteAuthAdministratorsResource", IsComplex = true, QueryBuilderType = typeof(DeleteMutationResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "createAuthResource", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(AuthResourceQueryBuilder) },
                new GraphQlFieldMetadata { Name = "updateAuthResource", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(AuthResourceQueryBuilder) },
                new GraphQlFieldMetadata { Name = "deleteAuthResource", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(DeleteMutationResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "createAuthRole", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(AuthRoleQueryBuilder) },
                new GraphQlFieldMetadata { Name = "updateAuthRole", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(AuthRoleQueryBuilder) },
                new GraphQlFieldMetadata { Name = "deleteAuthRole", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(DeleteMutationResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "createAuthUser", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(AuthUserQueryBuilder) },
                new GraphQlFieldMetadata { Name = "updateAuthUser", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(AuthUserQueryBuilder) },
                new GraphQlFieldMetadata { Name = "deleteAuthUser", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(DeleteMutationResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "createAutoSignUp", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(AutoSignUpQueryBuilder) },
                new GraphQlFieldMetadata { Name = "updateAutoSignUp", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(AutoSignUpQueryBuilder) },
                new GraphQlFieldMetadata { Name = "deleteAutoSignUp", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(DeleteMutationResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "updateBoost", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(BoostQueryBuilder) },
                new GraphQlFieldMetadata { Name = "deleteBoost", IsComplex = true, QueryBuilderType = typeof(DeleteMutationResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "createBuyPoolz", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(BuyPoolzQueryBuilder) },
                new GraphQlFieldMetadata { Name = "updateBuyPoolz", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(BuyPoolzQueryBuilder) },
                new GraphQlFieldMetadata { Name = "deleteBuyPoolz", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(DeleteMutationResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "createBuyWith", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(BuyWithQueryBuilder) },
                new GraphQlFieldMetadata { Name = "updateBuyWith", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(BuyWithQueryBuilder) },
                new GraphQlFieldMetadata { Name = "deleteBuyWith", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(DeleteMutationResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "createChain", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(ChainQueryBuilder) },
                new GraphQlFieldMetadata { Name = "updateChain", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(ChainQueryBuilder) },
                new GraphQlFieldMetadata { Name = "deleteChain", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(DeleteMutationResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "createChainSetting", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(ChainSettingQueryBuilder) },
                new GraphQlFieldMetadata { Name = "updateChainSetting", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(ChainSettingQueryBuilder) },
                new GraphQlFieldMetadata { Name = "deleteChainSetting", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(DeleteMutationResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "updateCondition", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(ConditionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "deleteCondition", IsComplex = true, QueryBuilderType = typeof(DeleteMutationResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "createContract", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(ContractQueryBuilder) },
                new GraphQlFieldMetadata { Name = "updateContract", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(ContractQueryBuilder) },
                new GraphQlFieldMetadata { Name = "deleteContract", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(DeleteMutationResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "createContractType", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(ContractTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "updateContractType", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(ContractTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "deleteContractType", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(DeleteMutationResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "createContractsOnChain", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(ContractsOnChainQueryBuilder) },
                new GraphQlFieldMetadata { Name = "updateContractsOnChain", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(ContractsOnChainQueryBuilder) },
                new GraphQlFieldMetadata { Name = "deleteContractsOnChain", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(DeleteMutationResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "createCover", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(CoverQueryBuilder) },
                new GraphQlFieldMetadata { Name = "updateCover", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(CoverQueryBuilder) },
                new GraphQlFieldMetadata { Name = "deleteCover", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(DeleteMutationResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "createDefaultWallet", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(DefaultWalletQueryBuilder) },
                new GraphQlFieldMetadata { Name = "updateDefaultWallet", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(DefaultWalletQueryBuilder) },
                new GraphQlFieldMetadata { Name = "deleteDefaultWallet", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(DeleteMutationResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "createEvmVersion", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(EvmVersionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "updateEvmVersion", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(EvmVersionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "deleteEvmVersion", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(DeleteMutationResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "updateFooter", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(FooterQueryBuilder) },
                new GraphQlFieldMetadata { Name = "deleteFooter", IsComplex = true, QueryBuilderType = typeof(DeleteMutationResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "createGrow", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(GrowQueryBuilder) },
                new GraphQlFieldMetadata { Name = "updateGrow", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(GrowQueryBuilder) },
                new GraphQlFieldMetadata { Name = "deleteGrow", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(DeleteMutationResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "createGrowBadge", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(GrowBadgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "updateGrowBadge", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(GrowBadgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "deleteGrowBadge", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(DeleteMutationResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "updateHeader", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(HeaderQueryBuilder) },
                new GraphQlFieldMetadata { Name = "deleteHeader", IsComplex = true, QueryBuilderType = typeof(DeleteMutationResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "createIdoBadge", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(IdoBadgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "updateIdoBadge", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(IdoBadgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "deleteIdoBadge", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(DeleteMutationResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "createIgnoreLeaderBoardWallet", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(IgnoreLeaderBoardWalletQueryBuilder) },
                new GraphQlFieldMetadata { Name = "updateIgnoreLeaderBoardWallet", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(IgnoreLeaderBoardWalletQueryBuilder) },
                new GraphQlFieldMetadata { Name = "deleteIgnoreLeaderBoardWallet", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(DeleteMutationResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "updateInvestTerm", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(InvestTermQueryBuilder) },
                new GraphQlFieldMetadata { Name = "deleteInvestTerm", IsComplex = true, QueryBuilderType = typeof(DeleteMutationResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "createInvestor", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(InvestorQueryBuilder) },
                new GraphQlFieldMetadata { Name = "updateInvestor", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(InvestorQueryBuilder) },
                new GraphQlFieldMetadata { Name = "deleteInvestor", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(DeleteMutationResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "updateLatestType", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(LatestTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "deleteLatestType", IsComplex = true, QueryBuilderType = typeof(DeleteMutationResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "createLinkType", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(LinkTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "updateLinkType", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(LinkTypeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "deleteLinkType", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(DeleteMutationResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "updateLockPoolzTerm", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(LockPoolzTermQueryBuilder) },
                new GraphQlFieldMetadata { Name = "deleteLockPoolzTerm", IsComplex = true, QueryBuilderType = typeof(DeleteMutationResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "createLockTokenWhitelist", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(LockTokenWhitelistQueryBuilder) },
                new GraphQlFieldMetadata { Name = "updateLockTokenWhitelist", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(LockTokenWhitelistQueryBuilder) },
                new GraphQlFieldMetadata { Name = "deleteLockTokenWhitelist", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(DeleteMutationResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "updateMain", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(MainQueryBuilder) },
                new GraphQlFieldMetadata { Name = "deleteMain", IsComplex = true, QueryBuilderType = typeof(DeleteMutationResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "createMarketCapBadge", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(MarketCapBadgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "updateMarketCapBadge", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(MarketCapBadgeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "deleteMarketCapBadge", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(DeleteMutationResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "createMediaKit", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(MediaKitQueryBuilder) },
                new GraphQlFieldMetadata { Name = "updateMediaKit", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(MediaKitQueryBuilder) },
                new GraphQlFieldMetadata { Name = "deleteMediaKit", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(DeleteMutationResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "createNonEvmChain", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(NonEvmChainQueryBuilder) },
                new GraphQlFieldMetadata { Name = "updateNonEvmChain", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(NonEvmChainQueryBuilder) },
                new GraphQlFieldMetadata { Name = "deleteNonEvmChain", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(DeleteMutationResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "createOpenGrant", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(OpenGrantQueryBuilder) },
                new GraphQlFieldMetadata { Name = "updateOpenGrant", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(OpenGrantQueryBuilder) },
                new GraphQlFieldMetadata { Name = "deleteOpenGrant", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(DeleteMutationResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "createOurPartner", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(OurPartnerQueryBuilder) },
                new GraphQlFieldMetadata { Name = "updateOurPartner", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(OurPartnerQueryBuilder) },
                new GraphQlFieldMetadata { Name = "deleteOurPartner", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(DeleteMutationResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "createPageInfo", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(PageInfoQueryBuilder) },
                new GraphQlFieldMetadata { Name = "updatePageInfo", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(PageInfoQueryBuilder) },
                new GraphQlFieldMetadata { Name = "deletePageInfo", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(DeleteMutationResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "createPoolzBoutique", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(PoolzBoutiqueQueryBuilder) },
                new GraphQlFieldMetadata { Name = "updatePoolzBoutique", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(PoolzBoutiqueQueryBuilder) },
                new GraphQlFieldMetadata { Name = "deletePoolzBoutique", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(DeleteMutationResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "createPragmaVersion", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(PragmaVersionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "updatePragmaVersion", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(PragmaVersionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "deletePragmaVersion", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(DeleteMutationResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "updatePrivacy", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(PrivacyQueryBuilder) },
                new GraphQlFieldMetadata { Name = "deletePrivacy", IsComplex = true, QueryBuilderType = typeof(DeleteMutationResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "createProjectsInformation", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(ProjectsInformationQueryBuilder) },
                new GraphQlFieldMetadata { Name = "updateProjectsInformation", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(ProjectsInformationQueryBuilder) },
                new GraphQlFieldMetadata { Name = "deleteProjectsInformation", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(DeleteMutationResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "createSeasonPass", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(SeasonPassQueryBuilder) },
                new GraphQlFieldMetadata { Name = "updateSeasonPass", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(SeasonPassQueryBuilder) },
                new GraphQlFieldMetadata { Name = "deleteSeasonPass", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(DeleteMutationResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "createStakingCoolDown", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(StakingCoolDownQueryBuilder) },
                new GraphQlFieldMetadata { Name = "updateStakingCoolDown", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(StakingCoolDownQueryBuilder) },
                new GraphQlFieldMetadata { Name = "deleteStakingCoolDown", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(DeleteMutationResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "updateTokenomic", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(TokenomicQueryBuilder) },
                new GraphQlFieldMetadata { Name = "deleteTokenomic", IsComplex = true, QueryBuilderType = typeof(DeleteMutationResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "createTradeContract", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(TradeContractQueryBuilder) },
                new GraphQlFieldMetadata { Name = "updateTradeContract", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(TradeContractQueryBuilder) },
                new GraphQlFieldMetadata { Name = "deleteTradeContract", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(DeleteMutationResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "createVaultFaq", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(VaultFaqQueryBuilder) },
                new GraphQlFieldMetadata { Name = "updateVaultFaq", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(VaultFaqQueryBuilder) },
                new GraphQlFieldMetadata { Name = "deleteVaultFaq", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(DeleteMutationResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "updateUploadFile", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(UploadFileQueryBuilder) },
                new GraphQlFieldMetadata { Name = "deleteUploadFile", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(UploadFileQueryBuilder) },
                new GraphQlFieldMetadata { Name = "createUsersPermissionsRole", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(UsersPermissionsCreateRolePayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "updateUsersPermissionsRole", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(UsersPermissionsUpdateRolePayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "deleteUsersPermissionsRole", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(UsersPermissionsDeleteRolePayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "createUsersPermissionsUser", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(UsersPermissionsUserEntityResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "updateUsersPermissionsUser", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(UsersPermissionsUserEntityResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "deleteUsersPermissionsUser", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(UsersPermissionsUserEntityResponseQueryBuilder) },
                new GraphQlFieldMetadata { Name = "login", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(UsersPermissionsLoginPayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "register", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(UsersPermissionsLoginPayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "forgotPassword", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(UsersPermissionsPasswordPayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "resetPassword", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(UsersPermissionsLoginPayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "changePassword", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(UsersPermissionsLoginPayloadQueryBuilder) },
                new GraphQlFieldMetadata { Name = "emailConfirmation", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(UsersPermissionsLoginPayloadQueryBuilder) }
            };

        protected override string TypeName { get { return "Mutation"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MutationQueryBuilder(string operationName = null) : base("mutation", operationName)
        {
        }

        public MutationQueryBuilder WithParameter<T>(GraphQlQueryParameter<T> parameter)
        {
            return WithParameterInternal(parameter);
        }

        public MutationQueryBuilder WithCreateReviewWorkflowsWorkflow(ReviewWorkflowsWorkflowQueryBuilder reviewWorkflowsWorkflowQueryBuilder, QueryBuilderParameter<ReviewWorkflowsWorkflowInput> data, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "data", ArgumentValue = data} );
            return WithObjectField("createReviewWorkflowsWorkflow", alias, reviewWorkflowsWorkflowQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCreateReviewWorkflowsWorkflow()
        {
            return ExceptField("createReviewWorkflowsWorkflow");
        }

        public MutationQueryBuilder WithUpdateReviewWorkflowsWorkflow(ReviewWorkflowsWorkflowQueryBuilder reviewWorkflowsWorkflowQueryBuilder, QueryBuilderParameter<string> documentId, QueryBuilderParameter<ReviewWorkflowsWorkflowInput> data, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "data", ArgumentValue = data} );
            return WithObjectField("updateReviewWorkflowsWorkflow", alias, reviewWorkflowsWorkflowQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdateReviewWorkflowsWorkflow()
        {
            return ExceptField("updateReviewWorkflowsWorkflow");
        }

        public MutationQueryBuilder WithDeleteReviewWorkflowsWorkflow(DeleteMutationResponseQueryBuilder deleteMutationResponseQueryBuilder, QueryBuilderParameter<string> documentId, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            return WithObjectField("deleteReviewWorkflowsWorkflow", alias, deleteMutationResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptDeleteReviewWorkflowsWorkflow()
        {
            return ExceptField("deleteReviewWorkflowsWorkflow");
        }

        public MutationQueryBuilder WithCreateReviewWorkflowsWorkflowStage(ReviewWorkflowsWorkflowStageQueryBuilder reviewWorkflowsWorkflowStageQueryBuilder, QueryBuilderParameter<ReviewWorkflowsWorkflowStageInput> data, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "data", ArgumentValue = data} );
            return WithObjectField("createReviewWorkflowsWorkflowStage", alias, reviewWorkflowsWorkflowStageQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCreateReviewWorkflowsWorkflowStage()
        {
            return ExceptField("createReviewWorkflowsWorkflowStage");
        }

        public MutationQueryBuilder WithUpdateReviewWorkflowsWorkflowStage(ReviewWorkflowsWorkflowStageQueryBuilder reviewWorkflowsWorkflowStageQueryBuilder, QueryBuilderParameter<string> documentId, QueryBuilderParameter<ReviewWorkflowsWorkflowStageInput> data, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "data", ArgumentValue = data} );
            return WithObjectField("updateReviewWorkflowsWorkflowStage", alias, reviewWorkflowsWorkflowStageQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdateReviewWorkflowsWorkflowStage()
        {
            return ExceptField("updateReviewWorkflowsWorkflowStage");
        }

        public MutationQueryBuilder WithDeleteReviewWorkflowsWorkflowStage(DeleteMutationResponseQueryBuilder deleteMutationResponseQueryBuilder, QueryBuilderParameter<string> documentId, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            return WithObjectField("deleteReviewWorkflowsWorkflowStage", alias, deleteMutationResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptDeleteReviewWorkflowsWorkflowStage()
        {
            return ExceptField("deleteReviewWorkflowsWorkflowStage");
        }

        public MutationQueryBuilder WithUpdateAboutUs(AboutUsQueryBuilder aboutUsQueryBuilder, QueryBuilderParameter<AboutUsInput> data, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "data", ArgumentValue = data} );
            return WithObjectField("updateAboutUs", alias, aboutUsQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdateAboutUs()
        {
            return ExceptField("updateAboutUs");
        }

        public MutationQueryBuilder WithDeleteAboutUs(DeleteMutationResponseQueryBuilder deleteMutationResponseQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("deleteAboutUs", alias, deleteMutationResponseQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MutationQueryBuilder ExceptDeleteAboutUs()
        {
            return ExceptField("deleteAboutUs");
        }

        public MutationQueryBuilder WithUpdateAccount(AccountQueryBuilder accountQueryBuilder, QueryBuilderParameter<AccountInput> data, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "data", ArgumentValue = data} );
            return WithObjectField("updateAccount", alias, accountQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdateAccount()
        {
            return ExceptField("updateAccount");
        }

        public MutationQueryBuilder WithDeleteAccount(DeleteMutationResponseQueryBuilder deleteMutationResponseQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("deleteAccount", alias, deleteMutationResponseQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MutationQueryBuilder ExceptDeleteAccount()
        {
            return ExceptField("deleteAccount");
        }

        public MutationQueryBuilder WithCreateAuthAdministrator(AuthAdministratorQueryBuilder authAdministratorQueryBuilder, QueryBuilderParameter<AuthAdministratorInput> data, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "data", ArgumentValue = data} );
            return WithObjectField("createAuthAdministrator", alias, authAdministratorQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCreateAuthAdministrator()
        {
            return ExceptField("createAuthAdministrator");
        }

        public MutationQueryBuilder WithUpdateAuthAdministrator(AuthAdministratorQueryBuilder authAdministratorQueryBuilder, QueryBuilderParameter<string> documentId, QueryBuilderParameter<AuthAdministratorInput> data, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "data", ArgumentValue = data} );
            return WithObjectField("updateAuthAdministrator", alias, authAdministratorQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdateAuthAdministrator()
        {
            return ExceptField("updateAuthAdministrator");
        }

        public MutationQueryBuilder WithDeleteAuthAdministrator(DeleteMutationResponseQueryBuilder deleteMutationResponseQueryBuilder, QueryBuilderParameter<string> documentId, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            return WithObjectField("deleteAuthAdministrator", alias, deleteMutationResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptDeleteAuthAdministrator()
        {
            return ExceptField("deleteAuthAdministrator");
        }

        public MutationQueryBuilder WithUpdateAuthAdministratorsResource(AuthAdministratorsResourceQueryBuilder authAdministratorsResourceQueryBuilder, QueryBuilderParameter<AuthAdministratorsResourceInput> data, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "data", ArgumentValue = data} );
            return WithObjectField("updateAuthAdministratorsResource", alias, authAdministratorsResourceQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdateAuthAdministratorsResource()
        {
            return ExceptField("updateAuthAdministratorsResource");
        }

        public MutationQueryBuilder WithDeleteAuthAdministratorsResource(DeleteMutationResponseQueryBuilder deleteMutationResponseQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("deleteAuthAdministratorsResource", alias, deleteMutationResponseQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MutationQueryBuilder ExceptDeleteAuthAdministratorsResource()
        {
            return ExceptField("deleteAuthAdministratorsResource");
        }

        public MutationQueryBuilder WithCreateAuthResource(AuthResourceQueryBuilder authResourceQueryBuilder, QueryBuilderParameter<AuthResourceInput> data, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "data", ArgumentValue = data} );
            return WithObjectField("createAuthResource", alias, authResourceQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCreateAuthResource()
        {
            return ExceptField("createAuthResource");
        }

        public MutationQueryBuilder WithUpdateAuthResource(AuthResourceQueryBuilder authResourceQueryBuilder, QueryBuilderParameter<string> documentId, QueryBuilderParameter<AuthResourceInput> data, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "data", ArgumentValue = data} );
            return WithObjectField("updateAuthResource", alias, authResourceQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdateAuthResource()
        {
            return ExceptField("updateAuthResource");
        }

        public MutationQueryBuilder WithDeleteAuthResource(DeleteMutationResponseQueryBuilder deleteMutationResponseQueryBuilder, QueryBuilderParameter<string> documentId, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            return WithObjectField("deleteAuthResource", alias, deleteMutationResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptDeleteAuthResource()
        {
            return ExceptField("deleteAuthResource");
        }

        public MutationQueryBuilder WithCreateAuthRole(AuthRoleQueryBuilder authRoleQueryBuilder, QueryBuilderParameter<AuthRoleInput> data, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "data", ArgumentValue = data} );
            return WithObjectField("createAuthRole", alias, authRoleQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCreateAuthRole()
        {
            return ExceptField("createAuthRole");
        }

        public MutationQueryBuilder WithUpdateAuthRole(AuthRoleQueryBuilder authRoleQueryBuilder, QueryBuilderParameter<string> documentId, QueryBuilderParameter<AuthRoleInput> data, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "data", ArgumentValue = data} );
            return WithObjectField("updateAuthRole", alias, authRoleQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdateAuthRole()
        {
            return ExceptField("updateAuthRole");
        }

        public MutationQueryBuilder WithDeleteAuthRole(DeleteMutationResponseQueryBuilder deleteMutationResponseQueryBuilder, QueryBuilderParameter<string> documentId, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            return WithObjectField("deleteAuthRole", alias, deleteMutationResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptDeleteAuthRole()
        {
            return ExceptField("deleteAuthRole");
        }

        public MutationQueryBuilder WithCreateAuthUser(AuthUserQueryBuilder authUserQueryBuilder, QueryBuilderParameter<AuthUserInput> data, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "data", ArgumentValue = data} );
            return WithObjectField("createAuthUser", alias, authUserQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCreateAuthUser()
        {
            return ExceptField("createAuthUser");
        }

        public MutationQueryBuilder WithUpdateAuthUser(AuthUserQueryBuilder authUserQueryBuilder, QueryBuilderParameter<string> documentId, QueryBuilderParameter<AuthUserInput> data, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "data", ArgumentValue = data} );
            return WithObjectField("updateAuthUser", alias, authUserQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdateAuthUser()
        {
            return ExceptField("updateAuthUser");
        }

        public MutationQueryBuilder WithDeleteAuthUser(DeleteMutationResponseQueryBuilder deleteMutationResponseQueryBuilder, QueryBuilderParameter<string> documentId, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            return WithObjectField("deleteAuthUser", alias, deleteMutationResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptDeleteAuthUser()
        {
            return ExceptField("deleteAuthUser");
        }

        public MutationQueryBuilder WithCreateAutoSignUp(AutoSignUpQueryBuilder autoSignUpQueryBuilder, QueryBuilderParameter<AutoSignUpInput> data, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "data", ArgumentValue = data} );
            return WithObjectField("createAutoSignUp", alias, autoSignUpQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCreateAutoSignUp()
        {
            return ExceptField("createAutoSignUp");
        }

        public MutationQueryBuilder WithUpdateAutoSignUp(AutoSignUpQueryBuilder autoSignUpQueryBuilder, QueryBuilderParameter<string> documentId, QueryBuilderParameter<AutoSignUpInput> data, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "data", ArgumentValue = data} );
            return WithObjectField("updateAutoSignUp", alias, autoSignUpQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdateAutoSignUp()
        {
            return ExceptField("updateAutoSignUp");
        }

        public MutationQueryBuilder WithDeleteAutoSignUp(DeleteMutationResponseQueryBuilder deleteMutationResponseQueryBuilder, QueryBuilderParameter<string> documentId, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            return WithObjectField("deleteAutoSignUp", alias, deleteMutationResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptDeleteAutoSignUp()
        {
            return ExceptField("deleteAutoSignUp");
        }

        public MutationQueryBuilder WithUpdateBoost(BoostQueryBuilder boostQueryBuilder, QueryBuilderParameter<BoostInput> data, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "data", ArgumentValue = data} );
            return WithObjectField("updateBoost", alias, boostQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdateBoost()
        {
            return ExceptField("updateBoost");
        }

        public MutationQueryBuilder WithDeleteBoost(DeleteMutationResponseQueryBuilder deleteMutationResponseQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("deleteBoost", alias, deleteMutationResponseQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MutationQueryBuilder ExceptDeleteBoost()
        {
            return ExceptField("deleteBoost");
        }

        public MutationQueryBuilder WithCreateBuyPoolz(BuyPoolzQueryBuilder buyPoolzQueryBuilder, QueryBuilderParameter<BuyPoolzInput> data, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "data", ArgumentValue = data} );
            return WithObjectField("createBuyPoolz", alias, buyPoolzQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCreateBuyPoolz()
        {
            return ExceptField("createBuyPoolz");
        }

        public MutationQueryBuilder WithUpdateBuyPoolz(BuyPoolzQueryBuilder buyPoolzQueryBuilder, QueryBuilderParameter<string> documentId, QueryBuilderParameter<BuyPoolzInput> data, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "data", ArgumentValue = data} );
            return WithObjectField("updateBuyPoolz", alias, buyPoolzQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdateBuyPoolz()
        {
            return ExceptField("updateBuyPoolz");
        }

        public MutationQueryBuilder WithDeleteBuyPoolz(DeleteMutationResponseQueryBuilder deleteMutationResponseQueryBuilder, QueryBuilderParameter<string> documentId, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            return WithObjectField("deleteBuyPoolz", alias, deleteMutationResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptDeleteBuyPoolz()
        {
            return ExceptField("deleteBuyPoolz");
        }

        public MutationQueryBuilder WithCreateBuyWith(BuyWithQueryBuilder buyWithQueryBuilder, QueryBuilderParameter<BuyWithInput> data, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "data", ArgumentValue = data} );
            return WithObjectField("createBuyWith", alias, buyWithQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCreateBuyWith()
        {
            return ExceptField("createBuyWith");
        }

        public MutationQueryBuilder WithUpdateBuyWith(BuyWithQueryBuilder buyWithQueryBuilder, QueryBuilderParameter<string> documentId, QueryBuilderParameter<BuyWithInput> data, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "data", ArgumentValue = data} );
            return WithObjectField("updateBuyWith", alias, buyWithQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdateBuyWith()
        {
            return ExceptField("updateBuyWith");
        }

        public MutationQueryBuilder WithDeleteBuyWith(DeleteMutationResponseQueryBuilder deleteMutationResponseQueryBuilder, QueryBuilderParameter<string> documentId, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            return WithObjectField("deleteBuyWith", alias, deleteMutationResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptDeleteBuyWith()
        {
            return ExceptField("deleteBuyWith");
        }

        public MutationQueryBuilder WithCreateChain(ChainQueryBuilder chainQueryBuilder, QueryBuilderParameter<ChainInput> data, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "data", ArgumentValue = data} );
            return WithObjectField("createChain", alias, chainQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCreateChain()
        {
            return ExceptField("createChain");
        }

        public MutationQueryBuilder WithUpdateChain(ChainQueryBuilder chainQueryBuilder, QueryBuilderParameter<string> documentId, QueryBuilderParameter<ChainInput> data, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "data", ArgumentValue = data} );
            return WithObjectField("updateChain", alias, chainQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdateChain()
        {
            return ExceptField("updateChain");
        }

        public MutationQueryBuilder WithDeleteChain(DeleteMutationResponseQueryBuilder deleteMutationResponseQueryBuilder, QueryBuilderParameter<string> documentId, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            return WithObjectField("deleteChain", alias, deleteMutationResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptDeleteChain()
        {
            return ExceptField("deleteChain");
        }

        public MutationQueryBuilder WithCreateChainSetting(ChainSettingQueryBuilder chainSettingQueryBuilder, QueryBuilderParameter<ChainSettingInput> data, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "data", ArgumentValue = data} );
            return WithObjectField("createChainSetting", alias, chainSettingQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCreateChainSetting()
        {
            return ExceptField("createChainSetting");
        }

        public MutationQueryBuilder WithUpdateChainSetting(ChainSettingQueryBuilder chainSettingQueryBuilder, QueryBuilderParameter<string> documentId, QueryBuilderParameter<ChainSettingInput> data, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "data", ArgumentValue = data} );
            return WithObjectField("updateChainSetting", alias, chainSettingQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdateChainSetting()
        {
            return ExceptField("updateChainSetting");
        }

        public MutationQueryBuilder WithDeleteChainSetting(DeleteMutationResponseQueryBuilder deleteMutationResponseQueryBuilder, QueryBuilderParameter<string> documentId, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            return WithObjectField("deleteChainSetting", alias, deleteMutationResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptDeleteChainSetting()
        {
            return ExceptField("deleteChainSetting");
        }

        public MutationQueryBuilder WithUpdateCondition(ConditionQueryBuilder conditionQueryBuilder, QueryBuilderParameter<ConditionInput> data, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "data", ArgumentValue = data} );
            return WithObjectField("updateCondition", alias, conditionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdateCondition()
        {
            return ExceptField("updateCondition");
        }

        public MutationQueryBuilder WithDeleteCondition(DeleteMutationResponseQueryBuilder deleteMutationResponseQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("deleteCondition", alias, deleteMutationResponseQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MutationQueryBuilder ExceptDeleteCondition()
        {
            return ExceptField("deleteCondition");
        }

        public MutationQueryBuilder WithCreateContract(ContractQueryBuilder contractQueryBuilder, QueryBuilderParameter<ContractInput> data, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "data", ArgumentValue = data} );
            return WithObjectField("createContract", alias, contractQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCreateContract()
        {
            return ExceptField("createContract");
        }

        public MutationQueryBuilder WithUpdateContract(ContractQueryBuilder contractQueryBuilder, QueryBuilderParameter<string> documentId, QueryBuilderParameter<ContractInput> data, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "data", ArgumentValue = data} );
            return WithObjectField("updateContract", alias, contractQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdateContract()
        {
            return ExceptField("updateContract");
        }

        public MutationQueryBuilder WithDeleteContract(DeleteMutationResponseQueryBuilder deleteMutationResponseQueryBuilder, QueryBuilderParameter<string> documentId, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            return WithObjectField("deleteContract", alias, deleteMutationResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptDeleteContract()
        {
            return ExceptField("deleteContract");
        }

        public MutationQueryBuilder WithCreateContractType(ContractTypeQueryBuilder contractTypeQueryBuilder, QueryBuilderParameter<ContractTypeInput> data, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "data", ArgumentValue = data} );
            return WithObjectField("createContractType", alias, contractTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCreateContractType()
        {
            return ExceptField("createContractType");
        }

        public MutationQueryBuilder WithUpdateContractType(ContractTypeQueryBuilder contractTypeQueryBuilder, QueryBuilderParameter<string> documentId, QueryBuilderParameter<ContractTypeInput> data, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "data", ArgumentValue = data} );
            return WithObjectField("updateContractType", alias, contractTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdateContractType()
        {
            return ExceptField("updateContractType");
        }

        public MutationQueryBuilder WithDeleteContractType(DeleteMutationResponseQueryBuilder deleteMutationResponseQueryBuilder, QueryBuilderParameter<string> documentId, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            return WithObjectField("deleteContractType", alias, deleteMutationResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptDeleteContractType()
        {
            return ExceptField("deleteContractType");
        }

        public MutationQueryBuilder WithCreateContractsOnChain(ContractsOnChainQueryBuilder contractsOnChainQueryBuilder, QueryBuilderParameter<ContractsOnChainInput> data, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "data", ArgumentValue = data} );
            return WithObjectField("createContractsOnChain", alias, contractsOnChainQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCreateContractsOnChain()
        {
            return ExceptField("createContractsOnChain");
        }

        public MutationQueryBuilder WithUpdateContractsOnChain(ContractsOnChainQueryBuilder contractsOnChainQueryBuilder, QueryBuilderParameter<string> documentId, QueryBuilderParameter<ContractsOnChainInput> data, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "data", ArgumentValue = data} );
            return WithObjectField("updateContractsOnChain", alias, contractsOnChainQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdateContractsOnChain()
        {
            return ExceptField("updateContractsOnChain");
        }

        public MutationQueryBuilder WithDeleteContractsOnChain(DeleteMutationResponseQueryBuilder deleteMutationResponseQueryBuilder, QueryBuilderParameter<string> documentId, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            return WithObjectField("deleteContractsOnChain", alias, deleteMutationResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptDeleteContractsOnChain()
        {
            return ExceptField("deleteContractsOnChain");
        }

        public MutationQueryBuilder WithCreateCover(CoverQueryBuilder coverQueryBuilder, QueryBuilderParameter<CoverInput> data, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "data", ArgumentValue = data} );
            return WithObjectField("createCover", alias, coverQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCreateCover()
        {
            return ExceptField("createCover");
        }

        public MutationQueryBuilder WithUpdateCover(CoverQueryBuilder coverQueryBuilder, QueryBuilderParameter<string> documentId, QueryBuilderParameter<CoverInput> data, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "data", ArgumentValue = data} );
            return WithObjectField("updateCover", alias, coverQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdateCover()
        {
            return ExceptField("updateCover");
        }

        public MutationQueryBuilder WithDeleteCover(DeleteMutationResponseQueryBuilder deleteMutationResponseQueryBuilder, QueryBuilderParameter<string> documentId, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            return WithObjectField("deleteCover", alias, deleteMutationResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptDeleteCover()
        {
            return ExceptField("deleteCover");
        }

        public MutationQueryBuilder WithCreateDefaultWallet(DefaultWalletQueryBuilder defaultWalletQueryBuilder, QueryBuilderParameter<DefaultWalletInput> data, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "data", ArgumentValue = data} );
            return WithObjectField("createDefaultWallet", alias, defaultWalletQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCreateDefaultWallet()
        {
            return ExceptField("createDefaultWallet");
        }

        public MutationQueryBuilder WithUpdateDefaultWallet(DefaultWalletQueryBuilder defaultWalletQueryBuilder, QueryBuilderParameter<string> documentId, QueryBuilderParameter<DefaultWalletInput> data, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "data", ArgumentValue = data} );
            return WithObjectField("updateDefaultWallet", alias, defaultWalletQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdateDefaultWallet()
        {
            return ExceptField("updateDefaultWallet");
        }

        public MutationQueryBuilder WithDeleteDefaultWallet(DeleteMutationResponseQueryBuilder deleteMutationResponseQueryBuilder, QueryBuilderParameter<string> documentId, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            return WithObjectField("deleteDefaultWallet", alias, deleteMutationResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptDeleteDefaultWallet()
        {
            return ExceptField("deleteDefaultWallet");
        }

        public MutationQueryBuilder WithCreateEvmVersion(EvmVersionQueryBuilder evmVersionQueryBuilder, QueryBuilderParameter<EvmVersionInput> data, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "data", ArgumentValue = data} );
            return WithObjectField("createEvmVersion", alias, evmVersionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCreateEvmVersion()
        {
            return ExceptField("createEvmVersion");
        }

        public MutationQueryBuilder WithUpdateEvmVersion(EvmVersionQueryBuilder evmVersionQueryBuilder, QueryBuilderParameter<string> documentId, QueryBuilderParameter<EvmVersionInput> data, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "data", ArgumentValue = data} );
            return WithObjectField("updateEvmVersion", alias, evmVersionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdateEvmVersion()
        {
            return ExceptField("updateEvmVersion");
        }

        public MutationQueryBuilder WithDeleteEvmVersion(DeleteMutationResponseQueryBuilder deleteMutationResponseQueryBuilder, QueryBuilderParameter<string> documentId, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            return WithObjectField("deleteEvmVersion", alias, deleteMutationResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptDeleteEvmVersion()
        {
            return ExceptField("deleteEvmVersion");
        }

        public MutationQueryBuilder WithUpdateFooter(FooterQueryBuilder footerQueryBuilder, QueryBuilderParameter<FooterInput> data, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "data", ArgumentValue = data} );
            return WithObjectField("updateFooter", alias, footerQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdateFooter()
        {
            return ExceptField("updateFooter");
        }

        public MutationQueryBuilder WithDeleteFooter(DeleteMutationResponseQueryBuilder deleteMutationResponseQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("deleteFooter", alias, deleteMutationResponseQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MutationQueryBuilder ExceptDeleteFooter()
        {
            return ExceptField("deleteFooter");
        }

        public MutationQueryBuilder WithCreateGrow(GrowQueryBuilder growQueryBuilder, QueryBuilderParameter<GrowInput> data, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "data", ArgumentValue = data} );
            return WithObjectField("createGrow", alias, growQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCreateGrow()
        {
            return ExceptField("createGrow");
        }

        public MutationQueryBuilder WithUpdateGrow(GrowQueryBuilder growQueryBuilder, QueryBuilderParameter<string> documentId, QueryBuilderParameter<GrowInput> data, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "data", ArgumentValue = data} );
            return WithObjectField("updateGrow", alias, growQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdateGrow()
        {
            return ExceptField("updateGrow");
        }

        public MutationQueryBuilder WithDeleteGrow(DeleteMutationResponseQueryBuilder deleteMutationResponseQueryBuilder, QueryBuilderParameter<string> documentId, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            return WithObjectField("deleteGrow", alias, deleteMutationResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptDeleteGrow()
        {
            return ExceptField("deleteGrow");
        }

        public MutationQueryBuilder WithCreateGrowBadge(GrowBadgeQueryBuilder growBadgeQueryBuilder, QueryBuilderParameter<GrowBadgeInput> data, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "data", ArgumentValue = data} );
            return WithObjectField("createGrowBadge", alias, growBadgeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCreateGrowBadge()
        {
            return ExceptField("createGrowBadge");
        }

        public MutationQueryBuilder WithUpdateGrowBadge(GrowBadgeQueryBuilder growBadgeQueryBuilder, QueryBuilderParameter<string> documentId, QueryBuilderParameter<GrowBadgeInput> data, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "data", ArgumentValue = data} );
            return WithObjectField("updateGrowBadge", alias, growBadgeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdateGrowBadge()
        {
            return ExceptField("updateGrowBadge");
        }

        public MutationQueryBuilder WithDeleteGrowBadge(DeleteMutationResponseQueryBuilder deleteMutationResponseQueryBuilder, QueryBuilderParameter<string> documentId, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            return WithObjectField("deleteGrowBadge", alias, deleteMutationResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptDeleteGrowBadge()
        {
            return ExceptField("deleteGrowBadge");
        }

        public MutationQueryBuilder WithUpdateHeader(HeaderQueryBuilder headerQueryBuilder, QueryBuilderParameter<HeaderInput> data, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "data", ArgumentValue = data} );
            return WithObjectField("updateHeader", alias, headerQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdateHeader()
        {
            return ExceptField("updateHeader");
        }

        public MutationQueryBuilder WithDeleteHeader(DeleteMutationResponseQueryBuilder deleteMutationResponseQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("deleteHeader", alias, deleteMutationResponseQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MutationQueryBuilder ExceptDeleteHeader()
        {
            return ExceptField("deleteHeader");
        }

        public MutationQueryBuilder WithCreateIdoBadge(IdoBadgeQueryBuilder idoBadgeQueryBuilder, QueryBuilderParameter<IdoBadgeInput> data, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "data", ArgumentValue = data} );
            return WithObjectField("createIdoBadge", alias, idoBadgeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCreateIdoBadge()
        {
            return ExceptField("createIdoBadge");
        }

        public MutationQueryBuilder WithUpdateIdoBadge(IdoBadgeQueryBuilder idoBadgeQueryBuilder, QueryBuilderParameter<string> documentId, QueryBuilderParameter<IdoBadgeInput> data, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "data", ArgumentValue = data} );
            return WithObjectField("updateIdoBadge", alias, idoBadgeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdateIdoBadge()
        {
            return ExceptField("updateIdoBadge");
        }

        public MutationQueryBuilder WithDeleteIdoBadge(DeleteMutationResponseQueryBuilder deleteMutationResponseQueryBuilder, QueryBuilderParameter<string> documentId, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            return WithObjectField("deleteIdoBadge", alias, deleteMutationResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptDeleteIdoBadge()
        {
            return ExceptField("deleteIdoBadge");
        }

        public MutationQueryBuilder WithCreateIgnoreLeaderBoardWallet(IgnoreLeaderBoardWalletQueryBuilder ignoreLeaderBoardWalletQueryBuilder, QueryBuilderParameter<IgnoreLeaderBoardWalletInput> data, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "data", ArgumentValue = data} );
            return WithObjectField("createIgnoreLeaderBoardWallet", alias, ignoreLeaderBoardWalletQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCreateIgnoreLeaderBoardWallet()
        {
            return ExceptField("createIgnoreLeaderBoardWallet");
        }

        public MutationQueryBuilder WithUpdateIgnoreLeaderBoardWallet(IgnoreLeaderBoardWalletQueryBuilder ignoreLeaderBoardWalletQueryBuilder, QueryBuilderParameter<string> documentId, QueryBuilderParameter<IgnoreLeaderBoardWalletInput> data, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "data", ArgumentValue = data} );
            return WithObjectField("updateIgnoreLeaderBoardWallet", alias, ignoreLeaderBoardWalletQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdateIgnoreLeaderBoardWallet()
        {
            return ExceptField("updateIgnoreLeaderBoardWallet");
        }

        public MutationQueryBuilder WithDeleteIgnoreLeaderBoardWallet(DeleteMutationResponseQueryBuilder deleteMutationResponseQueryBuilder, QueryBuilderParameter<string> documentId, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            return WithObjectField("deleteIgnoreLeaderBoardWallet", alias, deleteMutationResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptDeleteIgnoreLeaderBoardWallet()
        {
            return ExceptField("deleteIgnoreLeaderBoardWallet");
        }

        public MutationQueryBuilder WithUpdateInvestTerm(InvestTermQueryBuilder investTermQueryBuilder, QueryBuilderParameter<InvestTermInput> data, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "data", ArgumentValue = data} );
            return WithObjectField("updateInvestTerm", alias, investTermQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdateInvestTerm()
        {
            return ExceptField("updateInvestTerm");
        }

        public MutationQueryBuilder WithDeleteInvestTerm(DeleteMutationResponseQueryBuilder deleteMutationResponseQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("deleteInvestTerm", alias, deleteMutationResponseQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MutationQueryBuilder ExceptDeleteInvestTerm()
        {
            return ExceptField("deleteInvestTerm");
        }

        public MutationQueryBuilder WithCreateInvestor(InvestorQueryBuilder investorQueryBuilder, QueryBuilderParameter<InvestorInput> data, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "data", ArgumentValue = data} );
            return WithObjectField("createInvestor", alias, investorQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCreateInvestor()
        {
            return ExceptField("createInvestor");
        }

        public MutationQueryBuilder WithUpdateInvestor(InvestorQueryBuilder investorQueryBuilder, QueryBuilderParameter<string> documentId, QueryBuilderParameter<InvestorInput> data, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "data", ArgumentValue = data} );
            return WithObjectField("updateInvestor", alias, investorQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdateInvestor()
        {
            return ExceptField("updateInvestor");
        }

        public MutationQueryBuilder WithDeleteInvestor(DeleteMutationResponseQueryBuilder deleteMutationResponseQueryBuilder, QueryBuilderParameter<string> documentId, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            return WithObjectField("deleteInvestor", alias, deleteMutationResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptDeleteInvestor()
        {
            return ExceptField("deleteInvestor");
        }

        public MutationQueryBuilder WithUpdateLatestType(LatestTypeQueryBuilder latestTypeQueryBuilder, QueryBuilderParameter<LatestTypeInput> data, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "data", ArgumentValue = data} );
            return WithObjectField("updateLatestType", alias, latestTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdateLatestType()
        {
            return ExceptField("updateLatestType");
        }

        public MutationQueryBuilder WithDeleteLatestType(DeleteMutationResponseQueryBuilder deleteMutationResponseQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("deleteLatestType", alias, deleteMutationResponseQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MutationQueryBuilder ExceptDeleteLatestType()
        {
            return ExceptField("deleteLatestType");
        }

        public MutationQueryBuilder WithCreateLinkType(LinkTypeQueryBuilder linkTypeQueryBuilder, QueryBuilderParameter<LinkTypeInput> data, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "data", ArgumentValue = data} );
            return WithObjectField("createLinkType", alias, linkTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCreateLinkType()
        {
            return ExceptField("createLinkType");
        }

        public MutationQueryBuilder WithUpdateLinkType(LinkTypeQueryBuilder linkTypeQueryBuilder, QueryBuilderParameter<string> documentId, QueryBuilderParameter<LinkTypeInput> data, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "data", ArgumentValue = data} );
            return WithObjectField("updateLinkType", alias, linkTypeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdateLinkType()
        {
            return ExceptField("updateLinkType");
        }

        public MutationQueryBuilder WithDeleteLinkType(DeleteMutationResponseQueryBuilder deleteMutationResponseQueryBuilder, QueryBuilderParameter<string> documentId, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            return WithObjectField("deleteLinkType", alias, deleteMutationResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptDeleteLinkType()
        {
            return ExceptField("deleteLinkType");
        }

        public MutationQueryBuilder WithUpdateLockPoolzTerm(LockPoolzTermQueryBuilder lockPoolzTermQueryBuilder, QueryBuilderParameter<LockPoolzTermInput> data, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "data", ArgumentValue = data} );
            return WithObjectField("updateLockPoolzTerm", alias, lockPoolzTermQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdateLockPoolzTerm()
        {
            return ExceptField("updateLockPoolzTerm");
        }

        public MutationQueryBuilder WithDeleteLockPoolzTerm(DeleteMutationResponseQueryBuilder deleteMutationResponseQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("deleteLockPoolzTerm", alias, deleteMutationResponseQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MutationQueryBuilder ExceptDeleteLockPoolzTerm()
        {
            return ExceptField("deleteLockPoolzTerm");
        }

        public MutationQueryBuilder WithCreateLockTokenWhitelist(LockTokenWhitelistQueryBuilder lockTokenWhitelistQueryBuilder, QueryBuilderParameter<LockTokenWhitelistInput> data, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "data", ArgumentValue = data} );
            return WithObjectField("createLockTokenWhitelist", alias, lockTokenWhitelistQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCreateLockTokenWhitelist()
        {
            return ExceptField("createLockTokenWhitelist");
        }

        public MutationQueryBuilder WithUpdateLockTokenWhitelist(LockTokenWhitelistQueryBuilder lockTokenWhitelistQueryBuilder, QueryBuilderParameter<string> documentId, QueryBuilderParameter<LockTokenWhitelistInput> data, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "data", ArgumentValue = data} );
            return WithObjectField("updateLockTokenWhitelist", alias, lockTokenWhitelistQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdateLockTokenWhitelist()
        {
            return ExceptField("updateLockTokenWhitelist");
        }

        public MutationQueryBuilder WithDeleteLockTokenWhitelist(DeleteMutationResponseQueryBuilder deleteMutationResponseQueryBuilder, QueryBuilderParameter<string> documentId, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            return WithObjectField("deleteLockTokenWhitelist", alias, deleteMutationResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptDeleteLockTokenWhitelist()
        {
            return ExceptField("deleteLockTokenWhitelist");
        }

        public MutationQueryBuilder WithUpdateMain(MainQueryBuilder mainQueryBuilder, QueryBuilderParameter<MainInput> data, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "data", ArgumentValue = data} );
            return WithObjectField("updateMain", alias, mainQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdateMain()
        {
            return ExceptField("updateMain");
        }

        public MutationQueryBuilder WithDeleteMain(DeleteMutationResponseQueryBuilder deleteMutationResponseQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("deleteMain", alias, deleteMutationResponseQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MutationQueryBuilder ExceptDeleteMain()
        {
            return ExceptField("deleteMain");
        }

        public MutationQueryBuilder WithCreateMarketCapBadge(MarketCapBadgeQueryBuilder marketCapBadgeQueryBuilder, QueryBuilderParameter<MarketCapBadgeInput> data, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "data", ArgumentValue = data} );
            return WithObjectField("createMarketCapBadge", alias, marketCapBadgeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCreateMarketCapBadge()
        {
            return ExceptField("createMarketCapBadge");
        }

        public MutationQueryBuilder WithUpdateMarketCapBadge(MarketCapBadgeQueryBuilder marketCapBadgeQueryBuilder, QueryBuilderParameter<string> documentId, QueryBuilderParameter<MarketCapBadgeInput> data, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "data", ArgumentValue = data} );
            return WithObjectField("updateMarketCapBadge", alias, marketCapBadgeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdateMarketCapBadge()
        {
            return ExceptField("updateMarketCapBadge");
        }

        public MutationQueryBuilder WithDeleteMarketCapBadge(DeleteMutationResponseQueryBuilder deleteMutationResponseQueryBuilder, QueryBuilderParameter<string> documentId, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            return WithObjectField("deleteMarketCapBadge", alias, deleteMutationResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptDeleteMarketCapBadge()
        {
            return ExceptField("deleteMarketCapBadge");
        }

        public MutationQueryBuilder WithCreateMediaKit(MediaKitQueryBuilder mediaKitQueryBuilder, QueryBuilderParameter<MediaKitInput> data, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "data", ArgumentValue = data} );
            return WithObjectField("createMediaKit", alias, mediaKitQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCreateMediaKit()
        {
            return ExceptField("createMediaKit");
        }

        public MutationQueryBuilder WithUpdateMediaKit(MediaKitQueryBuilder mediaKitQueryBuilder, QueryBuilderParameter<string> documentId, QueryBuilderParameter<MediaKitInput> data, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "data", ArgumentValue = data} );
            return WithObjectField("updateMediaKit", alias, mediaKitQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdateMediaKit()
        {
            return ExceptField("updateMediaKit");
        }

        public MutationQueryBuilder WithDeleteMediaKit(DeleteMutationResponseQueryBuilder deleteMutationResponseQueryBuilder, QueryBuilderParameter<string> documentId, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            return WithObjectField("deleteMediaKit", alias, deleteMutationResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptDeleteMediaKit()
        {
            return ExceptField("deleteMediaKit");
        }

        public MutationQueryBuilder WithCreateNonEvmChain(NonEvmChainQueryBuilder nonEvmChainQueryBuilder, QueryBuilderParameter<NonEvmChainInput> data, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "data", ArgumentValue = data} );
            return WithObjectField("createNonEvmChain", alias, nonEvmChainQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCreateNonEvmChain()
        {
            return ExceptField("createNonEvmChain");
        }

        public MutationQueryBuilder WithUpdateNonEvmChain(NonEvmChainQueryBuilder nonEvmChainQueryBuilder, QueryBuilderParameter<string> documentId, QueryBuilderParameter<NonEvmChainInput> data, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "data", ArgumentValue = data} );
            return WithObjectField("updateNonEvmChain", alias, nonEvmChainQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdateNonEvmChain()
        {
            return ExceptField("updateNonEvmChain");
        }

        public MutationQueryBuilder WithDeleteNonEvmChain(DeleteMutationResponseQueryBuilder deleteMutationResponseQueryBuilder, QueryBuilderParameter<string> documentId, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            return WithObjectField("deleteNonEvmChain", alias, deleteMutationResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptDeleteNonEvmChain()
        {
            return ExceptField("deleteNonEvmChain");
        }

        public MutationQueryBuilder WithCreateOpenGrant(OpenGrantQueryBuilder openGrantQueryBuilder, QueryBuilderParameter<OpenGrantInput> data, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "data", ArgumentValue = data} );
            return WithObjectField("createOpenGrant", alias, openGrantQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCreateOpenGrant()
        {
            return ExceptField("createOpenGrant");
        }

        public MutationQueryBuilder WithUpdateOpenGrant(OpenGrantQueryBuilder openGrantQueryBuilder, QueryBuilderParameter<string> documentId, QueryBuilderParameter<OpenGrantInput> data, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "data", ArgumentValue = data} );
            return WithObjectField("updateOpenGrant", alias, openGrantQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdateOpenGrant()
        {
            return ExceptField("updateOpenGrant");
        }

        public MutationQueryBuilder WithDeleteOpenGrant(DeleteMutationResponseQueryBuilder deleteMutationResponseQueryBuilder, QueryBuilderParameter<string> documentId, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            return WithObjectField("deleteOpenGrant", alias, deleteMutationResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptDeleteOpenGrant()
        {
            return ExceptField("deleteOpenGrant");
        }

        public MutationQueryBuilder WithCreateOurPartner(OurPartnerQueryBuilder ourPartnerQueryBuilder, QueryBuilderParameter<OurPartnerInput> data, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "data", ArgumentValue = data} );
            return WithObjectField("createOurPartner", alias, ourPartnerQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCreateOurPartner()
        {
            return ExceptField("createOurPartner");
        }

        public MutationQueryBuilder WithUpdateOurPartner(OurPartnerQueryBuilder ourPartnerQueryBuilder, QueryBuilderParameter<string> documentId, QueryBuilderParameter<OurPartnerInput> data, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "data", ArgumentValue = data} );
            return WithObjectField("updateOurPartner", alias, ourPartnerQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdateOurPartner()
        {
            return ExceptField("updateOurPartner");
        }

        public MutationQueryBuilder WithDeleteOurPartner(DeleteMutationResponseQueryBuilder deleteMutationResponseQueryBuilder, QueryBuilderParameter<string> documentId, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            return WithObjectField("deleteOurPartner", alias, deleteMutationResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptDeleteOurPartner()
        {
            return ExceptField("deleteOurPartner");
        }

        public MutationQueryBuilder WithCreatePageInfo(PageInfoQueryBuilder pageInfoQueryBuilder, QueryBuilderParameter<PageInfoInput> data, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "data", ArgumentValue = data} );
            return WithObjectField("createPageInfo", alias, pageInfoQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCreatePageInfo()
        {
            return ExceptField("createPageInfo");
        }

        public MutationQueryBuilder WithUpdatePageInfo(PageInfoQueryBuilder pageInfoQueryBuilder, QueryBuilderParameter<string> documentId, QueryBuilderParameter<PageInfoInput> data, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "data", ArgumentValue = data} );
            return WithObjectField("updatePageInfo", alias, pageInfoQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdatePageInfo()
        {
            return ExceptField("updatePageInfo");
        }

        public MutationQueryBuilder WithDeletePageInfo(DeleteMutationResponseQueryBuilder deleteMutationResponseQueryBuilder, QueryBuilderParameter<string> documentId, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            return WithObjectField("deletePageInfo", alias, deleteMutationResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptDeletePageInfo()
        {
            return ExceptField("deletePageInfo");
        }

        public MutationQueryBuilder WithCreatePoolzBoutique(PoolzBoutiqueQueryBuilder poolzBoutiqueQueryBuilder, QueryBuilderParameter<PoolzBoutiqueInput> data, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "data", ArgumentValue = data} );
            return WithObjectField("createPoolzBoutique", alias, poolzBoutiqueQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCreatePoolzBoutique()
        {
            return ExceptField("createPoolzBoutique");
        }

        public MutationQueryBuilder WithUpdatePoolzBoutique(PoolzBoutiqueQueryBuilder poolzBoutiqueQueryBuilder, QueryBuilderParameter<string> documentId, QueryBuilderParameter<PoolzBoutiqueInput> data, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "data", ArgumentValue = data} );
            return WithObjectField("updatePoolzBoutique", alias, poolzBoutiqueQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdatePoolzBoutique()
        {
            return ExceptField("updatePoolzBoutique");
        }

        public MutationQueryBuilder WithDeletePoolzBoutique(DeleteMutationResponseQueryBuilder deleteMutationResponseQueryBuilder, QueryBuilderParameter<string> documentId, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            return WithObjectField("deletePoolzBoutique", alias, deleteMutationResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptDeletePoolzBoutique()
        {
            return ExceptField("deletePoolzBoutique");
        }

        public MutationQueryBuilder WithCreatePragmaVersion(PragmaVersionQueryBuilder pragmaVersionQueryBuilder, QueryBuilderParameter<PragmaVersionInput> data, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "data", ArgumentValue = data} );
            return WithObjectField("createPragmaVersion", alias, pragmaVersionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCreatePragmaVersion()
        {
            return ExceptField("createPragmaVersion");
        }

        public MutationQueryBuilder WithUpdatePragmaVersion(PragmaVersionQueryBuilder pragmaVersionQueryBuilder, QueryBuilderParameter<string> documentId, QueryBuilderParameter<PragmaVersionInput> data, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "data", ArgumentValue = data} );
            return WithObjectField("updatePragmaVersion", alias, pragmaVersionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdatePragmaVersion()
        {
            return ExceptField("updatePragmaVersion");
        }

        public MutationQueryBuilder WithDeletePragmaVersion(DeleteMutationResponseQueryBuilder deleteMutationResponseQueryBuilder, QueryBuilderParameter<string> documentId, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            return WithObjectField("deletePragmaVersion", alias, deleteMutationResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptDeletePragmaVersion()
        {
            return ExceptField("deletePragmaVersion");
        }

        public MutationQueryBuilder WithUpdatePrivacy(PrivacyQueryBuilder privacyQueryBuilder, QueryBuilderParameter<PrivacyInput> data, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "data", ArgumentValue = data} );
            return WithObjectField("updatePrivacy", alias, privacyQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdatePrivacy()
        {
            return ExceptField("updatePrivacy");
        }

        public MutationQueryBuilder WithDeletePrivacy(DeleteMutationResponseQueryBuilder deleteMutationResponseQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("deletePrivacy", alias, deleteMutationResponseQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MutationQueryBuilder ExceptDeletePrivacy()
        {
            return ExceptField("deletePrivacy");
        }

        public MutationQueryBuilder WithCreateProjectsInformation(ProjectsInformationQueryBuilder projectsInformationQueryBuilder, QueryBuilderParameter<ProjectsInformationInput> data, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "data", ArgumentValue = data} );
            return WithObjectField("createProjectsInformation", alias, projectsInformationQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCreateProjectsInformation()
        {
            return ExceptField("createProjectsInformation");
        }

        public MutationQueryBuilder WithUpdateProjectsInformation(ProjectsInformationQueryBuilder projectsInformationQueryBuilder, QueryBuilderParameter<string> documentId, QueryBuilderParameter<ProjectsInformationInput> data, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "data", ArgumentValue = data} );
            return WithObjectField("updateProjectsInformation", alias, projectsInformationQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdateProjectsInformation()
        {
            return ExceptField("updateProjectsInformation");
        }

        public MutationQueryBuilder WithDeleteProjectsInformation(DeleteMutationResponseQueryBuilder deleteMutationResponseQueryBuilder, QueryBuilderParameter<string> documentId, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            return WithObjectField("deleteProjectsInformation", alias, deleteMutationResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptDeleteProjectsInformation()
        {
            return ExceptField("deleteProjectsInformation");
        }

        public MutationQueryBuilder WithCreateSeasonPass(SeasonPassQueryBuilder seasonPassQueryBuilder, QueryBuilderParameter<SeasonPassInput> data, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "data", ArgumentValue = data} );
            return WithObjectField("createSeasonPass", alias, seasonPassQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCreateSeasonPass()
        {
            return ExceptField("createSeasonPass");
        }

        public MutationQueryBuilder WithUpdateSeasonPass(SeasonPassQueryBuilder seasonPassQueryBuilder, QueryBuilderParameter<string> documentId, QueryBuilderParameter<SeasonPassInput> data, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "data", ArgumentValue = data} );
            return WithObjectField("updateSeasonPass", alias, seasonPassQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdateSeasonPass()
        {
            return ExceptField("updateSeasonPass");
        }

        public MutationQueryBuilder WithDeleteSeasonPass(DeleteMutationResponseQueryBuilder deleteMutationResponseQueryBuilder, QueryBuilderParameter<string> documentId, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            return WithObjectField("deleteSeasonPass", alias, deleteMutationResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptDeleteSeasonPass()
        {
            return ExceptField("deleteSeasonPass");
        }

        public MutationQueryBuilder WithCreateStakingCoolDown(StakingCoolDownQueryBuilder stakingCoolDownQueryBuilder, QueryBuilderParameter<StakingCoolDownInput> data, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "data", ArgumentValue = data} );
            return WithObjectField("createStakingCoolDown", alias, stakingCoolDownQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCreateStakingCoolDown()
        {
            return ExceptField("createStakingCoolDown");
        }

        public MutationQueryBuilder WithUpdateStakingCoolDown(StakingCoolDownQueryBuilder stakingCoolDownQueryBuilder, QueryBuilderParameter<string> documentId, QueryBuilderParameter<StakingCoolDownInput> data, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "data", ArgumentValue = data} );
            return WithObjectField("updateStakingCoolDown", alias, stakingCoolDownQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdateStakingCoolDown()
        {
            return ExceptField("updateStakingCoolDown");
        }

        public MutationQueryBuilder WithDeleteStakingCoolDown(DeleteMutationResponseQueryBuilder deleteMutationResponseQueryBuilder, QueryBuilderParameter<string> documentId, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            return WithObjectField("deleteStakingCoolDown", alias, deleteMutationResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptDeleteStakingCoolDown()
        {
            return ExceptField("deleteStakingCoolDown");
        }

        public MutationQueryBuilder WithUpdateTokenomic(TokenomicQueryBuilder tokenomicQueryBuilder, QueryBuilderParameter<TokenomicInput> data, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "data", ArgumentValue = data} );
            return WithObjectField("updateTokenomic", alias, tokenomicQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdateTokenomic()
        {
            return ExceptField("updateTokenomic");
        }

        public MutationQueryBuilder WithDeleteTokenomic(DeleteMutationResponseQueryBuilder deleteMutationResponseQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("deleteTokenomic", alias, deleteMutationResponseQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MutationQueryBuilder ExceptDeleteTokenomic()
        {
            return ExceptField("deleteTokenomic");
        }

        public MutationQueryBuilder WithCreateTradeContract(TradeContractQueryBuilder tradeContractQueryBuilder, QueryBuilderParameter<TradeContractInput> data, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "data", ArgumentValue = data} );
            return WithObjectField("createTradeContract", alias, tradeContractQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCreateTradeContract()
        {
            return ExceptField("createTradeContract");
        }

        public MutationQueryBuilder WithUpdateTradeContract(TradeContractQueryBuilder tradeContractQueryBuilder, QueryBuilderParameter<string> documentId, QueryBuilderParameter<TradeContractInput> data, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "data", ArgumentValue = data} );
            return WithObjectField("updateTradeContract", alias, tradeContractQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdateTradeContract()
        {
            return ExceptField("updateTradeContract");
        }

        public MutationQueryBuilder WithDeleteTradeContract(DeleteMutationResponseQueryBuilder deleteMutationResponseQueryBuilder, QueryBuilderParameter<string> documentId, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            return WithObjectField("deleteTradeContract", alias, deleteMutationResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptDeleteTradeContract()
        {
            return ExceptField("deleteTradeContract");
        }

        public MutationQueryBuilder WithCreateVaultFaq(VaultFaqQueryBuilder vaultFaqQueryBuilder, QueryBuilderParameter<VaultFaqInput> data, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "data", ArgumentValue = data} );
            return WithObjectField("createVaultFaq", alias, vaultFaqQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCreateVaultFaq()
        {
            return ExceptField("createVaultFaq");
        }

        public MutationQueryBuilder WithUpdateVaultFaq(VaultFaqQueryBuilder vaultFaqQueryBuilder, QueryBuilderParameter<string> documentId, QueryBuilderParameter<VaultFaqInput> data, QueryBuilderParameter<PublicationStatus?> status = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            if (status != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "status", ArgumentValue = status} );

            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "data", ArgumentValue = data} );
            return WithObjectField("updateVaultFaq", alias, vaultFaqQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdateVaultFaq()
        {
            return ExceptField("updateVaultFaq");
        }

        public MutationQueryBuilder WithDeleteVaultFaq(DeleteMutationResponseQueryBuilder deleteMutationResponseQueryBuilder, QueryBuilderParameter<string> documentId, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "documentId", ArgumentValue = documentId} );
            return WithObjectField("deleteVaultFaq", alias, deleteMutationResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptDeleteVaultFaq()
        {
            return ExceptField("deleteVaultFaq");
        }

        public MutationQueryBuilder WithUpdateUploadFile(UploadFileQueryBuilder uploadFileQueryBuilder, QueryBuilderParameter<string> id, QueryBuilderParameter<FileInfoInput> info = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );
            if (info != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "info", ArgumentValue = info} );

            return WithObjectField("updateUploadFile", alias, uploadFileQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdateUploadFile()
        {
            return ExceptField("updateUploadFile");
        }

        public MutationQueryBuilder WithDeleteUploadFile(UploadFileQueryBuilder uploadFileQueryBuilder, QueryBuilderParameter<string> id, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );
            return WithObjectField("deleteUploadFile", alias, uploadFileQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptDeleteUploadFile()
        {
            return ExceptField("deleteUploadFile");
        }

        public MutationQueryBuilder WithCreateUsersPermissionsRole(UsersPermissionsCreateRolePayloadQueryBuilder usersPermissionsCreateRolePayloadQueryBuilder, QueryBuilderParameter<UsersPermissionsRoleInput> data, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "data", ArgumentValue = data} );
            return WithObjectField("createUsersPermissionsRole", alias, usersPermissionsCreateRolePayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCreateUsersPermissionsRole()
        {
            return ExceptField("createUsersPermissionsRole");
        }

        public MutationQueryBuilder WithUpdateUsersPermissionsRole(UsersPermissionsUpdateRolePayloadQueryBuilder usersPermissionsUpdateRolePayloadQueryBuilder, QueryBuilderParameter<string> id, QueryBuilderParameter<UsersPermissionsRoleInput> data, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "data", ArgumentValue = data} );
            return WithObjectField("updateUsersPermissionsRole", alias, usersPermissionsUpdateRolePayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdateUsersPermissionsRole()
        {
            return ExceptField("updateUsersPermissionsRole");
        }

        public MutationQueryBuilder WithDeleteUsersPermissionsRole(UsersPermissionsDeleteRolePayloadQueryBuilder usersPermissionsDeleteRolePayloadQueryBuilder, QueryBuilderParameter<string> id, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );
            return WithObjectField("deleteUsersPermissionsRole", alias, usersPermissionsDeleteRolePayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptDeleteUsersPermissionsRole()
        {
            return ExceptField("deleteUsersPermissionsRole");
        }

        public MutationQueryBuilder WithCreateUsersPermissionsUser(UsersPermissionsUserEntityResponseQueryBuilder usersPermissionsUserEntityResponseQueryBuilder, QueryBuilderParameter<UsersPermissionsUserInput> data, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "data", ArgumentValue = data} );
            return WithObjectField("createUsersPermissionsUser", alias, usersPermissionsUserEntityResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptCreateUsersPermissionsUser()
        {
            return ExceptField("createUsersPermissionsUser");
        }

        public MutationQueryBuilder WithUpdateUsersPermissionsUser(UsersPermissionsUserEntityResponseQueryBuilder usersPermissionsUserEntityResponseQueryBuilder, QueryBuilderParameter<string> id, QueryBuilderParameter<UsersPermissionsUserInput> data, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "data", ArgumentValue = data} );
            return WithObjectField("updateUsersPermissionsUser", alias, usersPermissionsUserEntityResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptUpdateUsersPermissionsUser()
        {
            return ExceptField("updateUsersPermissionsUser");
        }

        public MutationQueryBuilder WithDeleteUsersPermissionsUser(UsersPermissionsUserEntityResponseQueryBuilder usersPermissionsUserEntityResponseQueryBuilder, QueryBuilderParameter<string> id, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );
            return WithObjectField("deleteUsersPermissionsUser", alias, usersPermissionsUserEntityResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptDeleteUsersPermissionsUser()
        {
            return ExceptField("deleteUsersPermissionsUser");
        }

        public MutationQueryBuilder WithLogin(UsersPermissionsLoginPayloadQueryBuilder usersPermissionsLoginPayloadQueryBuilder, QueryBuilderParameter<UsersPermissionsLoginInput> input, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input} );
            return WithObjectField("login", alias, usersPermissionsLoginPayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptLogin()
        {
            return ExceptField("login");
        }

        public MutationQueryBuilder WithRegister(UsersPermissionsLoginPayloadQueryBuilder usersPermissionsLoginPayloadQueryBuilder, QueryBuilderParameter<UsersPermissionsRegisterInput> input, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input} );
            return WithObjectField("register", alias, usersPermissionsLoginPayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptRegister()
        {
            return ExceptField("register");
        }

        public MutationQueryBuilder WithForgotPassword(UsersPermissionsPasswordPayloadQueryBuilder usersPermissionsPasswordPayloadQueryBuilder, QueryBuilderParameter<string> email, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "email", ArgumentValue = email} );
            return WithObjectField("forgotPassword", alias, usersPermissionsPasswordPayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptForgotPassword()
        {
            return ExceptField("forgotPassword");
        }

        public MutationQueryBuilder WithResetPassword(UsersPermissionsLoginPayloadQueryBuilder usersPermissionsLoginPayloadQueryBuilder, QueryBuilderParameter<string> password, QueryBuilderParameter<string> passwordConfirmation, QueryBuilderParameter<string> code, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "password", ArgumentValue = password} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "passwordConfirmation", ArgumentValue = passwordConfirmation} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "code", ArgumentValue = code} );
            return WithObjectField("resetPassword", alias, usersPermissionsLoginPayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptResetPassword()
        {
            return ExceptField("resetPassword");
        }

        public MutationQueryBuilder WithChangePassword(UsersPermissionsLoginPayloadQueryBuilder usersPermissionsLoginPayloadQueryBuilder, QueryBuilderParameter<string> currentPassword, QueryBuilderParameter<string> password, QueryBuilderParameter<string> passwordConfirmation, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "currentPassword", ArgumentValue = currentPassword} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "password", ArgumentValue = password} );
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "passwordConfirmation", ArgumentValue = passwordConfirmation} );
            return WithObjectField("changePassword", alias, usersPermissionsLoginPayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptChangePassword()
        {
            return ExceptField("changePassword");
        }

        public MutationQueryBuilder WithEmailConfirmation(UsersPermissionsLoginPayloadQueryBuilder usersPermissionsLoginPayloadQueryBuilder, QueryBuilderParameter<string> confirmation, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "confirmation", ArgumentValue = confirmation} );
            return WithObjectField("emailConfirmation", alias, usersPermissionsLoginPayloadQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MutationQueryBuilder ExceptEmailConfirmation()
        {
            return ExceptField("emailConfirmation");
        }
    }
    #endregion

    #region input classes
    public partial class IdFilterInput : IGraphQlInputObject
    {
        private InputPropertyInfo _and;
        private InputPropertyInfo _or;
        private InputPropertyInfo _not;
        private InputPropertyInfo _eq;
        private InputPropertyInfo _eqi;
        private InputPropertyInfo _ne;
        private InputPropertyInfo _nei;
        private InputPropertyInfo _startsWith;
        private InputPropertyInfo _endsWith;
        private InputPropertyInfo _contains;
        private InputPropertyInfo _notContains;
        private InputPropertyInfo _containsi;
        private InputPropertyInfo _notContainsi;
        private InputPropertyInfo _gt;
        private InputPropertyInfo _gte;
        private InputPropertyInfo _lt;
        private InputPropertyInfo _lte;
        private InputPropertyInfo _null;
        private InputPropertyInfo _notNull;
        private InputPropertyInfo _in;
        private InputPropertyInfo _notIn;
        private InputPropertyInfo _between;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> And
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> Or
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterInput>))]
        #endif
        public QueryBuilderParameter<IdFilterInput> Not
        {
            get { return (QueryBuilderParameter<IdFilterInput>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Eq
        {
            get { return (QueryBuilderParameter<string>)_eq.Value; }
            set { _eq = new InputPropertyInfo { Name = "eq", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Eqi
        {
            get { return (QueryBuilderParameter<string>)_eqi.Value; }
            set { _eqi = new InputPropertyInfo { Name = "eqi", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Ne
        {
            get { return (QueryBuilderParameter<string>)_ne.Value; }
            set { _ne = new InputPropertyInfo { Name = "ne", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Nei
        {
            get { return (QueryBuilderParameter<string>)_nei.Value; }
            set { _nei = new InputPropertyInfo { Name = "nei", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> StartsWith
        {
            get { return (QueryBuilderParameter<string>)_startsWith.Value; }
            set { _startsWith = new InputPropertyInfo { Name = "startsWith", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> EndsWith
        {
            get { return (QueryBuilderParameter<string>)_endsWith.Value; }
            set { _endsWith = new InputPropertyInfo { Name = "endsWith", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Contains
        {
            get { return (QueryBuilderParameter<string>)_contains.Value; }
            set { _contains = new InputPropertyInfo { Name = "contains", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> NotContains
        {
            get { return (QueryBuilderParameter<string>)_notContains.Value; }
            set { _notContains = new InputPropertyInfo { Name = "notContains", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Containsi
        {
            get { return (QueryBuilderParameter<string>)_containsi.Value; }
            set { _containsi = new InputPropertyInfo { Name = "containsi", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> NotContainsi
        {
            get { return (QueryBuilderParameter<string>)_notContainsi.Value; }
            set { _notContainsi = new InputPropertyInfo { Name = "notContainsi", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Gt
        {
            get { return (QueryBuilderParameter<string>)_gt.Value; }
            set { _gt = new InputPropertyInfo { Name = "gt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Gte
        {
            get { return (QueryBuilderParameter<string>)_gte.Value; }
            set { _gte = new InputPropertyInfo { Name = "gte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Lt
        {
            get { return (QueryBuilderParameter<string>)_lt.Value; }
            set { _lt = new InputPropertyInfo { Name = "lt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Lte
        {
            get { return (QueryBuilderParameter<string>)_lte.Value; }
            set { _lte = new InputPropertyInfo { Name = "lte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> Null
        {
            get { return (QueryBuilderParameter<bool?>)_null.Value; }
            set { _null = new InputPropertyInfo { Name = "null", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> NotNull
        {
            get { return (QueryBuilderParameter<bool?>)_notNull.Value; }
            set { _notNull = new InputPropertyInfo { Name = "notNull", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> In
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_in.Value; }
            set { _in = new InputPropertyInfo { Name = "in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> NotIn
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_notIn.Value; }
            set { _notIn = new InputPropertyInfo { Name = "notIn", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> Between
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_between.Value; }
            set { _between = new InputPropertyInfo { Name = "between", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_and.Name != null) yield return _and;
            if (_or.Name != null) yield return _or;
            if (_not.Name != null) yield return _not;
            if (_eq.Name != null) yield return _eq;
            if (_eqi.Name != null) yield return _eqi;
            if (_ne.Name != null) yield return _ne;
            if (_nei.Name != null) yield return _nei;
            if (_startsWith.Name != null) yield return _startsWith;
            if (_endsWith.Name != null) yield return _endsWith;
            if (_contains.Name != null) yield return _contains;
            if (_notContains.Name != null) yield return _notContains;
            if (_containsi.Name != null) yield return _containsi;
            if (_notContainsi.Name != null) yield return _notContainsi;
            if (_gt.Name != null) yield return _gt;
            if (_gte.Name != null) yield return _gte;
            if (_lt.Name != null) yield return _lt;
            if (_lte.Name != null) yield return _lte;
            if (_null.Name != null) yield return _null;
            if (_notNull.Name != null) yield return _notNull;
            if (_in.Name != null) yield return _in;
            if (_notIn.Name != null) yield return _notIn;
            if (_between.Name != null) yield return _between;
        }
    }

    public partial class BooleanFilterInput : IGraphQlInputObject
    {
        private InputPropertyInfo _and;
        private InputPropertyInfo _or;
        private InputPropertyInfo _not;
        private InputPropertyInfo _eq;
        private InputPropertyInfo _eqi;
        private InputPropertyInfo _ne;
        private InputPropertyInfo _nei;
        private InputPropertyInfo _startsWith;
        private InputPropertyInfo _endsWith;
        private InputPropertyInfo _contains;
        private InputPropertyInfo _notContains;
        private InputPropertyInfo _containsi;
        private InputPropertyInfo _notContainsi;
        private InputPropertyInfo _gt;
        private InputPropertyInfo _gte;
        private InputPropertyInfo _lt;
        private InputPropertyInfo _lte;
        private InputPropertyInfo _null;
        private InputPropertyInfo _notNull;
        private InputPropertyInfo _in;
        private InputPropertyInfo _notIn;
        private InputPropertyInfo _between;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<bool?>>))]
        #endif
        public QueryBuilderParameter<ICollection<bool?>> And
        {
            get { return (QueryBuilderParameter<ICollection<bool?>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<bool?>>))]
        #endif
        public QueryBuilderParameter<ICollection<bool?>> Or
        {
            get { return (QueryBuilderParameter<ICollection<bool?>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<BooleanFilterInput>))]
        #endif
        public QueryBuilderParameter<BooleanFilterInput> Not
        {
            get { return (QueryBuilderParameter<BooleanFilterInput>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> Eq
        {
            get { return (QueryBuilderParameter<bool?>)_eq.Value; }
            set { _eq = new InputPropertyInfo { Name = "eq", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> Eqi
        {
            get { return (QueryBuilderParameter<bool?>)_eqi.Value; }
            set { _eqi = new InputPropertyInfo { Name = "eqi", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> Ne
        {
            get { return (QueryBuilderParameter<bool?>)_ne.Value; }
            set { _ne = new InputPropertyInfo { Name = "ne", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> Nei
        {
            get { return (QueryBuilderParameter<bool?>)_nei.Value; }
            set { _nei = new InputPropertyInfo { Name = "nei", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> StartsWith
        {
            get { return (QueryBuilderParameter<bool?>)_startsWith.Value; }
            set { _startsWith = new InputPropertyInfo { Name = "startsWith", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> EndsWith
        {
            get { return (QueryBuilderParameter<bool?>)_endsWith.Value; }
            set { _endsWith = new InputPropertyInfo { Name = "endsWith", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> Contains
        {
            get { return (QueryBuilderParameter<bool?>)_contains.Value; }
            set { _contains = new InputPropertyInfo { Name = "contains", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> NotContains
        {
            get { return (QueryBuilderParameter<bool?>)_notContains.Value; }
            set { _notContains = new InputPropertyInfo { Name = "notContains", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> Containsi
        {
            get { return (QueryBuilderParameter<bool?>)_containsi.Value; }
            set { _containsi = new InputPropertyInfo { Name = "containsi", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> NotContainsi
        {
            get { return (QueryBuilderParameter<bool?>)_notContainsi.Value; }
            set { _notContainsi = new InputPropertyInfo { Name = "notContainsi", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> Gt
        {
            get { return (QueryBuilderParameter<bool?>)_gt.Value; }
            set { _gt = new InputPropertyInfo { Name = "gt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> Gte
        {
            get { return (QueryBuilderParameter<bool?>)_gte.Value; }
            set { _gte = new InputPropertyInfo { Name = "gte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> Lt
        {
            get { return (QueryBuilderParameter<bool?>)_lt.Value; }
            set { _lt = new InputPropertyInfo { Name = "lt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> Lte
        {
            get { return (QueryBuilderParameter<bool?>)_lte.Value; }
            set { _lte = new InputPropertyInfo { Name = "lte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> Null
        {
            get { return (QueryBuilderParameter<bool?>)_null.Value; }
            set { _null = new InputPropertyInfo { Name = "null", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> NotNull
        {
            get { return (QueryBuilderParameter<bool?>)_notNull.Value; }
            set { _notNull = new InputPropertyInfo { Name = "notNull", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<bool?>>))]
        #endif
        public QueryBuilderParameter<ICollection<bool?>> In
        {
            get { return (QueryBuilderParameter<ICollection<bool?>>)_in.Value; }
            set { _in = new InputPropertyInfo { Name = "in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<bool?>>))]
        #endif
        public QueryBuilderParameter<ICollection<bool?>> NotIn
        {
            get { return (QueryBuilderParameter<ICollection<bool?>>)_notIn.Value; }
            set { _notIn = new InputPropertyInfo { Name = "notIn", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<bool?>>))]
        #endif
        public QueryBuilderParameter<ICollection<bool?>> Between
        {
            get { return (QueryBuilderParameter<ICollection<bool?>>)_between.Value; }
            set { _between = new InputPropertyInfo { Name = "between", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_and.Name != null) yield return _and;
            if (_or.Name != null) yield return _or;
            if (_not.Name != null) yield return _not;
            if (_eq.Name != null) yield return _eq;
            if (_eqi.Name != null) yield return _eqi;
            if (_ne.Name != null) yield return _ne;
            if (_nei.Name != null) yield return _nei;
            if (_startsWith.Name != null) yield return _startsWith;
            if (_endsWith.Name != null) yield return _endsWith;
            if (_contains.Name != null) yield return _contains;
            if (_notContains.Name != null) yield return _notContains;
            if (_containsi.Name != null) yield return _containsi;
            if (_notContainsi.Name != null) yield return _notContainsi;
            if (_gt.Name != null) yield return _gt;
            if (_gte.Name != null) yield return _gte;
            if (_lt.Name != null) yield return _lt;
            if (_lte.Name != null) yield return _lte;
            if (_null.Name != null) yield return _null;
            if (_notNull.Name != null) yield return _notNull;
            if (_in.Name != null) yield return _in;
            if (_notIn.Name != null) yield return _notIn;
            if (_between.Name != null) yield return _between;
        }
    }

    public partial class StringFilterInput : IGraphQlInputObject
    {
        private InputPropertyInfo _and;
        private InputPropertyInfo _or;
        private InputPropertyInfo _not;
        private InputPropertyInfo _eq;
        private InputPropertyInfo _eqi;
        private InputPropertyInfo _ne;
        private InputPropertyInfo _nei;
        private InputPropertyInfo _startsWith;
        private InputPropertyInfo _endsWith;
        private InputPropertyInfo _contains;
        private InputPropertyInfo _notContains;
        private InputPropertyInfo _containsi;
        private InputPropertyInfo _notContainsi;
        private InputPropertyInfo _gt;
        private InputPropertyInfo _gte;
        private InputPropertyInfo _lt;
        private InputPropertyInfo _lte;
        private InputPropertyInfo _null;
        private InputPropertyInfo _notNull;
        private InputPropertyInfo _in;
        private InputPropertyInfo _notIn;
        private InputPropertyInfo _between;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> And
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> Or
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Not
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Eq
        {
            get { return (QueryBuilderParameter<string>)_eq.Value; }
            set { _eq = new InputPropertyInfo { Name = "eq", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Eqi
        {
            get { return (QueryBuilderParameter<string>)_eqi.Value; }
            set { _eqi = new InputPropertyInfo { Name = "eqi", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Ne
        {
            get { return (QueryBuilderParameter<string>)_ne.Value; }
            set { _ne = new InputPropertyInfo { Name = "ne", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Nei
        {
            get { return (QueryBuilderParameter<string>)_nei.Value; }
            set { _nei = new InputPropertyInfo { Name = "nei", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> StartsWith
        {
            get { return (QueryBuilderParameter<string>)_startsWith.Value; }
            set { _startsWith = new InputPropertyInfo { Name = "startsWith", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> EndsWith
        {
            get { return (QueryBuilderParameter<string>)_endsWith.Value; }
            set { _endsWith = new InputPropertyInfo { Name = "endsWith", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Contains
        {
            get { return (QueryBuilderParameter<string>)_contains.Value; }
            set { _contains = new InputPropertyInfo { Name = "contains", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> NotContains
        {
            get { return (QueryBuilderParameter<string>)_notContains.Value; }
            set { _notContains = new InputPropertyInfo { Name = "notContains", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Containsi
        {
            get { return (QueryBuilderParameter<string>)_containsi.Value; }
            set { _containsi = new InputPropertyInfo { Name = "containsi", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> NotContainsi
        {
            get { return (QueryBuilderParameter<string>)_notContainsi.Value; }
            set { _notContainsi = new InputPropertyInfo { Name = "notContainsi", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Gt
        {
            get { return (QueryBuilderParameter<string>)_gt.Value; }
            set { _gt = new InputPropertyInfo { Name = "gt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Gte
        {
            get { return (QueryBuilderParameter<string>)_gte.Value; }
            set { _gte = new InputPropertyInfo { Name = "gte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Lt
        {
            get { return (QueryBuilderParameter<string>)_lt.Value; }
            set { _lt = new InputPropertyInfo { Name = "lt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Lte
        {
            get { return (QueryBuilderParameter<string>)_lte.Value; }
            set { _lte = new InputPropertyInfo { Name = "lte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> Null
        {
            get { return (QueryBuilderParameter<bool?>)_null.Value; }
            set { _null = new InputPropertyInfo { Name = "null", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> NotNull
        {
            get { return (QueryBuilderParameter<bool?>)_notNull.Value; }
            set { _notNull = new InputPropertyInfo { Name = "notNull", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> In
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_in.Value; }
            set { _in = new InputPropertyInfo { Name = "in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> NotIn
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_notIn.Value; }
            set { _notIn = new InputPropertyInfo { Name = "notIn", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> Between
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_between.Value; }
            set { _between = new InputPropertyInfo { Name = "between", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_and.Name != null) yield return _and;
            if (_or.Name != null) yield return _or;
            if (_not.Name != null) yield return _not;
            if (_eq.Name != null) yield return _eq;
            if (_eqi.Name != null) yield return _eqi;
            if (_ne.Name != null) yield return _ne;
            if (_nei.Name != null) yield return _nei;
            if (_startsWith.Name != null) yield return _startsWith;
            if (_endsWith.Name != null) yield return _endsWith;
            if (_contains.Name != null) yield return _contains;
            if (_notContains.Name != null) yield return _notContains;
            if (_containsi.Name != null) yield return _containsi;
            if (_notContainsi.Name != null) yield return _notContainsi;
            if (_gt.Name != null) yield return _gt;
            if (_gte.Name != null) yield return _gte;
            if (_lt.Name != null) yield return _lt;
            if (_lte.Name != null) yield return _lte;
            if (_null.Name != null) yield return _null;
            if (_notNull.Name != null) yield return _notNull;
            if (_in.Name != null) yield return _in;
            if (_notIn.Name != null) yield return _notIn;
            if (_between.Name != null) yield return _between;
        }
    }

    public partial class IntFilterInput : IGraphQlInputObject
    {
        private InputPropertyInfo _and;
        private InputPropertyInfo _or;
        private InputPropertyInfo _not;
        private InputPropertyInfo _eq;
        private InputPropertyInfo _eqi;
        private InputPropertyInfo _ne;
        private InputPropertyInfo _nei;
        private InputPropertyInfo _startsWith;
        private InputPropertyInfo _endsWith;
        private InputPropertyInfo _contains;
        private InputPropertyInfo _notContains;
        private InputPropertyInfo _containsi;
        private InputPropertyInfo _notContainsi;
        private InputPropertyInfo _gt;
        private InputPropertyInfo _gte;
        private InputPropertyInfo _lt;
        private InputPropertyInfo _lte;
        private InputPropertyInfo _null;
        private InputPropertyInfo _notNull;
        private InputPropertyInfo _in;
        private InputPropertyInfo _notIn;
        private InputPropertyInfo _between;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int?>>))]
        #endif
        public QueryBuilderParameter<ICollection<int?>> And
        {
            get { return (QueryBuilderParameter<ICollection<int?>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int?>>))]
        #endif
        public QueryBuilderParameter<ICollection<int?>> Or
        {
            get { return (QueryBuilderParameter<ICollection<int?>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IntFilterInput>))]
        #endif
        public QueryBuilderParameter<IntFilterInput> Not
        {
            get { return (QueryBuilderParameter<IntFilterInput>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Eq
        {
            get { return (QueryBuilderParameter<int?>)_eq.Value; }
            set { _eq = new InputPropertyInfo { Name = "eq", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Eqi
        {
            get { return (QueryBuilderParameter<int?>)_eqi.Value; }
            set { _eqi = new InputPropertyInfo { Name = "eqi", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Ne
        {
            get { return (QueryBuilderParameter<int?>)_ne.Value; }
            set { _ne = new InputPropertyInfo { Name = "ne", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Nei
        {
            get { return (QueryBuilderParameter<int?>)_nei.Value; }
            set { _nei = new InputPropertyInfo { Name = "nei", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> StartsWith
        {
            get { return (QueryBuilderParameter<int?>)_startsWith.Value; }
            set { _startsWith = new InputPropertyInfo { Name = "startsWith", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> EndsWith
        {
            get { return (QueryBuilderParameter<int?>)_endsWith.Value; }
            set { _endsWith = new InputPropertyInfo { Name = "endsWith", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Contains
        {
            get { return (QueryBuilderParameter<int?>)_contains.Value; }
            set { _contains = new InputPropertyInfo { Name = "contains", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> NotContains
        {
            get { return (QueryBuilderParameter<int?>)_notContains.Value; }
            set { _notContains = new InputPropertyInfo { Name = "notContains", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Containsi
        {
            get { return (QueryBuilderParameter<int?>)_containsi.Value; }
            set { _containsi = new InputPropertyInfo { Name = "containsi", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> NotContainsi
        {
            get { return (QueryBuilderParameter<int?>)_notContainsi.Value; }
            set { _notContainsi = new InputPropertyInfo { Name = "notContainsi", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Gt
        {
            get { return (QueryBuilderParameter<int?>)_gt.Value; }
            set { _gt = new InputPropertyInfo { Name = "gt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Gte
        {
            get { return (QueryBuilderParameter<int?>)_gte.Value; }
            set { _gte = new InputPropertyInfo { Name = "gte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Lt
        {
            get { return (QueryBuilderParameter<int?>)_lt.Value; }
            set { _lt = new InputPropertyInfo { Name = "lt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Lte
        {
            get { return (QueryBuilderParameter<int?>)_lte.Value; }
            set { _lte = new InputPropertyInfo { Name = "lte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> Null
        {
            get { return (QueryBuilderParameter<bool?>)_null.Value; }
            set { _null = new InputPropertyInfo { Name = "null", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> NotNull
        {
            get { return (QueryBuilderParameter<bool?>)_notNull.Value; }
            set { _notNull = new InputPropertyInfo { Name = "notNull", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int?>>))]
        #endif
        public QueryBuilderParameter<ICollection<int?>> In
        {
            get { return (QueryBuilderParameter<ICollection<int?>>)_in.Value; }
            set { _in = new InputPropertyInfo { Name = "in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int?>>))]
        #endif
        public QueryBuilderParameter<ICollection<int?>> NotIn
        {
            get { return (QueryBuilderParameter<ICollection<int?>>)_notIn.Value; }
            set { _notIn = new InputPropertyInfo { Name = "notIn", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<int?>>))]
        #endif
        public QueryBuilderParameter<ICollection<int?>> Between
        {
            get { return (QueryBuilderParameter<ICollection<int?>>)_between.Value; }
            set { _between = new InputPropertyInfo { Name = "between", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_and.Name != null) yield return _and;
            if (_or.Name != null) yield return _or;
            if (_not.Name != null) yield return _not;
            if (_eq.Name != null) yield return _eq;
            if (_eqi.Name != null) yield return _eqi;
            if (_ne.Name != null) yield return _ne;
            if (_nei.Name != null) yield return _nei;
            if (_startsWith.Name != null) yield return _startsWith;
            if (_endsWith.Name != null) yield return _endsWith;
            if (_contains.Name != null) yield return _contains;
            if (_notContains.Name != null) yield return _notContains;
            if (_containsi.Name != null) yield return _containsi;
            if (_notContainsi.Name != null) yield return _notContainsi;
            if (_gt.Name != null) yield return _gt;
            if (_gte.Name != null) yield return _gte;
            if (_lt.Name != null) yield return _lt;
            if (_lte.Name != null) yield return _lte;
            if (_null.Name != null) yield return _null;
            if (_notNull.Name != null) yield return _notNull;
            if (_in.Name != null) yield return _in;
            if (_notIn.Name != null) yield return _notIn;
            if (_between.Name != null) yield return _between;
        }
    }

    public partial class LongFilterInput : IGraphQlInputObject
    {
        private InputPropertyInfo _and;
        private InputPropertyInfo _or;
        private InputPropertyInfo _not;
        private InputPropertyInfo _eq;
        private InputPropertyInfo _eqi;
        private InputPropertyInfo _ne;
        private InputPropertyInfo _nei;
        private InputPropertyInfo _startsWith;
        private InputPropertyInfo _endsWith;
        private InputPropertyInfo _contains;
        private InputPropertyInfo _notContains;
        private InputPropertyInfo _containsi;
        private InputPropertyInfo _notContainsi;
        private InputPropertyInfo _gt;
        private InputPropertyInfo _gte;
        private InputPropertyInfo _lt;
        private InputPropertyInfo _lte;
        private InputPropertyInfo _null;
        private InputPropertyInfo _notNull;
        private InputPropertyInfo _in;
        private InputPropertyInfo _notIn;
        private InputPropertyInfo _between;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<long?>>))]
        #endif
        public QueryBuilderParameter<ICollection<long?>> And
        {
            get { return (QueryBuilderParameter<ICollection<long?>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<long?>>))]
        #endif
        public QueryBuilderParameter<ICollection<long?>> Or
        {
            get { return (QueryBuilderParameter<ICollection<long?>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<LongFilterInput>))]
        #endif
        public QueryBuilderParameter<LongFilterInput> Not
        {
            get { return (QueryBuilderParameter<LongFilterInput>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?> Eq
        {
            get { return (QueryBuilderParameter<long?>)_eq.Value; }
            set { _eq = new InputPropertyInfo { Name = "eq", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?> Eqi
        {
            get { return (QueryBuilderParameter<long?>)_eqi.Value; }
            set { _eqi = new InputPropertyInfo { Name = "eqi", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?> Ne
        {
            get { return (QueryBuilderParameter<long?>)_ne.Value; }
            set { _ne = new InputPropertyInfo { Name = "ne", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?> Nei
        {
            get { return (QueryBuilderParameter<long?>)_nei.Value; }
            set { _nei = new InputPropertyInfo { Name = "nei", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?> StartsWith
        {
            get { return (QueryBuilderParameter<long?>)_startsWith.Value; }
            set { _startsWith = new InputPropertyInfo { Name = "startsWith", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?> EndsWith
        {
            get { return (QueryBuilderParameter<long?>)_endsWith.Value; }
            set { _endsWith = new InputPropertyInfo { Name = "endsWith", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?> Contains
        {
            get { return (QueryBuilderParameter<long?>)_contains.Value; }
            set { _contains = new InputPropertyInfo { Name = "contains", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?> NotContains
        {
            get { return (QueryBuilderParameter<long?>)_notContains.Value; }
            set { _notContains = new InputPropertyInfo { Name = "notContains", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?> Containsi
        {
            get { return (QueryBuilderParameter<long?>)_containsi.Value; }
            set { _containsi = new InputPropertyInfo { Name = "containsi", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?> NotContainsi
        {
            get { return (QueryBuilderParameter<long?>)_notContainsi.Value; }
            set { _notContainsi = new InputPropertyInfo { Name = "notContainsi", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?> Gt
        {
            get { return (QueryBuilderParameter<long?>)_gt.Value; }
            set { _gt = new InputPropertyInfo { Name = "gt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?> Gte
        {
            get { return (QueryBuilderParameter<long?>)_gte.Value; }
            set { _gte = new InputPropertyInfo { Name = "gte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?> Lt
        {
            get { return (QueryBuilderParameter<long?>)_lt.Value; }
            set { _lt = new InputPropertyInfo { Name = "lt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?> Lte
        {
            get { return (QueryBuilderParameter<long?>)_lte.Value; }
            set { _lte = new InputPropertyInfo { Name = "lte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> Null
        {
            get { return (QueryBuilderParameter<bool?>)_null.Value; }
            set { _null = new InputPropertyInfo { Name = "null", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> NotNull
        {
            get { return (QueryBuilderParameter<bool?>)_notNull.Value; }
            set { _notNull = new InputPropertyInfo { Name = "notNull", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<long?>>))]
        #endif
        public QueryBuilderParameter<ICollection<long?>> In
        {
            get { return (QueryBuilderParameter<ICollection<long?>>)_in.Value; }
            set { _in = new InputPropertyInfo { Name = "in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<long?>>))]
        #endif
        public QueryBuilderParameter<ICollection<long?>> NotIn
        {
            get { return (QueryBuilderParameter<ICollection<long?>>)_notIn.Value; }
            set { _notIn = new InputPropertyInfo { Name = "notIn", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<long?>>))]
        #endif
        public QueryBuilderParameter<ICollection<long?>> Between
        {
            get { return (QueryBuilderParameter<ICollection<long?>>)_between.Value; }
            set { _between = new InputPropertyInfo { Name = "between", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_and.Name != null) yield return _and;
            if (_or.Name != null) yield return _or;
            if (_not.Name != null) yield return _not;
            if (_eq.Name != null) yield return _eq;
            if (_eqi.Name != null) yield return _eqi;
            if (_ne.Name != null) yield return _ne;
            if (_nei.Name != null) yield return _nei;
            if (_startsWith.Name != null) yield return _startsWith;
            if (_endsWith.Name != null) yield return _endsWith;
            if (_contains.Name != null) yield return _contains;
            if (_notContains.Name != null) yield return _notContains;
            if (_containsi.Name != null) yield return _containsi;
            if (_notContainsi.Name != null) yield return _notContainsi;
            if (_gt.Name != null) yield return _gt;
            if (_gte.Name != null) yield return _gte;
            if (_lt.Name != null) yield return _lt;
            if (_lte.Name != null) yield return _lte;
            if (_null.Name != null) yield return _null;
            if (_notNull.Name != null) yield return _notNull;
            if (_in.Name != null) yield return _in;
            if (_notIn.Name != null) yield return _notIn;
            if (_between.Name != null) yield return _between;
        }
    }

    public partial class FloatFilterInput : IGraphQlInputObject
    {
        private InputPropertyInfo _and;
        private InputPropertyInfo _or;
        private InputPropertyInfo _not;
        private InputPropertyInfo _eq;
        private InputPropertyInfo _eqi;
        private InputPropertyInfo _ne;
        private InputPropertyInfo _nei;
        private InputPropertyInfo _startsWith;
        private InputPropertyInfo _endsWith;
        private InputPropertyInfo _contains;
        private InputPropertyInfo _notContains;
        private InputPropertyInfo _containsi;
        private InputPropertyInfo _notContainsi;
        private InputPropertyInfo _gt;
        private InputPropertyInfo _gte;
        private InputPropertyInfo _lt;
        private InputPropertyInfo _lte;
        private InputPropertyInfo _null;
        private InputPropertyInfo _notNull;
        private InputPropertyInfo _in;
        private InputPropertyInfo _notIn;
        private InputPropertyInfo _between;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<decimal?>>))]
        #endif
        public QueryBuilderParameter<ICollection<decimal?>> And
        {
            get { return (QueryBuilderParameter<ICollection<decimal?>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<decimal?>>))]
        #endif
        public QueryBuilderParameter<ICollection<decimal?>> Or
        {
            get { return (QueryBuilderParameter<ICollection<decimal?>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<FloatFilterInput>))]
        #endif
        public QueryBuilderParameter<FloatFilterInput> Not
        {
            get { return (QueryBuilderParameter<FloatFilterInput>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<decimal?>))]
        #endif
        public QueryBuilderParameter<decimal?> Eq
        {
            get { return (QueryBuilderParameter<decimal?>)_eq.Value; }
            set { _eq = new InputPropertyInfo { Name = "eq", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<decimal?>))]
        #endif
        public QueryBuilderParameter<decimal?> Eqi
        {
            get { return (QueryBuilderParameter<decimal?>)_eqi.Value; }
            set { _eqi = new InputPropertyInfo { Name = "eqi", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<decimal?>))]
        #endif
        public QueryBuilderParameter<decimal?> Ne
        {
            get { return (QueryBuilderParameter<decimal?>)_ne.Value; }
            set { _ne = new InputPropertyInfo { Name = "ne", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<decimal?>))]
        #endif
        public QueryBuilderParameter<decimal?> Nei
        {
            get { return (QueryBuilderParameter<decimal?>)_nei.Value; }
            set { _nei = new InputPropertyInfo { Name = "nei", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<decimal?>))]
        #endif
        public QueryBuilderParameter<decimal?> StartsWith
        {
            get { return (QueryBuilderParameter<decimal?>)_startsWith.Value; }
            set { _startsWith = new InputPropertyInfo { Name = "startsWith", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<decimal?>))]
        #endif
        public QueryBuilderParameter<decimal?> EndsWith
        {
            get { return (QueryBuilderParameter<decimal?>)_endsWith.Value; }
            set { _endsWith = new InputPropertyInfo { Name = "endsWith", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<decimal?>))]
        #endif
        public QueryBuilderParameter<decimal?> Contains
        {
            get { return (QueryBuilderParameter<decimal?>)_contains.Value; }
            set { _contains = new InputPropertyInfo { Name = "contains", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<decimal?>))]
        #endif
        public QueryBuilderParameter<decimal?> NotContains
        {
            get { return (QueryBuilderParameter<decimal?>)_notContains.Value; }
            set { _notContains = new InputPropertyInfo { Name = "notContains", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<decimal?>))]
        #endif
        public QueryBuilderParameter<decimal?> Containsi
        {
            get { return (QueryBuilderParameter<decimal?>)_containsi.Value; }
            set { _containsi = new InputPropertyInfo { Name = "containsi", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<decimal?>))]
        #endif
        public QueryBuilderParameter<decimal?> NotContainsi
        {
            get { return (QueryBuilderParameter<decimal?>)_notContainsi.Value; }
            set { _notContainsi = new InputPropertyInfo { Name = "notContainsi", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<decimal?>))]
        #endif
        public QueryBuilderParameter<decimal?> Gt
        {
            get { return (QueryBuilderParameter<decimal?>)_gt.Value; }
            set { _gt = new InputPropertyInfo { Name = "gt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<decimal?>))]
        #endif
        public QueryBuilderParameter<decimal?> Gte
        {
            get { return (QueryBuilderParameter<decimal?>)_gte.Value; }
            set { _gte = new InputPropertyInfo { Name = "gte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<decimal?>))]
        #endif
        public QueryBuilderParameter<decimal?> Lt
        {
            get { return (QueryBuilderParameter<decimal?>)_lt.Value; }
            set { _lt = new InputPropertyInfo { Name = "lt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<decimal?>))]
        #endif
        public QueryBuilderParameter<decimal?> Lte
        {
            get { return (QueryBuilderParameter<decimal?>)_lte.Value; }
            set { _lte = new InputPropertyInfo { Name = "lte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> Null
        {
            get { return (QueryBuilderParameter<bool?>)_null.Value; }
            set { _null = new InputPropertyInfo { Name = "null", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> NotNull
        {
            get { return (QueryBuilderParameter<bool?>)_notNull.Value; }
            set { _notNull = new InputPropertyInfo { Name = "notNull", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<decimal?>>))]
        #endif
        public QueryBuilderParameter<ICollection<decimal?>> In
        {
            get { return (QueryBuilderParameter<ICollection<decimal?>>)_in.Value; }
            set { _in = new InputPropertyInfo { Name = "in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<decimal?>>))]
        #endif
        public QueryBuilderParameter<ICollection<decimal?>> NotIn
        {
            get { return (QueryBuilderParameter<ICollection<decimal?>>)_notIn.Value; }
            set { _notIn = new InputPropertyInfo { Name = "notIn", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<decimal?>>))]
        #endif
        public QueryBuilderParameter<ICollection<decimal?>> Between
        {
            get { return (QueryBuilderParameter<ICollection<decimal?>>)_between.Value; }
            set { _between = new InputPropertyInfo { Name = "between", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_and.Name != null) yield return _and;
            if (_or.Name != null) yield return _or;
            if (_not.Name != null) yield return _not;
            if (_eq.Name != null) yield return _eq;
            if (_eqi.Name != null) yield return _eqi;
            if (_ne.Name != null) yield return _ne;
            if (_nei.Name != null) yield return _nei;
            if (_startsWith.Name != null) yield return _startsWith;
            if (_endsWith.Name != null) yield return _endsWith;
            if (_contains.Name != null) yield return _contains;
            if (_notContains.Name != null) yield return _notContains;
            if (_containsi.Name != null) yield return _containsi;
            if (_notContainsi.Name != null) yield return _notContainsi;
            if (_gt.Name != null) yield return _gt;
            if (_gte.Name != null) yield return _gte;
            if (_lt.Name != null) yield return _lt;
            if (_lte.Name != null) yield return _lte;
            if (_null.Name != null) yield return _null;
            if (_notNull.Name != null) yield return _notNull;
            if (_in.Name != null) yield return _in;
            if (_notIn.Name != null) yield return _notIn;
            if (_between.Name != null) yield return _between;
        }
    }

    public partial class DateTimeFilterInput : IGraphQlInputObject
    {
        private InputPropertyInfo _and;
        private InputPropertyInfo _or;
        private InputPropertyInfo _not;
        private InputPropertyInfo _eq;
        private InputPropertyInfo _eqi;
        private InputPropertyInfo _ne;
        private InputPropertyInfo _nei;
        private InputPropertyInfo _startsWith;
        private InputPropertyInfo _endsWith;
        private InputPropertyInfo _contains;
        private InputPropertyInfo _notContains;
        private InputPropertyInfo _containsi;
        private InputPropertyInfo _notContainsi;
        private InputPropertyInfo _gt;
        private InputPropertyInfo _gte;
        private InputPropertyInfo _lt;
        private InputPropertyInfo _lte;
        private InputPropertyInfo _null;
        private InputPropertyInfo _notNull;
        private InputPropertyInfo _in;
        private InputPropertyInfo _notIn;
        private InputPropertyInfo _between;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<DateTime?>>))]
        #endif
        public QueryBuilderParameter<ICollection<DateTime?>> And
        {
            get { return (QueryBuilderParameter<ICollection<DateTime?>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<DateTime?>>))]
        #endif
        public QueryBuilderParameter<ICollection<DateTime?>> Or
        {
            get { return (QueryBuilderParameter<ICollection<DateTime?>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> Not
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTime?>))]
        #endif
        public QueryBuilderParameter<DateTime?> Eq
        {
            get { return (QueryBuilderParameter<DateTime?>)_eq.Value; }
            set { _eq = new InputPropertyInfo { Name = "eq", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTime?>))]
        #endif
        public QueryBuilderParameter<DateTime?> Eqi
        {
            get { return (QueryBuilderParameter<DateTime?>)_eqi.Value; }
            set { _eqi = new InputPropertyInfo { Name = "eqi", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTime?>))]
        #endif
        public QueryBuilderParameter<DateTime?> Ne
        {
            get { return (QueryBuilderParameter<DateTime?>)_ne.Value; }
            set { _ne = new InputPropertyInfo { Name = "ne", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTime?>))]
        #endif
        public QueryBuilderParameter<DateTime?> Nei
        {
            get { return (QueryBuilderParameter<DateTime?>)_nei.Value; }
            set { _nei = new InputPropertyInfo { Name = "nei", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTime?>))]
        #endif
        public QueryBuilderParameter<DateTime?> StartsWith
        {
            get { return (QueryBuilderParameter<DateTime?>)_startsWith.Value; }
            set { _startsWith = new InputPropertyInfo { Name = "startsWith", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTime?>))]
        #endif
        public QueryBuilderParameter<DateTime?> EndsWith
        {
            get { return (QueryBuilderParameter<DateTime?>)_endsWith.Value; }
            set { _endsWith = new InputPropertyInfo { Name = "endsWith", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTime?>))]
        #endif
        public QueryBuilderParameter<DateTime?> Contains
        {
            get { return (QueryBuilderParameter<DateTime?>)_contains.Value; }
            set { _contains = new InputPropertyInfo { Name = "contains", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTime?>))]
        #endif
        public QueryBuilderParameter<DateTime?> NotContains
        {
            get { return (QueryBuilderParameter<DateTime?>)_notContains.Value; }
            set { _notContains = new InputPropertyInfo { Name = "notContains", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTime?>))]
        #endif
        public QueryBuilderParameter<DateTime?> Containsi
        {
            get { return (QueryBuilderParameter<DateTime?>)_containsi.Value; }
            set { _containsi = new InputPropertyInfo { Name = "containsi", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTime?>))]
        #endif
        public QueryBuilderParameter<DateTime?> NotContainsi
        {
            get { return (QueryBuilderParameter<DateTime?>)_notContainsi.Value; }
            set { _notContainsi = new InputPropertyInfo { Name = "notContainsi", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTime?>))]
        #endif
        public QueryBuilderParameter<DateTime?> Gt
        {
            get { return (QueryBuilderParameter<DateTime?>)_gt.Value; }
            set { _gt = new InputPropertyInfo { Name = "gt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTime?>))]
        #endif
        public QueryBuilderParameter<DateTime?> Gte
        {
            get { return (QueryBuilderParameter<DateTime?>)_gte.Value; }
            set { _gte = new InputPropertyInfo { Name = "gte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTime?>))]
        #endif
        public QueryBuilderParameter<DateTime?> Lt
        {
            get { return (QueryBuilderParameter<DateTime?>)_lt.Value; }
            set { _lt = new InputPropertyInfo { Name = "lt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTime?>))]
        #endif
        public QueryBuilderParameter<DateTime?> Lte
        {
            get { return (QueryBuilderParameter<DateTime?>)_lte.Value; }
            set { _lte = new InputPropertyInfo { Name = "lte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> Null
        {
            get { return (QueryBuilderParameter<bool?>)_null.Value; }
            set { _null = new InputPropertyInfo { Name = "null", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> NotNull
        {
            get { return (QueryBuilderParameter<bool?>)_notNull.Value; }
            set { _notNull = new InputPropertyInfo { Name = "notNull", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<DateTime?>>))]
        #endif
        public QueryBuilderParameter<ICollection<DateTime?>> In
        {
            get { return (QueryBuilderParameter<ICollection<DateTime?>>)_in.Value; }
            set { _in = new InputPropertyInfo { Name = "in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<DateTime?>>))]
        #endif
        public QueryBuilderParameter<ICollection<DateTime?>> NotIn
        {
            get { return (QueryBuilderParameter<ICollection<DateTime?>>)_notIn.Value; }
            set { _notIn = new InputPropertyInfo { Name = "notIn", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<DateTime?>>))]
        #endif
        public QueryBuilderParameter<ICollection<DateTime?>> Between
        {
            get { return (QueryBuilderParameter<ICollection<DateTime?>>)_between.Value; }
            set { _between = new InputPropertyInfo { Name = "between", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_and.Name != null) yield return _and;
            if (_or.Name != null) yield return _or;
            if (_not.Name != null) yield return _not;
            if (_eq.Name != null) yield return _eq;
            if (_eqi.Name != null) yield return _eqi;
            if (_ne.Name != null) yield return _ne;
            if (_nei.Name != null) yield return _nei;
            if (_startsWith.Name != null) yield return _startsWith;
            if (_endsWith.Name != null) yield return _endsWith;
            if (_contains.Name != null) yield return _contains;
            if (_notContains.Name != null) yield return _notContains;
            if (_containsi.Name != null) yield return _containsi;
            if (_notContainsi.Name != null) yield return _notContainsi;
            if (_gt.Name != null) yield return _gt;
            if (_gte.Name != null) yield return _gte;
            if (_lt.Name != null) yield return _lt;
            if (_lte.Name != null) yield return _lte;
            if (_null.Name != null) yield return _null;
            if (_notNull.Name != null) yield return _notNull;
            if (_in.Name != null) yield return _in;
            if (_notIn.Name != null) yield return _notIn;
            if (_between.Name != null) yield return _between;
        }
    }

    public partial class JsonFilterInput : IGraphQlInputObject
    {
        private InputPropertyInfo _and;
        private InputPropertyInfo _or;
        private InputPropertyInfo _not;
        private InputPropertyInfo _eq;
        private InputPropertyInfo _eqi;
        private InputPropertyInfo _ne;
        private InputPropertyInfo _nei;
        private InputPropertyInfo _startsWith;
        private InputPropertyInfo _endsWith;
        private InputPropertyInfo _contains;
        private InputPropertyInfo _notContains;
        private InputPropertyInfo _containsi;
        private InputPropertyInfo _notContainsi;
        private InputPropertyInfo _gt;
        private InputPropertyInfo _gte;
        private InputPropertyInfo _lt;
        private InputPropertyInfo _lte;
        private InputPropertyInfo _null;
        private InputPropertyInfo _notNull;
        private InputPropertyInfo _in;
        private InputPropertyInfo _notIn;
        private InputPropertyInfo _between;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<object>>))]
        #endif
        public QueryBuilderParameter<ICollection<object>> And
        {
            get { return (QueryBuilderParameter<ICollection<object>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<object>>))]
        #endif
        public QueryBuilderParameter<ICollection<object>> Or
        {
            get { return (QueryBuilderParameter<ICollection<object>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<JsonFilterInput>))]
        #endif
        public QueryBuilderParameter<JsonFilterInput> Not
        {
            get { return (QueryBuilderParameter<JsonFilterInput>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
        #endif
        public QueryBuilderParameter<object> Eq
        {
            get { return (QueryBuilderParameter<object>)_eq.Value; }
            set { _eq = new InputPropertyInfo { Name = "eq", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
        #endif
        public QueryBuilderParameter<object> Eqi
        {
            get { return (QueryBuilderParameter<object>)_eqi.Value; }
            set { _eqi = new InputPropertyInfo { Name = "eqi", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
        #endif
        public QueryBuilderParameter<object> Ne
        {
            get { return (QueryBuilderParameter<object>)_ne.Value; }
            set { _ne = new InputPropertyInfo { Name = "ne", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
        #endif
        public QueryBuilderParameter<object> Nei
        {
            get { return (QueryBuilderParameter<object>)_nei.Value; }
            set { _nei = new InputPropertyInfo { Name = "nei", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
        #endif
        public QueryBuilderParameter<object> StartsWith
        {
            get { return (QueryBuilderParameter<object>)_startsWith.Value; }
            set { _startsWith = new InputPropertyInfo { Name = "startsWith", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
        #endif
        public QueryBuilderParameter<object> EndsWith
        {
            get { return (QueryBuilderParameter<object>)_endsWith.Value; }
            set { _endsWith = new InputPropertyInfo { Name = "endsWith", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
        #endif
        public QueryBuilderParameter<object> Contains
        {
            get { return (QueryBuilderParameter<object>)_contains.Value; }
            set { _contains = new InputPropertyInfo { Name = "contains", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
        #endif
        public QueryBuilderParameter<object> NotContains
        {
            get { return (QueryBuilderParameter<object>)_notContains.Value; }
            set { _notContains = new InputPropertyInfo { Name = "notContains", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
        #endif
        public QueryBuilderParameter<object> Containsi
        {
            get { return (QueryBuilderParameter<object>)_containsi.Value; }
            set { _containsi = new InputPropertyInfo { Name = "containsi", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
        #endif
        public QueryBuilderParameter<object> NotContainsi
        {
            get { return (QueryBuilderParameter<object>)_notContainsi.Value; }
            set { _notContainsi = new InputPropertyInfo { Name = "notContainsi", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
        #endif
        public QueryBuilderParameter<object> Gt
        {
            get { return (QueryBuilderParameter<object>)_gt.Value; }
            set { _gt = new InputPropertyInfo { Name = "gt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
        #endif
        public QueryBuilderParameter<object> Gte
        {
            get { return (QueryBuilderParameter<object>)_gte.Value; }
            set { _gte = new InputPropertyInfo { Name = "gte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
        #endif
        public QueryBuilderParameter<object> Lt
        {
            get { return (QueryBuilderParameter<object>)_lt.Value; }
            set { _lt = new InputPropertyInfo { Name = "lt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
        #endif
        public QueryBuilderParameter<object> Lte
        {
            get { return (QueryBuilderParameter<object>)_lte.Value; }
            set { _lte = new InputPropertyInfo { Name = "lte", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> Null
        {
            get { return (QueryBuilderParameter<bool?>)_null.Value; }
            set { _null = new InputPropertyInfo { Name = "null", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> NotNull
        {
            get { return (QueryBuilderParameter<bool?>)_notNull.Value; }
            set { _notNull = new InputPropertyInfo { Name = "notNull", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<object>>))]
        #endif
        public QueryBuilderParameter<ICollection<object>> In
        {
            get { return (QueryBuilderParameter<ICollection<object>>)_in.Value; }
            set { _in = new InputPropertyInfo { Name = "in", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<object>>))]
        #endif
        public QueryBuilderParameter<ICollection<object>> NotIn
        {
            get { return (QueryBuilderParameter<ICollection<object>>)_notIn.Value; }
            set { _notIn = new InputPropertyInfo { Name = "notIn", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<object>>))]
        #endif
        public QueryBuilderParameter<ICollection<object>> Between
        {
            get { return (QueryBuilderParameter<ICollection<object>>)_between.Value; }
            set { _between = new InputPropertyInfo { Name = "between", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_and.Name != null) yield return _and;
            if (_or.Name != null) yield return _or;
            if (_not.Name != null) yield return _not;
            if (_eq.Name != null) yield return _eq;
            if (_eqi.Name != null) yield return _eqi;
            if (_ne.Name != null) yield return _ne;
            if (_nei.Name != null) yield return _nei;
            if (_startsWith.Name != null) yield return _startsWith;
            if (_endsWith.Name != null) yield return _endsWith;
            if (_contains.Name != null) yield return _contains;
            if (_notContains.Name != null) yield return _notContains;
            if (_containsi.Name != null) yield return _containsi;
            if (_notContainsi.Name != null) yield return _notContainsi;
            if (_gt.Name != null) yield return _gt;
            if (_gte.Name != null) yield return _gte;
            if (_lt.Name != null) yield return _lt;
            if (_lte.Name != null) yield return _lte;
            if (_null.Name != null) yield return _null;
            if (_notNull.Name != null) yield return _notNull;
            if (_in.Name != null) yield return _in;
            if (_notIn.Name != null) yield return _notIn;
            if (_between.Name != null) yield return _between;
        }
    }

    public partial class ComponentVisualTextVisualTextFiltersInput : IGraphQlInputObject
    {
        private InputPropertyInfo _highlights;
        private InputPropertyInfo _overview;
        private InputPropertyInfo _tokenomics;
        private InputPropertyInfo _smartLinks;
        private InputPropertyInfo _and;
        private InputPropertyInfo _or;
        private InputPropertyInfo _not;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ComponentHighlightsHighlightsFiltersInput>))]
        #endif
        public QueryBuilderParameter<ComponentHighlightsHighlightsFiltersInput> Highlights
        {
            get { return (QueryBuilderParameter<ComponentHighlightsHighlightsFiltersInput>)_highlights.Value; }
            set { _highlights = new InputPropertyInfo { Name = "Highlights", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ComponentOverviewOverviewFiltersInput>))]
        #endif
        public QueryBuilderParameter<ComponentOverviewOverviewFiltersInput> Overview
        {
            get { return (QueryBuilderParameter<ComponentOverviewOverviewFiltersInput>)_overview.Value; }
            set { _overview = new InputPropertyInfo { Name = "Overview", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ComponentTokenomicsTokenomicsFiltersInput>))]
        #endif
        public QueryBuilderParameter<ComponentTokenomicsTokenomicsFiltersInput> Tokenomics
        {
            get { return (QueryBuilderParameter<ComponentTokenomicsTokenomicsFiltersInput>)_tokenomics.Value; }
            set { _tokenomics = new InputPropertyInfo { Name = "Tokenomics", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ComponentSmartLinksSmartLinksFiltersInput>))]
        #endif
        public QueryBuilderParameter<ComponentSmartLinksSmartLinksFiltersInput> SmartLinks
        {
            get { return (QueryBuilderParameter<ComponentSmartLinksSmartLinksFiltersInput>)_smartLinks.Value; }
            set { _smartLinks = new InputPropertyInfo { Name = "SmartLinks", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ComponentVisualTextVisualTextFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<ComponentVisualTextVisualTextFiltersInput>> And
        {
            get { return (QueryBuilderParameter<ICollection<ComponentVisualTextVisualTextFiltersInput>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ComponentVisualTextVisualTextFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<ComponentVisualTextVisualTextFiltersInput>> Or
        {
            get { return (QueryBuilderParameter<ICollection<ComponentVisualTextVisualTextFiltersInput>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ComponentVisualTextVisualTextFiltersInput>))]
        #endif
        public QueryBuilderParameter<ComponentVisualTextVisualTextFiltersInput> Not
        {
            get { return (QueryBuilderParameter<ComponentVisualTextVisualTextFiltersInput>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_highlights.Name != null) yield return _highlights;
            if (_overview.Name != null) yield return _overview;
            if (_tokenomics.Name != null) yield return _tokenomics;
            if (_smartLinks.Name != null) yield return _smartLinks;
            if (_and.Name != null) yield return _and;
            if (_or.Name != null) yield return _or;
            if (_not.Name != null) yield return _not;
        }
    }

    public partial class ComponentVisualTextVisualTextInput : IGraphQlInputObject
    {
        private InputPropertyInfo _id;
        private InputPropertyInfo _highlights;
        private InputPropertyInfo _overview;
        private InputPropertyInfo _tokenomics;
        private InputPropertyInfo _smartLinks;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ComponentHighlightsHighlightsInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<ComponentHighlightsHighlightsInput>> Highlights
        {
            get { return (QueryBuilderParameter<ICollection<ComponentHighlightsHighlightsInput>>)_highlights.Value; }
            set { _highlights = new InputPropertyInfo { Name = "Highlights", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ComponentOverviewOverviewInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<ComponentOverviewOverviewInput>> Overview
        {
            get { return (QueryBuilderParameter<ICollection<ComponentOverviewOverviewInput>>)_overview.Value; }
            set { _overview = new InputPropertyInfo { Name = "Overview", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ComponentTokenomicsTokenomicsInput>))]
        #endif
        public QueryBuilderParameter<ComponentTokenomicsTokenomicsInput> Tokenomics
        {
            get { return (QueryBuilderParameter<ComponentTokenomicsTokenomicsInput>)_tokenomics.Value; }
            set { _tokenomics = new InputPropertyInfo { Name = "Tokenomics", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ComponentSmartLinksSmartLinksInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<ComponentSmartLinksSmartLinksInput>> SmartLinks
        {
            get { return (QueryBuilderParameter<ICollection<ComponentSmartLinksSmartLinksInput>>)_smartLinks.Value; }
            set { _smartLinks = new InputPropertyInfo { Name = "SmartLinks", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_id.Name != null) yield return _id;
            if (_highlights.Name != null) yield return _highlights;
            if (_overview.Name != null) yield return _overview;
            if (_tokenomics.Name != null) yield return _tokenomics;
            if (_smartLinks.Name != null) yield return _smartLinks;
        }
    }

    public partial class ComponentVersionVersionFiltersInput : IGraphQlInputObject
    {
        private InputPropertyInfo _contractVersion;
        private InputPropertyInfo _contractType;
        private InputPropertyInfo _and;
        private InputPropertyInfo _or;
        private InputPropertyInfo _not;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ContractFiltersInput>))]
        #endif
        public QueryBuilderParameter<ContractFiltersInput> ContractVersion
        {
            get { return (QueryBuilderParameter<ContractFiltersInput>)_contractVersion.Value; }
            set { _contractVersion = new InputPropertyInfo { Name = "ContractVersion", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ContractTypeFiltersInput>))]
        #endif
        public QueryBuilderParameter<ContractTypeFiltersInput> ContractType
        {
            get { return (QueryBuilderParameter<ContractTypeFiltersInput>)_contractType.Value; }
            set { _contractType = new InputPropertyInfo { Name = "ContractType", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ComponentVersionVersionFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<ComponentVersionVersionFiltersInput>> And
        {
            get { return (QueryBuilderParameter<ICollection<ComponentVersionVersionFiltersInput>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ComponentVersionVersionFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<ComponentVersionVersionFiltersInput>> Or
        {
            get { return (QueryBuilderParameter<ICollection<ComponentVersionVersionFiltersInput>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ComponentVersionVersionFiltersInput>))]
        #endif
        public QueryBuilderParameter<ComponentVersionVersionFiltersInput> Not
        {
            get { return (QueryBuilderParameter<ComponentVersionVersionFiltersInput>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_contractVersion.Name != null) yield return _contractVersion;
            if (_contractType.Name != null) yield return _contractType;
            if (_and.Name != null) yield return _and;
            if (_or.Name != null) yield return _or;
            if (_not.Name != null) yield return _not;
        }
    }

    public partial class ComponentVersionVersionInput : IGraphQlInputObject
    {
        private InputPropertyInfo _id;
        private InputPropertyInfo _contractVersion;
        private InputPropertyInfo _contractType;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ContractVersion
        {
            get { return (QueryBuilderParameter<string>)_contractVersion.Value; }
            set { _contractVersion = new InputPropertyInfo { Name = "ContractVersion", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ContractType
        {
            get { return (QueryBuilderParameter<string>)_contractType.Value; }
            set { _contractType = new InputPropertyInfo { Name = "ContractType", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_id.Name != null) yield return _id;
            if (_contractVersion.Name != null) yield return _contractVersion;
            if (_contractType.Name != null) yield return _contractType;
        }
    }

    public partial class ComponentUploadPoolUploadPoolFiltersInput : IGraphQlInputObject
    {
        private InputPropertyInfo _whitelistRate;
        private InputPropertyInfo _publicRate;
        private InputPropertyInfo _totalTokens;
        private InputPropertyInfo _buyWith;
        private InputPropertyInfo _participants;
        private InputPropertyInfo _and;
        private InputPropertyInfo _or;
        private InputPropertyInfo _not;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<FloatFilterInput>))]
        #endif
        public QueryBuilderParameter<FloatFilterInput> WhitelistRate
        {
            get { return (QueryBuilderParameter<FloatFilterInput>)_whitelistRate.Value; }
            set { _whitelistRate = new InputPropertyInfo { Name = "WhitelistRate", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<FloatFilterInput>))]
        #endif
        public QueryBuilderParameter<FloatFilterInput> PublicRate
        {
            get { return (QueryBuilderParameter<FloatFilterInput>)_publicRate.Value; }
            set { _publicRate = new InputPropertyInfo { Name = "PublicRate", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<FloatFilterInput>))]
        #endif
        public QueryBuilderParameter<FloatFilterInput> TotalTokens
        {
            get { return (QueryBuilderParameter<FloatFilterInput>)_totalTokens.Value; }
            set { _totalTokens = new InputPropertyInfo { Name = "TotalTokens", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("buy_with")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<BuyWithFiltersInput>))]
        #endif
        public QueryBuilderParameter<BuyWithFiltersInput> BuyWith
        {
            get { return (QueryBuilderParameter<BuyWithFiltersInput>)_buyWith.Value; }
            set { _buyWith = new InputPropertyInfo { Name = "buy_with", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IntFilterInput>))]
        #endif
        public QueryBuilderParameter<IntFilterInput> Participants
        {
            get { return (QueryBuilderParameter<IntFilterInput>)_participants.Value; }
            set { _participants = new InputPropertyInfo { Name = "Participants", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ComponentUploadPoolUploadPoolFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<ComponentUploadPoolUploadPoolFiltersInput>> And
        {
            get { return (QueryBuilderParameter<ICollection<ComponentUploadPoolUploadPoolFiltersInput>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ComponentUploadPoolUploadPoolFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<ComponentUploadPoolUploadPoolFiltersInput>> Or
        {
            get { return (QueryBuilderParameter<ICollection<ComponentUploadPoolUploadPoolFiltersInput>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ComponentUploadPoolUploadPoolFiltersInput>))]
        #endif
        public QueryBuilderParameter<ComponentUploadPoolUploadPoolFiltersInput> Not
        {
            get { return (QueryBuilderParameter<ComponentUploadPoolUploadPoolFiltersInput>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_whitelistRate.Name != null) yield return _whitelistRate;
            if (_publicRate.Name != null) yield return _publicRate;
            if (_totalTokens.Name != null) yield return _totalTokens;
            if (_buyWith.Name != null) yield return _buyWith;
            if (_participants.Name != null) yield return _participants;
            if (_and.Name != null) yield return _and;
            if (_or.Name != null) yield return _or;
            if (_not.Name != null) yield return _not;
        }
    }

    public partial class ComponentUploadPoolUploadPoolInput : IGraphQlInputObject
    {
        private InputPropertyInfo _id;
        private InputPropertyInfo _whitelistRate;
        private InputPropertyInfo _publicRate;
        private InputPropertyInfo _totalTokens;
        private InputPropertyInfo _buyWith;
        private InputPropertyInfo _participants;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<decimal?>))]
        #endif
        public QueryBuilderParameter<decimal?> WhitelistRate
        {
            get { return (QueryBuilderParameter<decimal?>)_whitelistRate.Value; }
            set { _whitelistRate = new InputPropertyInfo { Name = "WhitelistRate", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<decimal?>))]
        #endif
        public QueryBuilderParameter<decimal?> PublicRate
        {
            get { return (QueryBuilderParameter<decimal?>)_publicRate.Value; }
            set { _publicRate = new InputPropertyInfo { Name = "PublicRate", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<decimal?>))]
        #endif
        public QueryBuilderParameter<decimal?> TotalTokens
        {
            get { return (QueryBuilderParameter<decimal?>)_totalTokens.Value; }
            set { _totalTokens = new InputPropertyInfo { Name = "TotalTokens", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("buy_with")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> BuyWith
        {
            get { return (QueryBuilderParameter<string>)_buyWith.Value; }
            set { _buyWith = new InputPropertyInfo { Name = "buy_with", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Participants
        {
            get { return (QueryBuilderParameter<int?>)_participants.Value; }
            set { _participants = new InputPropertyInfo { Name = "Participants", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_id.Name != null) yield return _id;
            if (_whitelistRate.Name != null) yield return _whitelistRate;
            if (_publicRate.Name != null) yield return _publicRate;
            if (_totalTokens.Name != null) yield return _totalTokens;
            if (_buyWith.Name != null) yield return _buyWith;
            if (_participants.Name != null) yield return _participants;
        }
    }

    public partial class ComponentTokenomicsTokenomicsFiltersInput : IGraphQlInputObject
    {
        private InputPropertyInfo _marketCap;
        private InputPropertyInfo _tgeMarketCap;
        private InputPropertyInfo _symbol;
        private InputPropertyInfo _circulationSupply;
        private InputPropertyInfo _totalSupply;
        private InputPropertyInfo _totalRaise;
        private InputPropertyInfo _tokenPrice;
        private InputPropertyInfo _and;
        private InputPropertyInfo _or;
        private InputPropertyInfo _not;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> MarketCap
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_marketCap.Value; }
            set { _marketCap = new InputPropertyInfo { Name = "MarketCap", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> TgeMarketCap
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_tgeMarketCap.Value; }
            set { _tgeMarketCap = new InputPropertyInfo { Name = "TGEMarketCap", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Symbol
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_symbol.Value; }
            set { _symbol = new InputPropertyInfo { Name = "Symbol", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> CirculationSupply
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_circulationSupply.Value; }
            set { _circulationSupply = new InputPropertyInfo { Name = "CirculationSupply", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> TotalSupply
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_totalSupply.Value; }
            set { _totalSupply = new InputPropertyInfo { Name = "TotalSupply", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> TotalRaise
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_totalRaise.Value; }
            set { _totalRaise = new InputPropertyInfo { Name = "TotalRaise", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> TokenPrice
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_tokenPrice.Value; }
            set { _tokenPrice = new InputPropertyInfo { Name = "TokenPrice", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ComponentTokenomicsTokenomicsFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<ComponentTokenomicsTokenomicsFiltersInput>> And
        {
            get { return (QueryBuilderParameter<ICollection<ComponentTokenomicsTokenomicsFiltersInput>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ComponentTokenomicsTokenomicsFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<ComponentTokenomicsTokenomicsFiltersInput>> Or
        {
            get { return (QueryBuilderParameter<ICollection<ComponentTokenomicsTokenomicsFiltersInput>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ComponentTokenomicsTokenomicsFiltersInput>))]
        #endif
        public QueryBuilderParameter<ComponentTokenomicsTokenomicsFiltersInput> Not
        {
            get { return (QueryBuilderParameter<ComponentTokenomicsTokenomicsFiltersInput>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_marketCap.Name != null) yield return _marketCap;
            if (_tgeMarketCap.Name != null) yield return _tgeMarketCap;
            if (_symbol.Name != null) yield return _symbol;
            if (_circulationSupply.Name != null) yield return _circulationSupply;
            if (_totalSupply.Name != null) yield return _totalSupply;
            if (_totalRaise.Name != null) yield return _totalRaise;
            if (_tokenPrice.Name != null) yield return _tokenPrice;
            if (_and.Name != null) yield return _and;
            if (_or.Name != null) yield return _or;
            if (_not.Name != null) yield return _not;
        }
    }

    public partial class ComponentTokenomicsTokenomicsInput : IGraphQlInputObject
    {
        private InputPropertyInfo _id;
        private InputPropertyInfo _visualInfo;
        private InputPropertyInfo _marketCap;
        private InputPropertyInfo _tgeMarketCap;
        private InputPropertyInfo _symbol;
        private InputPropertyInfo _circulationSupply;
        private InputPropertyInfo _totalSupply;
        private InputPropertyInfo _totalRaise;
        private InputPropertyInfo _tokenPrice;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> VisualInfo
        {
            get { return (QueryBuilderParameter<string>)_visualInfo.Value; }
            set { _visualInfo = new InputPropertyInfo { Name = "VisualInfo", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> MarketCap
        {
            get { return (QueryBuilderParameter<string>)_marketCap.Value; }
            set { _marketCap = new InputPropertyInfo { Name = "MarketCap", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TgeMarketCap
        {
            get { return (QueryBuilderParameter<string>)_tgeMarketCap.Value; }
            set { _tgeMarketCap = new InputPropertyInfo { Name = "TGEMarketCap", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Symbol
        {
            get { return (QueryBuilderParameter<string>)_symbol.Value; }
            set { _symbol = new InputPropertyInfo { Name = "Symbol", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> CirculationSupply
        {
            get { return (QueryBuilderParameter<string>)_circulationSupply.Value; }
            set { _circulationSupply = new InputPropertyInfo { Name = "CirculationSupply", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TotalSupply
        {
            get { return (QueryBuilderParameter<string>)_totalSupply.Value; }
            set { _totalSupply = new InputPropertyInfo { Name = "TotalSupply", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TotalRaise
        {
            get { return (QueryBuilderParameter<string>)_totalRaise.Value; }
            set { _totalRaise = new InputPropertyInfo { Name = "TotalRaise", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TokenPrice
        {
            get { return (QueryBuilderParameter<string>)_tokenPrice.Value; }
            set { _tokenPrice = new InputPropertyInfo { Name = "TokenPrice", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_id.Name != null) yield return _id;
            if (_visualInfo.Name != null) yield return _visualInfo;
            if (_marketCap.Name != null) yield return _marketCap;
            if (_tgeMarketCap.Name != null) yield return _tgeMarketCap;
            if (_symbol.Name != null) yield return _symbol;
            if (_circulationSupply.Name != null) yield return _circulationSupply;
            if (_totalSupply.Name != null) yield return _totalSupply;
            if (_totalRaise.Name != null) yield return _totalRaise;
            if (_tokenPrice.Name != null) yield return _tokenPrice;
        }
    }

    public partial class ComponentTokenomicsListOfStringsFiltersInput : IGraphQlInputObject
    {
        private InputPropertyInfo _evmAddress;
        private InputPropertyInfo _and;
        private InputPropertyInfo _or;
        private InputPropertyInfo _not;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> EvmAddress
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_evmAddress.Value; }
            set { _evmAddress = new InputPropertyInfo { Name = "EvmAddress", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ComponentTokenomicsListOfStringsFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<ComponentTokenomicsListOfStringsFiltersInput>> And
        {
            get { return (QueryBuilderParameter<ICollection<ComponentTokenomicsListOfStringsFiltersInput>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ComponentTokenomicsListOfStringsFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<ComponentTokenomicsListOfStringsFiltersInput>> Or
        {
            get { return (QueryBuilderParameter<ICollection<ComponentTokenomicsListOfStringsFiltersInput>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ComponentTokenomicsListOfStringsFiltersInput>))]
        #endif
        public QueryBuilderParameter<ComponentTokenomicsListOfStringsFiltersInput> Not
        {
            get { return (QueryBuilderParameter<ComponentTokenomicsListOfStringsFiltersInput>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_evmAddress.Name != null) yield return _evmAddress;
            if (_and.Name != null) yield return _and;
            if (_or.Name != null) yield return _or;
            if (_not.Name != null) yield return _not;
        }
    }

    public partial class ComponentTokenomicsListOfStringsInput : IGraphQlInputObject
    {
        private InputPropertyInfo _id;
        private InputPropertyInfo _evmAddress;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> EvmAddress
        {
            get { return (QueryBuilderParameter<string>)_evmAddress.Value; }
            set { _evmAddress = new InputPropertyInfo { Name = "EvmAddress", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_id.Name != null) yield return _id;
            if (_evmAddress.Name != null) yield return _evmAddress;
        }
    }

    public partial class ComponentTokenDistributionTokenDistributionFiltersInput : IGraphQlInputObject
    {
        private InputPropertyInfo _unlock;
        private InputPropertyInfo _ratio;
        private InputPropertyInfo _isTimeTba;
        private InputPropertyInfo _startTime;
        private InputPropertyInfo _and;
        private InputPropertyInfo _or;
        private InputPropertyInfo _not;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> Unlock
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_unlock.Value; }
            set { _unlock = new InputPropertyInfo { Name = "Unlock", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<FloatFilterInput>))]
        #endif
        public QueryBuilderParameter<FloatFilterInput> Ratio
        {
            get { return (QueryBuilderParameter<FloatFilterInput>)_ratio.Value; }
            set { _ratio = new InputPropertyInfo { Name = "Ratio", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<BooleanFilterInput>))]
        #endif
        public QueryBuilderParameter<BooleanFilterInput> IsTimeTba
        {
            get { return (QueryBuilderParameter<BooleanFilterInput>)_isTimeTba.Value; }
            set { _isTimeTba = new InputPropertyInfo { Name = "IsTimeTBA", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> StartTime
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_startTime.Value; }
            set { _startTime = new InputPropertyInfo { Name = "StartTime", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ComponentTokenDistributionTokenDistributionFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<ComponentTokenDistributionTokenDistributionFiltersInput>> And
        {
            get { return (QueryBuilderParameter<ICollection<ComponentTokenDistributionTokenDistributionFiltersInput>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ComponentTokenDistributionTokenDistributionFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<ComponentTokenDistributionTokenDistributionFiltersInput>> Or
        {
            get { return (QueryBuilderParameter<ICollection<ComponentTokenDistributionTokenDistributionFiltersInput>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ComponentTokenDistributionTokenDistributionFiltersInput>))]
        #endif
        public QueryBuilderParameter<ComponentTokenDistributionTokenDistributionFiltersInput> Not
        {
            get { return (QueryBuilderParameter<ComponentTokenDistributionTokenDistributionFiltersInput>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_unlock.Name != null) yield return _unlock;
            if (_ratio.Name != null) yield return _ratio;
            if (_isTimeTba.Name != null) yield return _isTimeTba;
            if (_startTime.Name != null) yield return _startTime;
            if (_and.Name != null) yield return _and;
            if (_or.Name != null) yield return _or;
            if (_not.Name != null) yield return _not;
        }
    }

    public partial class ComponentTokenDistributionTokenDistributionInput : IGraphQlInputObject
    {
        private InputPropertyInfo _id;
        private InputPropertyInfo _unlock;
        private InputPropertyInfo _ratio;
        private InputPropertyInfo _isTimeTba;
        private InputPropertyInfo _startTime;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTime?>))]
        #endif
        public QueryBuilderParameter<DateTime?> Unlock
        {
            get { return (QueryBuilderParameter<DateTime?>)_unlock.Value; }
            set { _unlock = new InputPropertyInfo { Name = "Unlock", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<decimal?>))]
        #endif
        public QueryBuilderParameter<decimal?> Ratio
        {
            get { return (QueryBuilderParameter<decimal?>)_ratio.Value; }
            set { _ratio = new InputPropertyInfo { Name = "Ratio", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsTimeTba
        {
            get { return (QueryBuilderParameter<bool?>)_isTimeTba.Value; }
            set { _isTimeTba = new InputPropertyInfo { Name = "IsTimeTBA", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTime?>))]
        #endif
        public QueryBuilderParameter<DateTime?> StartTime
        {
            get { return (QueryBuilderParameter<DateTime?>)_startTime.Value; }
            set { _startTime = new InputPropertyInfo { Name = "StartTime", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_id.Name != null) yield return _id;
            if (_unlock.Name != null) yield return _unlock;
            if (_ratio.Name != null) yield return _ratio;
            if (_isTimeTba.Name != null) yield return _isTimeTba;
            if (_startTime.Name != null) yield return _startTime;
        }
    }

    public partial class ComponentSyntheticZoneSynteticFiltersInput : IGraphQlInputObject
    {
        private InputPropertyInfo _tokenAddress;
        private InputPropertyInfo _chainSetting;
        private InputPropertyInfo _and;
        private InputPropertyInfo _or;
        private InputPropertyInfo _not;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> TokenAddress
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_tokenAddress.Value; }
            set { _tokenAddress = new InputPropertyInfo { Name = "TokenAddress", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("chain_setting")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ChainSettingFiltersInput>))]
        #endif
        public QueryBuilderParameter<ChainSettingFiltersInput> ChainSetting
        {
            get { return (QueryBuilderParameter<ChainSettingFiltersInput>)_chainSetting.Value; }
            set { _chainSetting = new InputPropertyInfo { Name = "chain_setting", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ComponentSyntheticZoneSynteticFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<ComponentSyntheticZoneSynteticFiltersInput>> And
        {
            get { return (QueryBuilderParameter<ICollection<ComponentSyntheticZoneSynteticFiltersInput>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ComponentSyntheticZoneSynteticFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<ComponentSyntheticZoneSynteticFiltersInput>> Or
        {
            get { return (QueryBuilderParameter<ICollection<ComponentSyntheticZoneSynteticFiltersInput>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ComponentSyntheticZoneSynteticFiltersInput>))]
        #endif
        public QueryBuilderParameter<ComponentSyntheticZoneSynteticFiltersInput> Not
        {
            get { return (QueryBuilderParameter<ComponentSyntheticZoneSynteticFiltersInput>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_tokenAddress.Name != null) yield return _tokenAddress;
            if (_chainSetting.Name != null) yield return _chainSetting;
            if (_and.Name != null) yield return _and;
            if (_or.Name != null) yield return _or;
            if (_not.Name != null) yield return _not;
        }
    }

    public partial class ComponentSyntheticZoneSynteticInput : IGraphQlInputObject
    {
        private InputPropertyInfo _id;
        private InputPropertyInfo _tokenAddress;
        private InputPropertyInfo _chainSetting;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TokenAddress
        {
            get { return (QueryBuilderParameter<string>)_tokenAddress.Value; }
            set { _tokenAddress = new InputPropertyInfo { Name = "TokenAddress", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("chain_setting")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ChainSetting
        {
            get { return (QueryBuilderParameter<string>)_chainSetting.Value; }
            set { _chainSetting = new InputPropertyInfo { Name = "chain_setting", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_id.Name != null) yield return _id;
            if (_tokenAddress.Name != null) yield return _tokenAddress;
            if (_chainSetting.Name != null) yield return _chainSetting;
        }
    }

    public partial class ComponentSmartLinksSmartLinksFiltersInput : IGraphQlInputObject
    {
        private InputPropertyInfo _url;
        private InputPropertyInfo _linkType;
        private InputPropertyInfo _and;
        private InputPropertyInfo _or;
        private InputPropertyInfo _not;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Url
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_url.Value; }
            set { _url = new InputPropertyInfo { Name = "URL", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("link_type")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<LinkTypeFiltersInput>))]
        #endif
        public QueryBuilderParameter<LinkTypeFiltersInput> LinkType
        {
            get { return (QueryBuilderParameter<LinkTypeFiltersInput>)_linkType.Value; }
            set { _linkType = new InputPropertyInfo { Name = "link_type", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ComponentSmartLinksSmartLinksFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<ComponentSmartLinksSmartLinksFiltersInput>> And
        {
            get { return (QueryBuilderParameter<ICollection<ComponentSmartLinksSmartLinksFiltersInput>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ComponentSmartLinksSmartLinksFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<ComponentSmartLinksSmartLinksFiltersInput>> Or
        {
            get { return (QueryBuilderParameter<ICollection<ComponentSmartLinksSmartLinksFiltersInput>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ComponentSmartLinksSmartLinksFiltersInput>))]
        #endif
        public QueryBuilderParameter<ComponentSmartLinksSmartLinksFiltersInput> Not
        {
            get { return (QueryBuilderParameter<ComponentSmartLinksSmartLinksFiltersInput>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_url.Name != null) yield return _url;
            if (_linkType.Name != null) yield return _linkType;
            if (_and.Name != null) yield return _and;
            if (_or.Name != null) yield return _or;
            if (_not.Name != null) yield return _not;
        }
    }

    public partial class ComponentSmartLinksSmartLinksInput : IGraphQlInputObject
    {
        private InputPropertyInfo _id;
        private InputPropertyInfo _url;
        private InputPropertyInfo _linkType;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Url
        {
            get { return (QueryBuilderParameter<string>)_url.Value; }
            set { _url = new InputPropertyInfo { Name = "URL", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("link_type")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> LinkType
        {
            get { return (QueryBuilderParameter<string>)_linkType.Value; }
            set { _linkType = new InputPropertyInfo { Name = "link_type", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_id.Name != null) yield return _id;
            if (_url.Name != null) yield return _url;
            if (_linkType.Name != null) yield return _linkType;
        }
    }

    public partial class ComponentSimpleUrlSimpleUrlFiltersInput : IGraphQlInputObject
    {
        private InputPropertyInfo _name;
        private InputPropertyInfo _url;
        private InputPropertyInfo _newWindow;
        private InputPropertyInfo _and;
        private InputPropertyInfo _or;
        private InputPropertyInfo _not;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Name
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Url
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_url.Value; }
            set { _url = new InputPropertyInfo { Name = "url", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<BooleanFilterInput>))]
        #endif
        public QueryBuilderParameter<BooleanFilterInput> NewWindow
        {
            get { return (QueryBuilderParameter<BooleanFilterInput>)_newWindow.Value; }
            set { _newWindow = new InputPropertyInfo { Name = "newWindow", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ComponentSimpleUrlSimpleUrlFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<ComponentSimpleUrlSimpleUrlFiltersInput>> And
        {
            get { return (QueryBuilderParameter<ICollection<ComponentSimpleUrlSimpleUrlFiltersInput>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ComponentSimpleUrlSimpleUrlFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<ComponentSimpleUrlSimpleUrlFiltersInput>> Or
        {
            get { return (QueryBuilderParameter<ICollection<ComponentSimpleUrlSimpleUrlFiltersInput>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ComponentSimpleUrlSimpleUrlFiltersInput>))]
        #endif
        public QueryBuilderParameter<ComponentSimpleUrlSimpleUrlFiltersInput> Not
        {
            get { return (QueryBuilderParameter<ComponentSimpleUrlSimpleUrlFiltersInput>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_name.Name != null) yield return _name;
            if (_url.Name != null) yield return _url;
            if (_newWindow.Name != null) yield return _newWindow;
            if (_and.Name != null) yield return _and;
            if (_or.Name != null) yield return _or;
            if (_not.Name != null) yield return _not;
        }
    }

    public partial class ComponentSimpleUrlSimpleUrlInput : IGraphQlInputObject
    {
        private InputPropertyInfo _id;
        private InputPropertyInfo _name;
        private InputPropertyInfo _url;
        private InputPropertyInfo _newWindow;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Name
        {
            get { return (QueryBuilderParameter<string>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Url
        {
            get { return (QueryBuilderParameter<string>)_url.Value; }
            set { _url = new InputPropertyInfo { Name = "url", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> NewWindow
        {
            get { return (QueryBuilderParameter<bool?>)_newWindow.Value; }
            set { _newWindow = new InputPropertyInfo { Name = "newWindow", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_id.Name != null) yield return _id;
            if (_name.Name != null) yield return _name;
            if (_url.Name != null) yield return _url;
            if (_newWindow.Name != null) yield return _newWindow;
        }
    }

    public partial class ComponentSectionSectionInput : IGraphQlInputObject
    {
        private InputPropertyInfo _id;
        private InputPropertyInfo _title;
        private InputPropertyInfo _smallText;
        private InputPropertyInfo _topBgUrl;
        private InputPropertyInfo _topBg;
        private InputPropertyInfo _htmlColorText;
        private InputPropertyInfo _mainCta;
        private InputPropertyInfo _secondCta;
        private InputPropertyInfo _secondTitle;
        private InputPropertyInfo _secondSmallText;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Title
        {
            get { return (QueryBuilderParameter<string>)_title.Value; }
            set { _title = new InputPropertyInfo { Name = "Title", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> SmallText
        {
            get { return (QueryBuilderParameter<string>)_smallText.Value; }
            set { _smallText = new InputPropertyInfo { Name = "smallText", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TopBgUrl
        {
            get { return (QueryBuilderParameter<string>)_topBgUrl.Value; }
            set { _topBgUrl = new InputPropertyInfo { Name = "TopBgUrl", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TopBg
        {
            get { return (QueryBuilderParameter<string>)_topBg.Value; }
            set { _topBg = new InputPropertyInfo { Name = "TopBg", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ComponentHtmlColorTextHtmlColorTextInput>))]
        #endif
        public QueryBuilderParameter<ComponentHtmlColorTextHtmlColorTextInput> HtmlColorText
        {
            get { return (QueryBuilderParameter<ComponentHtmlColorTextHtmlColorTextInput>)_htmlColorText.Value; }
            set { _htmlColorText = new InputPropertyInfo { Name = "htmlColorText", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ComponentMainCtaMainCtaInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<ComponentMainCtaMainCtaInput>> MainCta
        {
            get { return (QueryBuilderParameter<ICollection<ComponentMainCtaMainCtaInput>>)_mainCta.Value; }
            set { _mainCta = new InputPropertyInfo { Name = "MainCTA", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ComponentMainCtaMainCtaInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<ComponentMainCtaMainCtaInput>> SecondCta
        {
            get { return (QueryBuilderParameter<ICollection<ComponentMainCtaMainCtaInput>>)_secondCta.Value; }
            set { _secondCta = new InputPropertyInfo { Name = "secondCta", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> SecondTitle
        {
            get { return (QueryBuilderParameter<string>)_secondTitle.Value; }
            set { _secondTitle = new InputPropertyInfo { Name = "secondTitle", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> SecondSmallText
        {
            get { return (QueryBuilderParameter<string>)_secondSmallText.Value; }
            set { _secondSmallText = new InputPropertyInfo { Name = "SecondSmallText", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_id.Name != null) yield return _id;
            if (_title.Name != null) yield return _title;
            if (_smallText.Name != null) yield return _smallText;
            if (_topBgUrl.Name != null) yield return _topBgUrl;
            if (_topBg.Name != null) yield return _topBg;
            if (_htmlColorText.Name != null) yield return _htmlColorText;
            if (_mainCta.Name != null) yield return _mainCta;
            if (_secondCta.Name != null) yield return _secondCta;
            if (_secondTitle.Name != null) yield return _secondTitle;
            if (_secondSmallText.Name != null) yield return _secondSmallText;
        }
    }

    public partial class ComponentOverviewOverviewFiltersInput : IGraphQlInputObject
    {
        private InputPropertyInfo _name;
        private InputPropertyInfo _boldText;
        private InputPropertyInfo _text;
        private InputPropertyInfo _and;
        private InputPropertyInfo _or;
        private InputPropertyInfo _not;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Name
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "Name", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> BoldText
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_boldText.Value; }
            set { _boldText = new InputPropertyInfo { Name = "BoldText", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Text
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_text.Value; }
            set { _text = new InputPropertyInfo { Name = "Text", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ComponentOverviewOverviewFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<ComponentOverviewOverviewFiltersInput>> And
        {
            get { return (QueryBuilderParameter<ICollection<ComponentOverviewOverviewFiltersInput>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ComponentOverviewOverviewFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<ComponentOverviewOverviewFiltersInput>> Or
        {
            get { return (QueryBuilderParameter<ICollection<ComponentOverviewOverviewFiltersInput>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ComponentOverviewOverviewFiltersInput>))]
        #endif
        public QueryBuilderParameter<ComponentOverviewOverviewFiltersInput> Not
        {
            get { return (QueryBuilderParameter<ComponentOverviewOverviewFiltersInput>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_name.Name != null) yield return _name;
            if (_boldText.Name != null) yield return _boldText;
            if (_text.Name != null) yield return _text;
            if (_and.Name != null) yield return _and;
            if (_or.Name != null) yield return _or;
            if (_not.Name != null) yield return _not;
        }
    }

    public partial class ComponentOverviewOverviewInput : IGraphQlInputObject
    {
        private InputPropertyInfo _id;
        private InputPropertyInfo _name;
        private InputPropertyInfo _boldText;
        private InputPropertyInfo _text;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Name
        {
            get { return (QueryBuilderParameter<string>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "Name", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> BoldText
        {
            get { return (QueryBuilderParameter<string>)_boldText.Value; }
            set { _boldText = new InputPropertyInfo { Name = "BoldText", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Text
        {
            get { return (QueryBuilderParameter<string>)_text.Value; }
            set { _text = new InputPropertyInfo { Name = "Text", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_id.Name != null) yield return _id;
            if (_name.Name != null) yield return _name;
            if (_boldText.Name != null) yield return _boldText;
            if (_text.Name != null) yield return _text;
        }
    }

    public partial class ComponentPhaseStartEndAmountFiltersInput : IGraphQlInputObject
    {
        private InputPropertyInfo _start;
        private InputPropertyInfo _finish;
        private InputPropertyInfo _maxInvest;
        private InputPropertyInfo _and;
        private InputPropertyInfo _or;
        private InputPropertyInfo _not;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> Start
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_start.Value; }
            set { _start = new InputPropertyInfo { Name = "Start", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> Finish
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_finish.Value; }
            set { _finish = new InputPropertyInfo { Name = "Finish", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<LongFilterInput>))]
        #endif
        public QueryBuilderParameter<LongFilterInput> MaxInvest
        {
            get { return (QueryBuilderParameter<LongFilterInput>)_maxInvest.Value; }
            set { _maxInvest = new InputPropertyInfo { Name = "MaxInvest", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ComponentPhaseStartEndAmountFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<ComponentPhaseStartEndAmountFiltersInput>> And
        {
            get { return (QueryBuilderParameter<ICollection<ComponentPhaseStartEndAmountFiltersInput>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ComponentPhaseStartEndAmountFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<ComponentPhaseStartEndAmountFiltersInput>> Or
        {
            get { return (QueryBuilderParameter<ICollection<ComponentPhaseStartEndAmountFiltersInput>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ComponentPhaseStartEndAmountFiltersInput>))]
        #endif
        public QueryBuilderParameter<ComponentPhaseStartEndAmountFiltersInput> Not
        {
            get { return (QueryBuilderParameter<ComponentPhaseStartEndAmountFiltersInput>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_start.Name != null) yield return _start;
            if (_finish.Name != null) yield return _finish;
            if (_maxInvest.Name != null) yield return _maxInvest;
            if (_and.Name != null) yield return _and;
            if (_or.Name != null) yield return _or;
            if (_not.Name != null) yield return _not;
        }
    }

    public partial class ComponentPhaseStartEndAmountInput : IGraphQlInputObject
    {
        private InputPropertyInfo _id;
        private InputPropertyInfo _start;
        private InputPropertyInfo _finish;
        private InputPropertyInfo _maxInvest;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTime?>))]
        #endif
        public QueryBuilderParameter<DateTime?> Start
        {
            get { return (QueryBuilderParameter<DateTime?>)_start.Value; }
            set { _start = new InputPropertyInfo { Name = "Start", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTime?>))]
        #endif
        public QueryBuilderParameter<DateTime?> Finish
        {
            get { return (QueryBuilderParameter<DateTime?>)_finish.Value; }
            set { _finish = new InputPropertyInfo { Name = "Finish", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?> MaxInvest
        {
            get { return (QueryBuilderParameter<long?>)_maxInvest.Value; }
            set { _maxInvest = new InputPropertyInfo { Name = "MaxInvest", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_id.Name != null) yield return _id;
            if (_start.Name != null) yield return _start;
            if (_finish.Name != null) yield return _finish;
            if (_maxInvest.Name != null) yield return _maxInvest;
        }
    }

    public partial class ComponentIconTextIconTextFiltersInput : IGraphQlInputObject
    {
        private InputPropertyInfo _text;
        private InputPropertyInfo _smallText;
        private InputPropertyInfo _and;
        private InputPropertyInfo _or;
        private InputPropertyInfo _not;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Text
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_text.Value; }
            set { _text = new InputPropertyInfo { Name = "text", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> SmallText
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_smallText.Value; }
            set { _smallText = new InputPropertyInfo { Name = "smallText", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ComponentIconTextIconTextFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<ComponentIconTextIconTextFiltersInput>> And
        {
            get { return (QueryBuilderParameter<ICollection<ComponentIconTextIconTextFiltersInput>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ComponentIconTextIconTextFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<ComponentIconTextIconTextFiltersInput>> Or
        {
            get { return (QueryBuilderParameter<ICollection<ComponentIconTextIconTextFiltersInput>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ComponentIconTextIconTextFiltersInput>))]
        #endif
        public QueryBuilderParameter<ComponentIconTextIconTextFiltersInput> Not
        {
            get { return (QueryBuilderParameter<ComponentIconTextIconTextFiltersInput>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_text.Name != null) yield return _text;
            if (_smallText.Name != null) yield return _smallText;
            if (_and.Name != null) yield return _and;
            if (_or.Name != null) yield return _or;
            if (_not.Name != null) yield return _not;
        }
    }

    public partial class ComponentIconTextIconTextInput : IGraphQlInputObject
    {
        private InputPropertyInfo _id;
        private InputPropertyInfo _text;
        private InputPropertyInfo _smallText;
        private InputPropertyInfo _icon;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Text
        {
            get { return (QueryBuilderParameter<string>)_text.Value; }
            set { _text = new InputPropertyInfo { Name = "text", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> SmallText
        {
            get { return (QueryBuilderParameter<string>)_smallText.Value; }
            set { _smallText = new InputPropertyInfo { Name = "smallText", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Icon
        {
            get { return (QueryBuilderParameter<string>)_icon.Value; }
            set { _icon = new InputPropertyInfo { Name = "icon", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_id.Name != null) yield return _id;
            if (_text.Name != null) yield return _text;
            if (_smallText.Name != null) yield return _smallText;
            if (_icon.Name != null) yield return _icon;
        }
    }

    public partial class ComponentHtmlColorTextHtmlColorTextFiltersInput : IGraphQlInputObject
    {
        private InputPropertyInfo _text;
        private InputPropertyInfo _color;
        private InputPropertyInfo _url;
        private InputPropertyInfo _and;
        private InputPropertyInfo _or;
        private InputPropertyInfo _not;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Text
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_text.Value; }
            set { _text = new InputPropertyInfo { Name = "text", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Color
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_color.Value; }
            set { _color = new InputPropertyInfo { Name = "color", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Url
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_url.Value; }
            set { _url = new InputPropertyInfo { Name = "url", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ComponentHtmlColorTextHtmlColorTextFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<ComponentHtmlColorTextHtmlColorTextFiltersInput>> And
        {
            get { return (QueryBuilderParameter<ICollection<ComponentHtmlColorTextHtmlColorTextFiltersInput>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ComponentHtmlColorTextHtmlColorTextFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<ComponentHtmlColorTextHtmlColorTextFiltersInput>> Or
        {
            get { return (QueryBuilderParameter<ICollection<ComponentHtmlColorTextHtmlColorTextFiltersInput>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ComponentHtmlColorTextHtmlColorTextFiltersInput>))]
        #endif
        public QueryBuilderParameter<ComponentHtmlColorTextHtmlColorTextFiltersInput> Not
        {
            get { return (QueryBuilderParameter<ComponentHtmlColorTextHtmlColorTextFiltersInput>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_text.Name != null) yield return _text;
            if (_color.Name != null) yield return _color;
            if (_url.Name != null) yield return _url;
            if (_and.Name != null) yield return _and;
            if (_or.Name != null) yield return _or;
            if (_not.Name != null) yield return _not;
        }
    }

    public partial class ComponentHtmlColorTextHtmlColorTextInput : IGraphQlInputObject
    {
        private InputPropertyInfo _id;
        private InputPropertyInfo _text;
        private InputPropertyInfo _color;
        private InputPropertyInfo _url;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Text
        {
            get { return (QueryBuilderParameter<string>)_text.Value; }
            set { _text = new InputPropertyInfo { Name = "text", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Color
        {
            get { return (QueryBuilderParameter<string>)_color.Value; }
            set { _color = new InputPropertyInfo { Name = "color", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Url
        {
            get { return (QueryBuilderParameter<string>)_url.Value; }
            set { _url = new InputPropertyInfo { Name = "url", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_id.Name != null) yield return _id;
            if (_text.Name != null) yield return _text;
            if (_color.Name != null) yield return _color;
            if (_url.Name != null) yield return _url;
        }
    }

    public partial class ComponentMainCtaMainCtaFiltersInput : IGraphQlInputObject
    {
        private InputPropertyInfo _text;
        private InputPropertyInfo _url;
        private InputPropertyInfo _ctaText;
        private InputPropertyInfo _addText;
        private InputPropertyInfo _backColor;
        private InputPropertyInfo _textColor;
        private InputPropertyInfo _hoverBackColor;
        private InputPropertyInfo _flag;
        private InputPropertyInfo _and;
        private InputPropertyInfo _or;
        private InputPropertyInfo _not;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Text
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_text.Value; }
            set { _text = new InputPropertyInfo { Name = "text", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Url
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_url.Value; }
            set { _url = new InputPropertyInfo { Name = "url", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> CtaText
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_ctaText.Value; }
            set { _ctaText = new InputPropertyInfo { Name = "ctaText", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> AddText
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_addText.Value; }
            set { _addText = new InputPropertyInfo { Name = "addText", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> BackColor
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_backColor.Value; }
            set { _backColor = new InputPropertyInfo { Name = "backColor", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> TextColor
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_textColor.Value; }
            set { _textColor = new InputPropertyInfo { Name = "TextColor", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> HoverBackColor
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_hoverBackColor.Value; }
            set { _hoverBackColor = new InputPropertyInfo { Name = "hoverBackColor", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<BooleanFilterInput>))]
        #endif
        public QueryBuilderParameter<BooleanFilterInput> Flag
        {
            get { return (QueryBuilderParameter<BooleanFilterInput>)_flag.Value; }
            set { _flag = new InputPropertyInfo { Name = "flag", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ComponentMainCtaMainCtaFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<ComponentMainCtaMainCtaFiltersInput>> And
        {
            get { return (QueryBuilderParameter<ICollection<ComponentMainCtaMainCtaFiltersInput>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ComponentMainCtaMainCtaFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<ComponentMainCtaMainCtaFiltersInput>> Or
        {
            get { return (QueryBuilderParameter<ICollection<ComponentMainCtaMainCtaFiltersInput>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ComponentMainCtaMainCtaFiltersInput>))]
        #endif
        public QueryBuilderParameter<ComponentMainCtaMainCtaFiltersInput> Not
        {
            get { return (QueryBuilderParameter<ComponentMainCtaMainCtaFiltersInput>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_text.Name != null) yield return _text;
            if (_url.Name != null) yield return _url;
            if (_ctaText.Name != null) yield return _ctaText;
            if (_addText.Name != null) yield return _addText;
            if (_backColor.Name != null) yield return _backColor;
            if (_textColor.Name != null) yield return _textColor;
            if (_hoverBackColor.Name != null) yield return _hoverBackColor;
            if (_flag.Name != null) yield return _flag;
            if (_and.Name != null) yield return _and;
            if (_or.Name != null) yield return _or;
            if (_not.Name != null) yield return _not;
        }
    }

    public partial class ComponentMainCtaMainCtaInput : IGraphQlInputObject
    {
        private InputPropertyInfo _id;
        private InputPropertyInfo _text;
        private InputPropertyInfo _url;
        private InputPropertyInfo _ctaText;
        private InputPropertyInfo _addText;
        private InputPropertyInfo _backColor;
        private InputPropertyInfo _textColor;
        private InputPropertyInfo _hoverBackColor;
        private InputPropertyInfo _flag;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Text
        {
            get { return (QueryBuilderParameter<string>)_text.Value; }
            set { _text = new InputPropertyInfo { Name = "text", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Url
        {
            get { return (QueryBuilderParameter<string>)_url.Value; }
            set { _url = new InputPropertyInfo { Name = "url", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> CtaText
        {
            get { return (QueryBuilderParameter<string>)_ctaText.Value; }
            set { _ctaText = new InputPropertyInfo { Name = "ctaText", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> AddText
        {
            get { return (QueryBuilderParameter<string>)_addText.Value; }
            set { _addText = new InputPropertyInfo { Name = "addText", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> BackColor
        {
            get { return (QueryBuilderParameter<string>)_backColor.Value; }
            set { _backColor = new InputPropertyInfo { Name = "backColor", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TextColor
        {
            get { return (QueryBuilderParameter<string>)_textColor.Value; }
            set { _textColor = new InputPropertyInfo { Name = "TextColor", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> HoverBackColor
        {
            get { return (QueryBuilderParameter<string>)_hoverBackColor.Value; }
            set { _hoverBackColor = new InputPropertyInfo { Name = "hoverBackColor", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> Flag
        {
            get { return (QueryBuilderParameter<bool?>)_flag.Value; }
            set { _flag = new InputPropertyInfo { Name = "flag", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_id.Name != null) yield return _id;
            if (_text.Name != null) yield return _text;
            if (_url.Name != null) yield return _url;
            if (_ctaText.Name != null) yield return _ctaText;
            if (_addText.Name != null) yield return _addText;
            if (_backColor.Name != null) yield return _backColor;
            if (_textColor.Name != null) yield return _textColor;
            if (_hoverBackColor.Name != null) yield return _hoverBackColor;
            if (_flag.Name != null) yield return _flag;
        }
    }

    public partial class ComponentHeaderSimpleUrlHeaderSimpleUrlFiltersInput : IGraphQlInputObject
    {
        private InputPropertyInfo _text;
        private InputPropertyInfo _url;
        private InputPropertyInfo _ctaText;
        private InputPropertyInfo _textColor;
        private InputPropertyInfo _and;
        private InputPropertyInfo _or;
        private InputPropertyInfo _not;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Text
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_text.Value; }
            set { _text = new InputPropertyInfo { Name = "text", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Url
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_url.Value; }
            set { _url = new InputPropertyInfo { Name = "url", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> CtaText
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_ctaText.Value; }
            set { _ctaText = new InputPropertyInfo { Name = "ctaText", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> TextColor
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_textColor.Value; }
            set { _textColor = new InputPropertyInfo { Name = "textColor", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ComponentHeaderSimpleUrlHeaderSimpleUrlFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<ComponentHeaderSimpleUrlHeaderSimpleUrlFiltersInput>> And
        {
            get { return (QueryBuilderParameter<ICollection<ComponentHeaderSimpleUrlHeaderSimpleUrlFiltersInput>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ComponentHeaderSimpleUrlHeaderSimpleUrlFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<ComponentHeaderSimpleUrlHeaderSimpleUrlFiltersInput>> Or
        {
            get { return (QueryBuilderParameter<ICollection<ComponentHeaderSimpleUrlHeaderSimpleUrlFiltersInput>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ComponentHeaderSimpleUrlHeaderSimpleUrlFiltersInput>))]
        #endif
        public QueryBuilderParameter<ComponentHeaderSimpleUrlHeaderSimpleUrlFiltersInput> Not
        {
            get { return (QueryBuilderParameter<ComponentHeaderSimpleUrlHeaderSimpleUrlFiltersInput>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_text.Name != null) yield return _text;
            if (_url.Name != null) yield return _url;
            if (_ctaText.Name != null) yield return _ctaText;
            if (_textColor.Name != null) yield return _textColor;
            if (_and.Name != null) yield return _and;
            if (_or.Name != null) yield return _or;
            if (_not.Name != null) yield return _not;
        }
    }

    public partial class ComponentHeaderSimpleUrlHeaderSimpleUrlInput : IGraphQlInputObject
    {
        private InputPropertyInfo _id;
        private InputPropertyInfo _text;
        private InputPropertyInfo _url;
        private InputPropertyInfo _ctaText;
        private InputPropertyInfo _textColor;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Text
        {
            get { return (QueryBuilderParameter<string>)_text.Value; }
            set { _text = new InputPropertyInfo { Name = "text", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Url
        {
            get { return (QueryBuilderParameter<string>)_url.Value; }
            set { _url = new InputPropertyInfo { Name = "url", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> CtaText
        {
            get { return (QueryBuilderParameter<string>)_ctaText.Value; }
            set { _ctaText = new InputPropertyInfo { Name = "ctaText", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TextColor
        {
            get { return (QueryBuilderParameter<string>)_textColor.Value; }
            set { _textColor = new InputPropertyInfo { Name = "textColor", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_id.Name != null) yield return _id;
            if (_text.Name != null) yield return _text;
            if (_url.Name != null) yield return _url;
            if (_ctaText.Name != null) yield return _ctaText;
            if (_textColor.Name != null) yield return _textColor;
        }
    }

    public partial class ComponentHighlightsHighlightsFiltersInput : IGraphQlInputObject
    {
        private InputPropertyInfo _value;
        private InputPropertyInfo _and;
        private InputPropertyInfo _or;
        private InputPropertyInfo _not;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Value
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_value.Value; }
            set { _value = new InputPropertyInfo { Name = "Value", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ComponentHighlightsHighlightsFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<ComponentHighlightsHighlightsFiltersInput>> And
        {
            get { return (QueryBuilderParameter<ICollection<ComponentHighlightsHighlightsFiltersInput>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ComponentHighlightsHighlightsFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<ComponentHighlightsHighlightsFiltersInput>> Or
        {
            get { return (QueryBuilderParameter<ICollection<ComponentHighlightsHighlightsFiltersInput>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ComponentHighlightsHighlightsFiltersInput>))]
        #endif
        public QueryBuilderParameter<ComponentHighlightsHighlightsFiltersInput> Not
        {
            get { return (QueryBuilderParameter<ComponentHighlightsHighlightsFiltersInput>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_value.Name != null) yield return _value;
            if (_and.Name != null) yield return _and;
            if (_or.Name != null) yield return _or;
            if (_not.Name != null) yield return _not;
        }
    }

    public partial class ComponentHighlightsHighlightsInput : IGraphQlInputObject
    {
        private InputPropertyInfo _id;
        private InputPropertyInfo _value;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Value
        {
            get { return (QueryBuilderParameter<string>)_value.Value; }
            set { _value = new InputPropertyInfo { Name = "Value", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_id.Name != null) yield return _id;
            if (_value.Name != null) yield return _value;
        }
    }

    public partial class ComponentDictionaryLinksFiltersInput : IGraphQlInputObject
    {
        private InputPropertyInfo _name;
        private InputPropertyInfo _url;
        private InputPropertyInfo _and;
        private InputPropertyInfo _or;
        private InputPropertyInfo _not;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Name
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Url
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_url.Value; }
            set { _url = new InputPropertyInfo { Name = "url", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ComponentDictionaryLinksFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<ComponentDictionaryLinksFiltersInput>> And
        {
            get { return (QueryBuilderParameter<ICollection<ComponentDictionaryLinksFiltersInput>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ComponentDictionaryLinksFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<ComponentDictionaryLinksFiltersInput>> Or
        {
            get { return (QueryBuilderParameter<ICollection<ComponentDictionaryLinksFiltersInput>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ComponentDictionaryLinksFiltersInput>))]
        #endif
        public QueryBuilderParameter<ComponentDictionaryLinksFiltersInput> Not
        {
            get { return (QueryBuilderParameter<ComponentDictionaryLinksFiltersInput>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_name.Name != null) yield return _name;
            if (_url.Name != null) yield return _url;
            if (_and.Name != null) yield return _and;
            if (_or.Name != null) yield return _or;
            if (_not.Name != null) yield return _not;
        }
    }

    public partial class ComponentDictionaryLinksInput : IGraphQlInputObject
    {
        private InputPropertyInfo _id;
        private InputPropertyInfo _name;
        private InputPropertyInfo _url;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Name
        {
            get { return (QueryBuilderParameter<string>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Url
        {
            get { return (QueryBuilderParameter<string>)_url.Value; }
            set { _url = new InputPropertyInfo { Name = "url", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_id.Name != null) yield return _id;
            if (_name.Name != null) yield return _name;
            if (_url.Name != null) yield return _url;
        }
    }

    public partial class ComponentContractOnChainContractOnChainFiltersInput : IGraphQlInputObject
    {
        private InputPropertyInfo _contractVersion;
        private InputPropertyInfo _address;
        private InputPropertyInfo _contractType;
        private InputPropertyInfo _and;
        private InputPropertyInfo _or;
        private InputPropertyInfo _not;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ContractFiltersInput>))]
        #endif
        public QueryBuilderParameter<ContractFiltersInput> ContractVersion
        {
            get { return (QueryBuilderParameter<ContractFiltersInput>)_contractVersion.Value; }
            set { _contractVersion = new InputPropertyInfo { Name = "ContractVersion", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Address
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_address.Value; }
            set { _address = new InputPropertyInfo { Name = "Address", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ContractTypeFiltersInput>))]
        #endif
        public QueryBuilderParameter<ContractTypeFiltersInput> ContractType
        {
            get { return (QueryBuilderParameter<ContractTypeFiltersInput>)_contractType.Value; }
            set { _contractType = new InputPropertyInfo { Name = "ContractType", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ComponentContractOnChainContractOnChainFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<ComponentContractOnChainContractOnChainFiltersInput>> And
        {
            get { return (QueryBuilderParameter<ICollection<ComponentContractOnChainContractOnChainFiltersInput>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ComponentContractOnChainContractOnChainFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<ComponentContractOnChainContractOnChainFiltersInput>> Or
        {
            get { return (QueryBuilderParameter<ICollection<ComponentContractOnChainContractOnChainFiltersInput>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ComponentContractOnChainContractOnChainFiltersInput>))]
        #endif
        public QueryBuilderParameter<ComponentContractOnChainContractOnChainFiltersInput> Not
        {
            get { return (QueryBuilderParameter<ComponentContractOnChainContractOnChainFiltersInput>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_contractVersion.Name != null) yield return _contractVersion;
            if (_address.Name != null) yield return _address;
            if (_contractType.Name != null) yield return _contractType;
            if (_and.Name != null) yield return _and;
            if (_or.Name != null) yield return _or;
            if (_not.Name != null) yield return _not;
        }
    }

    public partial class ComponentContractOnChainContractOnChainInput : IGraphQlInputObject
    {
        private InputPropertyInfo _id;
        private InputPropertyInfo _contractVersion;
        private InputPropertyInfo _address;
        private InputPropertyInfo _contractType;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ContractVersion
        {
            get { return (QueryBuilderParameter<string>)_contractVersion.Value; }
            set { _contractVersion = new InputPropertyInfo { Name = "ContractVersion", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Address
        {
            get { return (QueryBuilderParameter<string>)_address.Value; }
            set { _address = new InputPropertyInfo { Name = "Address", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ContractType
        {
            get { return (QueryBuilderParameter<string>)_contractType.Value; }
            set { _contractType = new InputPropertyInfo { Name = "ContractType", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_id.Name != null) yield return _id;
            if (_contractVersion.Name != null) yield return _contractVersion;
            if (_address.Name != null) yield return _address;
            if (_contractType.Name != null) yield return _contractType;
        }
    }

    public partial class ComponentCompilerSettingCompilerSettingsFiltersInput : IGraphQlInputObject
    {
        private InputPropertyInfo _evmVersion;
        private InputPropertyInfo _supportedPragmaVersion;
        private InputPropertyInfo _optimizerEnabled;
        private InputPropertyInfo _runs;
        private InputPropertyInfo _viaIr;
        private InputPropertyInfo _and;
        private InputPropertyInfo _or;
        private InputPropertyInfo _not;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("evm_version")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<EvmVersionFiltersInput>))]
        #endif
        public QueryBuilderParameter<EvmVersionFiltersInput> EvmVersion
        {
            get { return (QueryBuilderParameter<EvmVersionFiltersInput>)_evmVersion.Value; }
            set { _evmVersion = new InputPropertyInfo { Name = "evm_version", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("supported_pragma_version")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<PragmaVersionFiltersInput>))]
        #endif
        public QueryBuilderParameter<PragmaVersionFiltersInput> SupportedPragmaVersion
        {
            get { return (QueryBuilderParameter<PragmaVersionFiltersInput>)_supportedPragmaVersion.Value; }
            set { _supportedPragmaVersion = new InputPropertyInfo { Name = "supported_pragma_version", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<BooleanFilterInput>))]
        #endif
        public QueryBuilderParameter<BooleanFilterInput> OptimizerEnabled
        {
            get { return (QueryBuilderParameter<BooleanFilterInput>)_optimizerEnabled.Value; }
            set { _optimizerEnabled = new InputPropertyInfo { Name = "optimizerEnabled", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IntFilterInput>))]
        #endif
        public QueryBuilderParameter<IntFilterInput> Runs
        {
            get { return (QueryBuilderParameter<IntFilterInput>)_runs.Value; }
            set { _runs = new InputPropertyInfo { Name = "runs", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<BooleanFilterInput>))]
        #endif
        public QueryBuilderParameter<BooleanFilterInput> ViaIr
        {
            get { return (QueryBuilderParameter<BooleanFilterInput>)_viaIr.Value; }
            set { _viaIr = new InputPropertyInfo { Name = "viaIR", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ComponentCompilerSettingCompilerSettingsFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<ComponentCompilerSettingCompilerSettingsFiltersInput>> And
        {
            get { return (QueryBuilderParameter<ICollection<ComponentCompilerSettingCompilerSettingsFiltersInput>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ComponentCompilerSettingCompilerSettingsFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<ComponentCompilerSettingCompilerSettingsFiltersInput>> Or
        {
            get { return (QueryBuilderParameter<ICollection<ComponentCompilerSettingCompilerSettingsFiltersInput>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ComponentCompilerSettingCompilerSettingsFiltersInput>))]
        #endif
        public QueryBuilderParameter<ComponentCompilerSettingCompilerSettingsFiltersInput> Not
        {
            get { return (QueryBuilderParameter<ComponentCompilerSettingCompilerSettingsFiltersInput>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_evmVersion.Name != null) yield return _evmVersion;
            if (_supportedPragmaVersion.Name != null) yield return _supportedPragmaVersion;
            if (_optimizerEnabled.Name != null) yield return _optimizerEnabled;
            if (_runs.Name != null) yield return _runs;
            if (_viaIr.Name != null) yield return _viaIr;
            if (_and.Name != null) yield return _and;
            if (_or.Name != null) yield return _or;
            if (_not.Name != null) yield return _not;
        }
    }

    public partial class ComponentCompilerSettingCompilerSettingsInput : IGraphQlInputObject
    {
        private InputPropertyInfo _id;
        private InputPropertyInfo _evmVersion;
        private InputPropertyInfo _supportedPragmaVersion;
        private InputPropertyInfo _optimizerEnabled;
        private InputPropertyInfo _runs;
        private InputPropertyInfo _viaIr;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("evm_version")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> EvmVersion
        {
            get { return (QueryBuilderParameter<string>)_evmVersion.Value; }
            set { _evmVersion = new InputPropertyInfo { Name = "evm_version", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("supported_pragma_version")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> SupportedPragmaVersion
        {
            get { return (QueryBuilderParameter<string>)_supportedPragmaVersion.Value; }
            set { _supportedPragmaVersion = new InputPropertyInfo { Name = "supported_pragma_version", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> OptimizerEnabled
        {
            get { return (QueryBuilderParameter<bool?>)_optimizerEnabled.Value; }
            set { _optimizerEnabled = new InputPropertyInfo { Name = "optimizerEnabled", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Runs
        {
            get { return (QueryBuilderParameter<int?>)_runs.Value; }
            set { _runs = new InputPropertyInfo { Name = "runs", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> ViaIr
        {
            get { return (QueryBuilderParameter<bool?>)_viaIr.Value; }
            set { _viaIr = new InputPropertyInfo { Name = "viaIR", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_id.Name != null) yield return _id;
            if (_evmVersion.Name != null) yield return _evmVersion;
            if (_supportedPragmaVersion.Name != null) yield return _supportedPragmaVersion;
            if (_optimizerEnabled.Name != null) yield return _optimizerEnabled;
            if (_runs.Name != null) yield return _runs;
            if (_viaIr.Name != null) yield return _viaIr;
        }
    }

    public partial class ComponentColorIconColorIconFiltersInput : IGraphQlInputObject
    {
        private InputPropertyInfo _color;
        private InputPropertyInfo _and;
        private InputPropertyInfo _or;
        private InputPropertyInfo _not;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Color
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_color.Value; }
            set { _color = new InputPropertyInfo { Name = "Color", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ComponentColorIconColorIconFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<ComponentColorIconColorIconFiltersInput>> And
        {
            get { return (QueryBuilderParameter<ICollection<ComponentColorIconColorIconFiltersInput>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ComponentColorIconColorIconFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<ComponentColorIconColorIconFiltersInput>> Or
        {
            get { return (QueryBuilderParameter<ICollection<ComponentColorIconColorIconFiltersInput>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ComponentColorIconColorIconFiltersInput>))]
        #endif
        public QueryBuilderParameter<ComponentColorIconColorIconFiltersInput> Not
        {
            get { return (QueryBuilderParameter<ComponentColorIconColorIconFiltersInput>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_color.Name != null) yield return _color;
            if (_and.Name != null) yield return _and;
            if (_or.Name != null) yield return _or;
            if (_not.Name != null) yield return _not;
        }
    }

    public partial class ComponentColorIconColorIconInput : IGraphQlInputObject
    {
        private InputPropertyInfo _id;
        private InputPropertyInfo _icon;
        private InputPropertyInfo _color;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Icon
        {
            get { return (QueryBuilderParameter<string>)_icon.Value; }
            set { _icon = new InputPropertyInfo { Name = "icon", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Color
        {
            get { return (QueryBuilderParameter<string>)_color.Value; }
            set { _color = new InputPropertyInfo { Name = "Color", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_id.Name != null) yield return _id;
            if (_icon.Name != null) yield return _icon;
            if (_color.Name != null) yield return _color;
        }
    }

    public partial class ComponentInvestorsInvestorsFiltersInput : IGraphQlInputObject
    {
        private InputPropertyInfo _investor;
        private InputPropertyInfo _category;
        private InputPropertyInfo _and;
        private InputPropertyInfo _or;
        private InputPropertyInfo _not;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<InvestorFiltersInput>))]
        #endif
        public QueryBuilderParameter<InvestorFiltersInput> Investor
        {
            get { return (QueryBuilderParameter<InvestorFiltersInput>)_investor.Value; }
            set { _investor = new InputPropertyInfo { Name = "investor", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Category
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_category.Value; }
            set { _category = new InputPropertyInfo { Name = "Category", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ComponentInvestorsInvestorsFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<ComponentInvestorsInvestorsFiltersInput>> And
        {
            get { return (QueryBuilderParameter<ICollection<ComponentInvestorsInvestorsFiltersInput>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ComponentInvestorsInvestorsFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<ComponentInvestorsInvestorsFiltersInput>> Or
        {
            get { return (QueryBuilderParameter<ICollection<ComponentInvestorsInvestorsFiltersInput>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ComponentInvestorsInvestorsFiltersInput>))]
        #endif
        public QueryBuilderParameter<ComponentInvestorsInvestorsFiltersInput> Not
        {
            get { return (QueryBuilderParameter<ComponentInvestorsInvestorsFiltersInput>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_investor.Name != null) yield return _investor;
            if (_category.Name != null) yield return _category;
            if (_and.Name != null) yield return _and;
            if (_or.Name != null) yield return _or;
            if (_not.Name != null) yield return _not;
        }
    }

    public partial class ComponentInvestorsInvestorsInput : IGraphQlInputObject
    {
        private InputPropertyInfo _id;
        private InputPropertyInfo _investor;
        private InputPropertyInfo _category;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Investor
        {
            get { return (QueryBuilderParameter<string>)_investor.Value; }
            set { _investor = new InputPropertyInfo { Name = "investor", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Category
        {
            get { return (QueryBuilderParameter<string>)_category.Value; }
            set { _category = new InputPropertyInfo { Name = "Category", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_id.Name != null) yield return _id;
            if (_investor.Name != null) yield return _investor;
            if (_category.Name != null) yield return _category;
        }
    }

    public partial class ComponentChainAddressesOnlyAddressFiltersInput : IGraphQlInputObject
    {
        private InputPropertyInfo _name;
        private InputPropertyInfo _address;
        private InputPropertyInfo _isLocked;
        private InputPropertyInfo _and;
        private InputPropertyInfo _or;
        private InputPropertyInfo _not;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Name
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "Name", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Address
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_address.Value; }
            set { _address = new InputPropertyInfo { Name = "Address", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<BooleanFilterInput>))]
        #endif
        public QueryBuilderParameter<BooleanFilterInput> IsLocked
        {
            get { return (QueryBuilderParameter<BooleanFilterInput>)_isLocked.Value; }
            set { _isLocked = new InputPropertyInfo { Name = "IsLocked", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ComponentChainAddressesOnlyAddressFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<ComponentChainAddressesOnlyAddressFiltersInput>> And
        {
            get { return (QueryBuilderParameter<ICollection<ComponentChainAddressesOnlyAddressFiltersInput>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ComponentChainAddressesOnlyAddressFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<ComponentChainAddressesOnlyAddressFiltersInput>> Or
        {
            get { return (QueryBuilderParameter<ICollection<ComponentChainAddressesOnlyAddressFiltersInput>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ComponentChainAddressesOnlyAddressFiltersInput>))]
        #endif
        public QueryBuilderParameter<ComponentChainAddressesOnlyAddressFiltersInput> Not
        {
            get { return (QueryBuilderParameter<ComponentChainAddressesOnlyAddressFiltersInput>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_name.Name != null) yield return _name;
            if (_address.Name != null) yield return _address;
            if (_isLocked.Name != null) yield return _isLocked;
            if (_and.Name != null) yield return _and;
            if (_or.Name != null) yield return _or;
            if (_not.Name != null) yield return _not;
        }
    }

    public partial class ComponentChainAddressesOnlyAddressInput : IGraphQlInputObject
    {
        private InputPropertyInfo _id;
        private InputPropertyInfo _name;
        private InputPropertyInfo _address;
        private InputPropertyInfo _isLocked;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Name
        {
            get { return (QueryBuilderParameter<string>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "Name", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Address
        {
            get { return (QueryBuilderParameter<string>)_address.Value; }
            set { _address = new InputPropertyInfo { Name = "Address", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsLocked
        {
            get { return (QueryBuilderParameter<bool?>)_isLocked.Value; }
            set { _isLocked = new InputPropertyInfo { Name = "IsLocked", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_id.Name != null) yield return _id;
            if (_name.Name != null) yield return _name;
            if (_address.Name != null) yield return _address;
            if (_isLocked.Name != null) yield return _isLocked;
        }
    }

    public partial class ComponentChainAddressesChainAddressesFiltersInput : IGraphQlInputObject
    {
        private InputPropertyInfo _chainSetting;
        private InputPropertyInfo _address;
        private InputPropertyInfo _and;
        private InputPropertyInfo _or;
        private InputPropertyInfo _not;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("chain_setting")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ChainSettingFiltersInput>))]
        #endif
        public QueryBuilderParameter<ChainSettingFiltersInput> ChainSetting
        {
            get { return (QueryBuilderParameter<ChainSettingFiltersInput>)_chainSetting.Value; }
            set { _chainSetting = new InputPropertyInfo { Name = "chain_setting", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Address
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_address.Value; }
            set { _address = new InputPropertyInfo { Name = "Address", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ComponentChainAddressesChainAddressesFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<ComponentChainAddressesChainAddressesFiltersInput>> And
        {
            get { return (QueryBuilderParameter<ICollection<ComponentChainAddressesChainAddressesFiltersInput>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ComponentChainAddressesChainAddressesFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<ComponentChainAddressesChainAddressesFiltersInput>> Or
        {
            get { return (QueryBuilderParameter<ICollection<ComponentChainAddressesChainAddressesFiltersInput>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ComponentChainAddressesChainAddressesFiltersInput>))]
        #endif
        public QueryBuilderParameter<ComponentChainAddressesChainAddressesFiltersInput> Not
        {
            get { return (QueryBuilderParameter<ComponentChainAddressesChainAddressesFiltersInput>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_chainSetting.Name != null) yield return _chainSetting;
            if (_address.Name != null) yield return _address;
            if (_and.Name != null) yield return _and;
            if (_or.Name != null) yield return _or;
            if (_not.Name != null) yield return _not;
        }
    }

    public partial class ComponentChainAddressesChainAddressesInput : IGraphQlInputObject
    {
        private InputPropertyInfo _id;
        private InputPropertyInfo _chainSetting;
        private InputPropertyInfo _address;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("chain_setting")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ChainSetting
        {
            get { return (QueryBuilderParameter<string>)_chainSetting.Value; }
            set { _chainSetting = new InputPropertyInfo { Name = "chain_setting", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Address
        {
            get { return (QueryBuilderParameter<string>)_address.Value; }
            set { _address = new InputPropertyInfo { Name = "Address", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_id.Name != null) yield return _id;
            if (_chainSetting.Name != null) yield return _chainSetting;
            if (_address.Name != null) yield return _address;
        }
    }

    public partial class ComponentFullTokenDistributionFullTokenDistributionFiltersInput : IGraphQlInputObject
    {
        private InputPropertyInfo _tge;
        private InputPropertyInfo _monthly;
        private InputPropertyInfo _text;
        private InputPropertyInfo _distributionType;
        private InputPropertyInfo _nonEvmChain;
        private InputPropertyInfo _and;
        private InputPropertyInfo _or;
        private InputPropertyInfo _not;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ComponentTokenDistributionTokenDistributionFiltersInput>))]
        #endif
        public QueryBuilderParameter<ComponentTokenDistributionTokenDistributionFiltersInput> Tge
        {
            get { return (QueryBuilderParameter<ComponentTokenDistributionTokenDistributionFiltersInput>)_tge.Value; }
            set { _tge = new InputPropertyInfo { Name = "TGE", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ComponentTokenDistributionTokenDistributionFiltersInput>))]
        #endif
        public QueryBuilderParameter<ComponentTokenDistributionTokenDistributionFiltersInput> Monthly
        {
            get { return (QueryBuilderParameter<ComponentTokenDistributionTokenDistributionFiltersInput>)_monthly.Value; }
            set { _monthly = new InputPropertyInfo { Name = "Monthly", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Text
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_text.Value; }
            set { _text = new InputPropertyInfo { Name = "Text", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> DistributionType
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_distributionType.Value; }
            set { _distributionType = new InputPropertyInfo { Name = "DistributionType", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("non_evm_chain")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<NonEvmChainFiltersInput>))]
        #endif
        public QueryBuilderParameter<NonEvmChainFiltersInput> NonEvmChain
        {
            get { return (QueryBuilderParameter<NonEvmChainFiltersInput>)_nonEvmChain.Value; }
            set { _nonEvmChain = new InputPropertyInfo { Name = "non_evm_chain", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ComponentFullTokenDistributionFullTokenDistributionFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<ComponentFullTokenDistributionFullTokenDistributionFiltersInput>> And
        {
            get { return (QueryBuilderParameter<ICollection<ComponentFullTokenDistributionFullTokenDistributionFiltersInput>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ComponentFullTokenDistributionFullTokenDistributionFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<ComponentFullTokenDistributionFullTokenDistributionFiltersInput>> Or
        {
            get { return (QueryBuilderParameter<ICollection<ComponentFullTokenDistributionFullTokenDistributionFiltersInput>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ComponentFullTokenDistributionFullTokenDistributionFiltersInput>))]
        #endif
        public QueryBuilderParameter<ComponentFullTokenDistributionFullTokenDistributionFiltersInput> Not
        {
            get { return (QueryBuilderParameter<ComponentFullTokenDistributionFullTokenDistributionFiltersInput>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_tge.Name != null) yield return _tge;
            if (_monthly.Name != null) yield return _monthly;
            if (_text.Name != null) yield return _text;
            if (_distributionType.Name != null) yield return _distributionType;
            if (_nonEvmChain.Name != null) yield return _nonEvmChain;
            if (_and.Name != null) yield return _and;
            if (_or.Name != null) yield return _or;
            if (_not.Name != null) yield return _not;
        }
    }

    public partial class ComponentFullTokenDistributionFullTokenDistributionInput : IGraphQlInputObject
    {
        private InputPropertyInfo _id;
        private InputPropertyInfo _tge;
        private InputPropertyInfo _monthly;
        private InputPropertyInfo _text;
        private InputPropertyInfo _distributionType;
        private InputPropertyInfo _nonEvmChain;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Id
        {
            get { return (QueryBuilderParameter<string>)_id.Value; }
            set { _id = new InputPropertyInfo { Name = "id", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ComponentTokenDistributionTokenDistributionInput>))]
        #endif
        public QueryBuilderParameter<ComponentTokenDistributionTokenDistributionInput> Tge
        {
            get { return (QueryBuilderParameter<ComponentTokenDistributionTokenDistributionInput>)_tge.Value; }
            set { _tge = new InputPropertyInfo { Name = "TGE", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ComponentTokenDistributionTokenDistributionInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<ComponentTokenDistributionTokenDistributionInput>> Monthly
        {
            get { return (QueryBuilderParameter<ICollection<ComponentTokenDistributionTokenDistributionInput>>)_monthly.Value; }
            set { _monthly = new InputPropertyInfo { Name = "Monthly", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Text
        {
            get { return (QueryBuilderParameter<string>)_text.Value; }
            set { _text = new InputPropertyInfo { Name = "Text", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> DistributionType
        {
            get { return (QueryBuilderParameter<string>)_distributionType.Value; }
            set { _distributionType = new InputPropertyInfo { Name = "DistributionType", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("non_evm_chain")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> NonEvmChain
        {
            get { return (QueryBuilderParameter<string>)_nonEvmChain.Value; }
            set { _nonEvmChain = new InputPropertyInfo { Name = "non_evm_chain", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_id.Name != null) yield return _id;
            if (_tge.Name != null) yield return _tge;
            if (_monthly.Name != null) yield return _monthly;
            if (_text.Name != null) yield return _text;
            if (_distributionType.Name != null) yield return _distributionType;
            if (_nonEvmChain.Name != null) yield return _nonEvmChain;
        }
    }

    public partial class UploadFileFiltersInput : IGraphQlInputObject
    {
        private InputPropertyInfo _documentId;
        private InputPropertyInfo _name;
        private InputPropertyInfo _alternativeText;
        private InputPropertyInfo _caption;
        private InputPropertyInfo _width;
        private InputPropertyInfo _height;
        private InputPropertyInfo _formats;
        private InputPropertyInfo _hash;
        private InputPropertyInfo _ext;
        private InputPropertyInfo _mime;
        private InputPropertyInfo _size;
        private InputPropertyInfo _url;
        private InputPropertyInfo _previewUrl;
        private InputPropertyInfo _provider;
        private InputPropertyInfo _providerMetadata;
        private InputPropertyInfo _createdAt;
        private InputPropertyInfo _updatedAt;
        private InputPropertyInfo _publishedAt;
        private InputPropertyInfo _and;
        private InputPropertyInfo _or;
        private InputPropertyInfo _not;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterInput>))]
        #endif
        public QueryBuilderParameter<IdFilterInput> DocumentId
        {
            get { return (QueryBuilderParameter<IdFilterInput>)_documentId.Value; }
            set { _documentId = new InputPropertyInfo { Name = "documentId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Name
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> AlternativeText
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_alternativeText.Value; }
            set { _alternativeText = new InputPropertyInfo { Name = "alternativeText", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Caption
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_caption.Value; }
            set { _caption = new InputPropertyInfo { Name = "caption", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IntFilterInput>))]
        #endif
        public QueryBuilderParameter<IntFilterInput> Width
        {
            get { return (QueryBuilderParameter<IntFilterInput>)_width.Value; }
            set { _width = new InputPropertyInfo { Name = "width", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IntFilterInput>))]
        #endif
        public QueryBuilderParameter<IntFilterInput> Height
        {
            get { return (QueryBuilderParameter<IntFilterInput>)_height.Value; }
            set { _height = new InputPropertyInfo { Name = "height", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<JsonFilterInput>))]
        #endif
        public QueryBuilderParameter<JsonFilterInput> Formats
        {
            get { return (QueryBuilderParameter<JsonFilterInput>)_formats.Value; }
            set { _formats = new InputPropertyInfo { Name = "formats", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Hash
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_hash.Value; }
            set { _hash = new InputPropertyInfo { Name = "hash", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Ext
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_ext.Value; }
            set { _ext = new InputPropertyInfo { Name = "ext", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Mime
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_mime.Value; }
            set { _mime = new InputPropertyInfo { Name = "mime", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<FloatFilterInput>))]
        #endif
        public QueryBuilderParameter<FloatFilterInput> Size
        {
            get { return (QueryBuilderParameter<FloatFilterInput>)_size.Value; }
            set { _size = new InputPropertyInfo { Name = "size", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Url
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_url.Value; }
            set { _url = new InputPropertyInfo { Name = "url", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> PreviewUrl
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_previewUrl.Value; }
            set { _previewUrl = new InputPropertyInfo { Name = "previewUrl", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Provider
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_provider.Value; }
            set { _provider = new InputPropertyInfo { Name = "provider", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("provider_metadata")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<JsonFilterInput>))]
        #endif
        public QueryBuilderParameter<JsonFilterInput> ProviderMetadata
        {
            get { return (QueryBuilderParameter<JsonFilterInput>)_providerMetadata.Value; }
            set { _providerMetadata = new InputPropertyInfo { Name = "provider_metadata", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> CreatedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_createdAt.Value; }
            set { _createdAt = new InputPropertyInfo { Name = "createdAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> UpdatedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_updatedAt.Value; }
            set { _updatedAt = new InputPropertyInfo { Name = "updatedAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> PublishedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_publishedAt.Value; }
            set { _publishedAt = new InputPropertyInfo { Name = "publishedAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<UploadFileFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<UploadFileFiltersInput>> And
        {
            get { return (QueryBuilderParameter<ICollection<UploadFileFiltersInput>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<UploadFileFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<UploadFileFiltersInput>> Or
        {
            get { return (QueryBuilderParameter<ICollection<UploadFileFiltersInput>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<UploadFileFiltersInput>))]
        #endif
        public QueryBuilderParameter<UploadFileFiltersInput> Not
        {
            get { return (QueryBuilderParameter<UploadFileFiltersInput>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_documentId.Name != null) yield return _documentId;
            if (_name.Name != null) yield return _name;
            if (_alternativeText.Name != null) yield return _alternativeText;
            if (_caption.Name != null) yield return _caption;
            if (_width.Name != null) yield return _width;
            if (_height.Name != null) yield return _height;
            if (_formats.Name != null) yield return _formats;
            if (_hash.Name != null) yield return _hash;
            if (_ext.Name != null) yield return _ext;
            if (_mime.Name != null) yield return _mime;
            if (_size.Name != null) yield return _size;
            if (_url.Name != null) yield return _url;
            if (_previewUrl.Name != null) yield return _previewUrl;
            if (_provider.Name != null) yield return _provider;
            if (_providerMetadata.Name != null) yield return _providerMetadata;
            if (_createdAt.Name != null) yield return _createdAt;
            if (_updatedAt.Name != null) yield return _updatedAt;
            if (_publishedAt.Name != null) yield return _publishedAt;
            if (_and.Name != null) yield return _and;
            if (_or.Name != null) yield return _or;
            if (_not.Name != null) yield return _not;
        }
    }

    public partial class I18NLocaleFiltersInput : IGraphQlInputObject
    {
        private InputPropertyInfo _documentId;
        private InputPropertyInfo _name;
        private InputPropertyInfo _code;
        private InputPropertyInfo _createdAt;
        private InputPropertyInfo _updatedAt;
        private InputPropertyInfo _publishedAt;
        private InputPropertyInfo _and;
        private InputPropertyInfo _or;
        private InputPropertyInfo _not;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterInput>))]
        #endif
        public QueryBuilderParameter<IdFilterInput> DocumentId
        {
            get { return (QueryBuilderParameter<IdFilterInput>)_documentId.Value; }
            set { _documentId = new InputPropertyInfo { Name = "documentId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Name
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Code
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_code.Value; }
            set { _code = new InputPropertyInfo { Name = "code", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> CreatedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_createdAt.Value; }
            set { _createdAt = new InputPropertyInfo { Name = "createdAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> UpdatedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_updatedAt.Value; }
            set { _updatedAt = new InputPropertyInfo { Name = "updatedAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> PublishedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_publishedAt.Value; }
            set { _publishedAt = new InputPropertyInfo { Name = "publishedAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<I18NLocaleFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<I18NLocaleFiltersInput>> And
        {
            get { return (QueryBuilderParameter<ICollection<I18NLocaleFiltersInput>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<I18NLocaleFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<I18NLocaleFiltersInput>> Or
        {
            get { return (QueryBuilderParameter<ICollection<I18NLocaleFiltersInput>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<I18NLocaleFiltersInput>))]
        #endif
        public QueryBuilderParameter<I18NLocaleFiltersInput> Not
        {
            get { return (QueryBuilderParameter<I18NLocaleFiltersInput>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_documentId.Name != null) yield return _documentId;
            if (_name.Name != null) yield return _name;
            if (_code.Name != null) yield return _code;
            if (_createdAt.Name != null) yield return _createdAt;
            if (_updatedAt.Name != null) yield return _updatedAt;
            if (_publishedAt.Name != null) yield return _publishedAt;
            if (_and.Name != null) yield return _and;
            if (_or.Name != null) yield return _or;
            if (_not.Name != null) yield return _not;
        }
    }

    public partial class ReviewWorkflowsWorkflowFiltersInput : IGraphQlInputObject
    {
        private InputPropertyInfo _documentId;
        private InputPropertyInfo _name;
        private InputPropertyInfo _stages;
        private InputPropertyInfo _stageRequiredToPublish;
        private InputPropertyInfo _contentTypes;
        private InputPropertyInfo _createdAt;
        private InputPropertyInfo _updatedAt;
        private InputPropertyInfo _publishedAt;
        private InputPropertyInfo _and;
        private InputPropertyInfo _or;
        private InputPropertyInfo _not;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterInput>))]
        #endif
        public QueryBuilderParameter<IdFilterInput> DocumentId
        {
            get { return (QueryBuilderParameter<IdFilterInput>)_documentId.Value; }
            set { _documentId = new InputPropertyInfo { Name = "documentId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Name
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ReviewWorkflowsWorkflowStageFiltersInput>))]
        #endif
        public QueryBuilderParameter<ReviewWorkflowsWorkflowStageFiltersInput> Stages
        {
            get { return (QueryBuilderParameter<ReviewWorkflowsWorkflowStageFiltersInput>)_stages.Value; }
            set { _stages = new InputPropertyInfo { Name = "stages", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ReviewWorkflowsWorkflowStageFiltersInput>))]
        #endif
        public QueryBuilderParameter<ReviewWorkflowsWorkflowStageFiltersInput> StageRequiredToPublish
        {
            get { return (QueryBuilderParameter<ReviewWorkflowsWorkflowStageFiltersInput>)_stageRequiredToPublish.Value; }
            set { _stageRequiredToPublish = new InputPropertyInfo { Name = "stageRequiredToPublish", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<JsonFilterInput>))]
        #endif
        public QueryBuilderParameter<JsonFilterInput> ContentTypes
        {
            get { return (QueryBuilderParameter<JsonFilterInput>)_contentTypes.Value; }
            set { _contentTypes = new InputPropertyInfo { Name = "contentTypes", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> CreatedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_createdAt.Value; }
            set { _createdAt = new InputPropertyInfo { Name = "createdAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> UpdatedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_updatedAt.Value; }
            set { _updatedAt = new InputPropertyInfo { Name = "updatedAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> PublishedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_publishedAt.Value; }
            set { _publishedAt = new InputPropertyInfo { Name = "publishedAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ReviewWorkflowsWorkflowFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<ReviewWorkflowsWorkflowFiltersInput>> And
        {
            get { return (QueryBuilderParameter<ICollection<ReviewWorkflowsWorkflowFiltersInput>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ReviewWorkflowsWorkflowFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<ReviewWorkflowsWorkflowFiltersInput>> Or
        {
            get { return (QueryBuilderParameter<ICollection<ReviewWorkflowsWorkflowFiltersInput>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ReviewWorkflowsWorkflowFiltersInput>))]
        #endif
        public QueryBuilderParameter<ReviewWorkflowsWorkflowFiltersInput> Not
        {
            get { return (QueryBuilderParameter<ReviewWorkflowsWorkflowFiltersInput>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_documentId.Name != null) yield return _documentId;
            if (_name.Name != null) yield return _name;
            if (_stages.Name != null) yield return _stages;
            if (_stageRequiredToPublish.Name != null) yield return _stageRequiredToPublish;
            if (_contentTypes.Name != null) yield return _contentTypes;
            if (_createdAt.Name != null) yield return _createdAt;
            if (_updatedAt.Name != null) yield return _updatedAt;
            if (_publishedAt.Name != null) yield return _publishedAt;
            if (_and.Name != null) yield return _and;
            if (_or.Name != null) yield return _or;
            if (_not.Name != null) yield return _not;
        }
    }

    public partial class ReviewWorkflowsWorkflowInput : IGraphQlInputObject
    {
        private InputPropertyInfo _name;
        private InputPropertyInfo _stages;
        private InputPropertyInfo _stageRequiredToPublish;
        private InputPropertyInfo _contentTypes;
        private InputPropertyInfo _publishedAt;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Name
        {
            get { return (QueryBuilderParameter<string>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> Stages
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_stages.Value; }
            set { _stages = new InputPropertyInfo { Name = "stages", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> StageRequiredToPublish
        {
            get { return (QueryBuilderParameter<string>)_stageRequiredToPublish.Value; }
            set { _stageRequiredToPublish = new InputPropertyInfo { Name = "stageRequiredToPublish", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
        #endif
        public QueryBuilderParameter<object> ContentTypes
        {
            get { return (QueryBuilderParameter<object>)_contentTypes.Value; }
            set { _contentTypes = new InputPropertyInfo { Name = "contentTypes", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTime?>))]
        #endif
        public QueryBuilderParameter<DateTime?> PublishedAt
        {
            get { return (QueryBuilderParameter<DateTime?>)_publishedAt.Value; }
            set { _publishedAt = new InputPropertyInfo { Name = "publishedAt", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_name.Name != null) yield return _name;
            if (_stages.Name != null) yield return _stages;
            if (_stageRequiredToPublish.Name != null) yield return _stageRequiredToPublish;
            if (_contentTypes.Name != null) yield return _contentTypes;
            if (_publishedAt.Name != null) yield return _publishedAt;
        }
    }

    public partial class ReviewWorkflowsWorkflowStageFiltersInput : IGraphQlInputObject
    {
        private InputPropertyInfo _documentId;
        private InputPropertyInfo _name;
        private InputPropertyInfo _color;
        private InputPropertyInfo _workflow;
        private InputPropertyInfo _createdAt;
        private InputPropertyInfo _updatedAt;
        private InputPropertyInfo _publishedAt;
        private InputPropertyInfo _and;
        private InputPropertyInfo _or;
        private InputPropertyInfo _not;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterInput>))]
        #endif
        public QueryBuilderParameter<IdFilterInput> DocumentId
        {
            get { return (QueryBuilderParameter<IdFilterInput>)_documentId.Value; }
            set { _documentId = new InputPropertyInfo { Name = "documentId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Name
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Color
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_color.Value; }
            set { _color = new InputPropertyInfo { Name = "color", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ReviewWorkflowsWorkflowFiltersInput>))]
        #endif
        public QueryBuilderParameter<ReviewWorkflowsWorkflowFiltersInput> Workflow
        {
            get { return (QueryBuilderParameter<ReviewWorkflowsWorkflowFiltersInput>)_workflow.Value; }
            set { _workflow = new InputPropertyInfo { Name = "workflow", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> CreatedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_createdAt.Value; }
            set { _createdAt = new InputPropertyInfo { Name = "createdAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> UpdatedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_updatedAt.Value; }
            set { _updatedAt = new InputPropertyInfo { Name = "updatedAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> PublishedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_publishedAt.Value; }
            set { _publishedAt = new InputPropertyInfo { Name = "publishedAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ReviewWorkflowsWorkflowStageFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<ReviewWorkflowsWorkflowStageFiltersInput>> And
        {
            get { return (QueryBuilderParameter<ICollection<ReviewWorkflowsWorkflowStageFiltersInput>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ReviewWorkflowsWorkflowStageFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<ReviewWorkflowsWorkflowStageFiltersInput>> Or
        {
            get { return (QueryBuilderParameter<ICollection<ReviewWorkflowsWorkflowStageFiltersInput>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ReviewWorkflowsWorkflowStageFiltersInput>))]
        #endif
        public QueryBuilderParameter<ReviewWorkflowsWorkflowStageFiltersInput> Not
        {
            get { return (QueryBuilderParameter<ReviewWorkflowsWorkflowStageFiltersInput>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_documentId.Name != null) yield return _documentId;
            if (_name.Name != null) yield return _name;
            if (_color.Name != null) yield return _color;
            if (_workflow.Name != null) yield return _workflow;
            if (_createdAt.Name != null) yield return _createdAt;
            if (_updatedAt.Name != null) yield return _updatedAt;
            if (_publishedAt.Name != null) yield return _publishedAt;
            if (_and.Name != null) yield return _and;
            if (_or.Name != null) yield return _or;
            if (_not.Name != null) yield return _not;
        }
    }

    public partial class ReviewWorkflowsWorkflowStageInput : IGraphQlInputObject
    {
        private InputPropertyInfo _name;
        private InputPropertyInfo _color;
        private InputPropertyInfo _workflow;
        private InputPropertyInfo _publishedAt;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Name
        {
            get { return (QueryBuilderParameter<string>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Color
        {
            get { return (QueryBuilderParameter<string>)_color.Value; }
            set { _color = new InputPropertyInfo { Name = "color", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Workflow
        {
            get { return (QueryBuilderParameter<string>)_workflow.Value; }
            set { _workflow = new InputPropertyInfo { Name = "workflow", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTime?>))]
        #endif
        public QueryBuilderParameter<DateTime?> PublishedAt
        {
            get { return (QueryBuilderParameter<DateTime?>)_publishedAt.Value; }
            set { _publishedAt = new InputPropertyInfo { Name = "publishedAt", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_name.Name != null) yield return _name;
            if (_color.Name != null) yield return _color;
            if (_workflow.Name != null) yield return _workflow;
            if (_publishedAt.Name != null) yield return _publishedAt;
        }
    }

    public partial class UsersPermissionsPermissionFiltersInput : IGraphQlInputObject
    {
        private InputPropertyInfo _documentId;
        private InputPropertyInfo _action;
        private InputPropertyInfo _role;
        private InputPropertyInfo _createdAt;
        private InputPropertyInfo _updatedAt;
        private InputPropertyInfo _publishedAt;
        private InputPropertyInfo _and;
        private InputPropertyInfo _or;
        private InputPropertyInfo _not;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterInput>))]
        #endif
        public QueryBuilderParameter<IdFilterInput> DocumentId
        {
            get { return (QueryBuilderParameter<IdFilterInput>)_documentId.Value; }
            set { _documentId = new InputPropertyInfo { Name = "documentId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Action
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_action.Value; }
            set { _action = new InputPropertyInfo { Name = "action", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<UsersPermissionsRoleFiltersInput>))]
        #endif
        public QueryBuilderParameter<UsersPermissionsRoleFiltersInput> Role
        {
            get { return (QueryBuilderParameter<UsersPermissionsRoleFiltersInput>)_role.Value; }
            set { _role = new InputPropertyInfo { Name = "role", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> CreatedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_createdAt.Value; }
            set { _createdAt = new InputPropertyInfo { Name = "createdAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> UpdatedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_updatedAt.Value; }
            set { _updatedAt = new InputPropertyInfo { Name = "updatedAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> PublishedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_publishedAt.Value; }
            set { _publishedAt = new InputPropertyInfo { Name = "publishedAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<UsersPermissionsPermissionFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<UsersPermissionsPermissionFiltersInput>> And
        {
            get { return (QueryBuilderParameter<ICollection<UsersPermissionsPermissionFiltersInput>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<UsersPermissionsPermissionFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<UsersPermissionsPermissionFiltersInput>> Or
        {
            get { return (QueryBuilderParameter<ICollection<UsersPermissionsPermissionFiltersInput>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<UsersPermissionsPermissionFiltersInput>))]
        #endif
        public QueryBuilderParameter<UsersPermissionsPermissionFiltersInput> Not
        {
            get { return (QueryBuilderParameter<UsersPermissionsPermissionFiltersInput>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_documentId.Name != null) yield return _documentId;
            if (_action.Name != null) yield return _action;
            if (_role.Name != null) yield return _role;
            if (_createdAt.Name != null) yield return _createdAt;
            if (_updatedAt.Name != null) yield return _updatedAt;
            if (_publishedAt.Name != null) yield return _publishedAt;
            if (_and.Name != null) yield return _and;
            if (_or.Name != null) yield return _or;
            if (_not.Name != null) yield return _not;
        }
    }

    public partial class UsersPermissionsRoleFiltersInput : IGraphQlInputObject
    {
        private InputPropertyInfo _documentId;
        private InputPropertyInfo _name;
        private InputPropertyInfo _description;
        private InputPropertyInfo _type;
        private InputPropertyInfo _permissions;
        private InputPropertyInfo _users;
        private InputPropertyInfo _createdAt;
        private InputPropertyInfo _updatedAt;
        private InputPropertyInfo _publishedAt;
        private InputPropertyInfo _and;
        private InputPropertyInfo _or;
        private InputPropertyInfo _not;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterInput>))]
        #endif
        public QueryBuilderParameter<IdFilterInput> DocumentId
        {
            get { return (QueryBuilderParameter<IdFilterInput>)_documentId.Value; }
            set { _documentId = new InputPropertyInfo { Name = "documentId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Name
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Description
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_description.Value; }
            set { _description = new InputPropertyInfo { Name = "description", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Type
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_type.Value; }
            set { _type = new InputPropertyInfo { Name = "type", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<UsersPermissionsPermissionFiltersInput>))]
        #endif
        public QueryBuilderParameter<UsersPermissionsPermissionFiltersInput> Permissions
        {
            get { return (QueryBuilderParameter<UsersPermissionsPermissionFiltersInput>)_permissions.Value; }
            set { _permissions = new InputPropertyInfo { Name = "permissions", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<UsersPermissionsUserFiltersInput>))]
        #endif
        public QueryBuilderParameter<UsersPermissionsUserFiltersInput> Users
        {
            get { return (QueryBuilderParameter<UsersPermissionsUserFiltersInput>)_users.Value; }
            set { _users = new InputPropertyInfo { Name = "users", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> CreatedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_createdAt.Value; }
            set { _createdAt = new InputPropertyInfo { Name = "createdAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> UpdatedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_updatedAt.Value; }
            set { _updatedAt = new InputPropertyInfo { Name = "updatedAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> PublishedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_publishedAt.Value; }
            set { _publishedAt = new InputPropertyInfo { Name = "publishedAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<UsersPermissionsRoleFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<UsersPermissionsRoleFiltersInput>> And
        {
            get { return (QueryBuilderParameter<ICollection<UsersPermissionsRoleFiltersInput>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<UsersPermissionsRoleFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<UsersPermissionsRoleFiltersInput>> Or
        {
            get { return (QueryBuilderParameter<ICollection<UsersPermissionsRoleFiltersInput>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<UsersPermissionsRoleFiltersInput>))]
        #endif
        public QueryBuilderParameter<UsersPermissionsRoleFiltersInput> Not
        {
            get { return (QueryBuilderParameter<UsersPermissionsRoleFiltersInput>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_documentId.Name != null) yield return _documentId;
            if (_name.Name != null) yield return _name;
            if (_description.Name != null) yield return _description;
            if (_type.Name != null) yield return _type;
            if (_permissions.Name != null) yield return _permissions;
            if (_users.Name != null) yield return _users;
            if (_createdAt.Name != null) yield return _createdAt;
            if (_updatedAt.Name != null) yield return _updatedAt;
            if (_publishedAt.Name != null) yield return _publishedAt;
            if (_and.Name != null) yield return _and;
            if (_or.Name != null) yield return _or;
            if (_not.Name != null) yield return _not;
        }
    }

    public partial class UsersPermissionsRoleInput : IGraphQlInputObject
    {
        private InputPropertyInfo _name;
        private InputPropertyInfo _description;
        private InputPropertyInfo _type;
        private InputPropertyInfo _permissions;
        private InputPropertyInfo _users;
        private InputPropertyInfo _publishedAt;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Name
        {
            get { return (QueryBuilderParameter<string>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Description
        {
            get { return (QueryBuilderParameter<string>)_description.Value; }
            set { _description = new InputPropertyInfo { Name = "description", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Type
        {
            get { return (QueryBuilderParameter<string>)_type.Value; }
            set { _type = new InputPropertyInfo { Name = "type", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> Permissions
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_permissions.Value; }
            set { _permissions = new InputPropertyInfo { Name = "permissions", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> Users
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_users.Value; }
            set { _users = new InputPropertyInfo { Name = "users", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTime?>))]
        #endif
        public QueryBuilderParameter<DateTime?> PublishedAt
        {
            get { return (QueryBuilderParameter<DateTime?>)_publishedAt.Value; }
            set { _publishedAt = new InputPropertyInfo { Name = "publishedAt", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_name.Name != null) yield return _name;
            if (_description.Name != null) yield return _description;
            if (_type.Name != null) yield return _type;
            if (_permissions.Name != null) yield return _permissions;
            if (_users.Name != null) yield return _users;
            if (_publishedAt.Name != null) yield return _publishedAt;
        }
    }

    public partial class UsersPermissionsUserFiltersInput : IGraphQlInputObject
    {
        private InputPropertyInfo _documentId;
        private InputPropertyInfo _username;
        private InputPropertyInfo _email;
        private InputPropertyInfo _provider;
        private InputPropertyInfo _confirmed;
        private InputPropertyInfo _blocked;
        private InputPropertyInfo _role;
        private InputPropertyInfo _createdAt;
        private InputPropertyInfo _updatedAt;
        private InputPropertyInfo _publishedAt;
        private InputPropertyInfo _and;
        private InputPropertyInfo _or;
        private InputPropertyInfo _not;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterInput>))]
        #endif
        public QueryBuilderParameter<IdFilterInput> DocumentId
        {
            get { return (QueryBuilderParameter<IdFilterInput>)_documentId.Value; }
            set { _documentId = new InputPropertyInfo { Name = "documentId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Username
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_username.Value; }
            set { _username = new InputPropertyInfo { Name = "username", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Email
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_email.Value; }
            set { _email = new InputPropertyInfo { Name = "email", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Provider
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_provider.Value; }
            set { _provider = new InputPropertyInfo { Name = "provider", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<BooleanFilterInput>))]
        #endif
        public QueryBuilderParameter<BooleanFilterInput> Confirmed
        {
            get { return (QueryBuilderParameter<BooleanFilterInput>)_confirmed.Value; }
            set { _confirmed = new InputPropertyInfo { Name = "confirmed", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<BooleanFilterInput>))]
        #endif
        public QueryBuilderParameter<BooleanFilterInput> Blocked
        {
            get { return (QueryBuilderParameter<BooleanFilterInput>)_blocked.Value; }
            set { _blocked = new InputPropertyInfo { Name = "blocked", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<UsersPermissionsRoleFiltersInput>))]
        #endif
        public QueryBuilderParameter<UsersPermissionsRoleFiltersInput> Role
        {
            get { return (QueryBuilderParameter<UsersPermissionsRoleFiltersInput>)_role.Value; }
            set { _role = new InputPropertyInfo { Name = "role", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> CreatedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_createdAt.Value; }
            set { _createdAt = new InputPropertyInfo { Name = "createdAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> UpdatedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_updatedAt.Value; }
            set { _updatedAt = new InputPropertyInfo { Name = "updatedAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> PublishedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_publishedAt.Value; }
            set { _publishedAt = new InputPropertyInfo { Name = "publishedAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<UsersPermissionsUserFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<UsersPermissionsUserFiltersInput>> And
        {
            get { return (QueryBuilderParameter<ICollection<UsersPermissionsUserFiltersInput>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<UsersPermissionsUserFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<UsersPermissionsUserFiltersInput>> Or
        {
            get { return (QueryBuilderParameter<ICollection<UsersPermissionsUserFiltersInput>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<UsersPermissionsUserFiltersInput>))]
        #endif
        public QueryBuilderParameter<UsersPermissionsUserFiltersInput> Not
        {
            get { return (QueryBuilderParameter<UsersPermissionsUserFiltersInput>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_documentId.Name != null) yield return _documentId;
            if (_username.Name != null) yield return _username;
            if (_email.Name != null) yield return _email;
            if (_provider.Name != null) yield return _provider;
            if (_confirmed.Name != null) yield return _confirmed;
            if (_blocked.Name != null) yield return _blocked;
            if (_role.Name != null) yield return _role;
            if (_createdAt.Name != null) yield return _createdAt;
            if (_updatedAt.Name != null) yield return _updatedAt;
            if (_publishedAt.Name != null) yield return _publishedAt;
            if (_and.Name != null) yield return _and;
            if (_or.Name != null) yield return _or;
            if (_not.Name != null) yield return _not;
        }
    }

    public partial class UsersPermissionsUserInput : IGraphQlInputObject
    {
        private InputPropertyInfo _username;
        private InputPropertyInfo _email;
        private InputPropertyInfo _provider;
        private InputPropertyInfo _confirmed;
        private InputPropertyInfo _blocked;
        private InputPropertyInfo _role;
        private InputPropertyInfo _publishedAt;
        private InputPropertyInfo _password;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Username
        {
            get { return (QueryBuilderParameter<string>)_username.Value; }
            set { _username = new InputPropertyInfo { Name = "username", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Email
        {
            get { return (QueryBuilderParameter<string>)_email.Value; }
            set { _email = new InputPropertyInfo { Name = "email", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Provider
        {
            get { return (QueryBuilderParameter<string>)_provider.Value; }
            set { _provider = new InputPropertyInfo { Name = "provider", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> Confirmed
        {
            get { return (QueryBuilderParameter<bool?>)_confirmed.Value; }
            set { _confirmed = new InputPropertyInfo { Name = "confirmed", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> Blocked
        {
            get { return (QueryBuilderParameter<bool?>)_blocked.Value; }
            set { _blocked = new InputPropertyInfo { Name = "blocked", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Role
        {
            get { return (QueryBuilderParameter<string>)_role.Value; }
            set { _role = new InputPropertyInfo { Name = "role", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTime?>))]
        #endif
        public QueryBuilderParameter<DateTime?> PublishedAt
        {
            get { return (QueryBuilderParameter<DateTime?>)_publishedAt.Value; }
            set { _publishedAt = new InputPropertyInfo { Name = "publishedAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Password
        {
            get { return (QueryBuilderParameter<string>)_password.Value; }
            set { _password = new InputPropertyInfo { Name = "password", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_username.Name != null) yield return _username;
            if (_email.Name != null) yield return _email;
            if (_provider.Name != null) yield return _provider;
            if (_confirmed.Name != null) yield return _confirmed;
            if (_blocked.Name != null) yield return _blocked;
            if (_role.Name != null) yield return _role;
            if (_publishedAt.Name != null) yield return _publishedAt;
            if (_password.Name != null) yield return _password;
        }
    }

    public partial class AboutUsInput : IGraphQlInputObject
    {
        private InputPropertyInfo _title;
        private InputPropertyInfo _smallText;
        private InputPropertyInfo _botCtaText;
        private InputPropertyInfo _htmlColorText;
        private InputPropertyInfo _iconText;
        private InputPropertyInfo _mainCta;
        private InputPropertyInfo _sliders;
        private InputPropertyInfo _topBg;
        private InputPropertyInfo _publishedAt;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Title
        {
            get { return (QueryBuilderParameter<string>)_title.Value; }
            set { _title = new InputPropertyInfo { Name = "Title", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> SmallText
        {
            get { return (QueryBuilderParameter<string>)_smallText.Value; }
            set { _smallText = new InputPropertyInfo { Name = "smallText", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("BOT_CTA_Text")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> BotCtaText
        {
            get { return (QueryBuilderParameter<string>)_botCtaText.Value; }
            set { _botCtaText = new InputPropertyInfo { Name = "BOT_CTA_Text", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ComponentHtmlColorTextHtmlColorTextInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<ComponentHtmlColorTextHtmlColorTextInput>> HtmlColorText
        {
            get { return (QueryBuilderParameter<ICollection<ComponentHtmlColorTextHtmlColorTextInput>>)_htmlColorText.Value; }
            set { _htmlColorText = new InputPropertyInfo { Name = "htmlColorText", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ComponentIconTextIconTextInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<ComponentIconTextIconTextInput>> IconText
        {
            get { return (QueryBuilderParameter<ICollection<ComponentIconTextIconTextInput>>)_iconText.Value; }
            set { _iconText = new InputPropertyInfo { Name = "iconText", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ComponentMainCtaMainCtaInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<ComponentMainCtaMainCtaInput>> MainCta
        {
            get { return (QueryBuilderParameter<ICollection<ComponentMainCtaMainCtaInput>>)_mainCta.Value; }
            set { _mainCta = new InputPropertyInfo { Name = "MainCTA", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> Sliders
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_sliders.Value; }
            set { _sliders = new InputPropertyInfo { Name = "sliders", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TopBg
        {
            get { return (QueryBuilderParameter<string>)_topBg.Value; }
            set { _topBg = new InputPropertyInfo { Name = "TopBg", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTime?>))]
        #endif
        public QueryBuilderParameter<DateTime?> PublishedAt
        {
            get { return (QueryBuilderParameter<DateTime?>)_publishedAt.Value; }
            set { _publishedAt = new InputPropertyInfo { Name = "publishedAt", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_title.Name != null) yield return _title;
            if (_smallText.Name != null) yield return _smallText;
            if (_botCtaText.Name != null) yield return _botCtaText;
            if (_htmlColorText.Name != null) yield return _htmlColorText;
            if (_iconText.Name != null) yield return _iconText;
            if (_mainCta.Name != null) yield return _mainCta;
            if (_sliders.Name != null) yield return _sliders;
            if (_topBg.Name != null) yield return _topBg;
            if (_publishedAt.Name != null) yield return _publishedAt;
        }
    }

    public partial class AccountInput : IGraphQlInputObject
    {
        private InputPropertyInfo _title;
        private InputPropertyInfo _smallText;
        private InputPropertyInfo _publishedAt;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Title
        {
            get { return (QueryBuilderParameter<string>)_title.Value; }
            set { _title = new InputPropertyInfo { Name = "Title", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> SmallText
        {
            get { return (QueryBuilderParameter<string>)_smallText.Value; }
            set { _smallText = new InputPropertyInfo { Name = "smallText", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTime?>))]
        #endif
        public QueryBuilderParameter<DateTime?> PublishedAt
        {
            get { return (QueryBuilderParameter<DateTime?>)_publishedAt.Value; }
            set { _publishedAt = new InputPropertyInfo { Name = "publishedAt", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_title.Name != null) yield return _title;
            if (_smallText.Name != null) yield return _smallText;
            if (_publishedAt.Name != null) yield return _publishedAt;
        }
    }

    public partial class AuthAdministratorFiltersInput : IGraphQlInputObject
    {
        private InputPropertyInfo _documentId;
        private InputPropertyInfo _wallet;
        private InputPropertyInfo _createdAt;
        private InputPropertyInfo _updatedAt;
        private InputPropertyInfo _publishedAt;
        private InputPropertyInfo _and;
        private InputPropertyInfo _or;
        private InputPropertyInfo _not;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterInput>))]
        #endif
        public QueryBuilderParameter<IdFilterInput> DocumentId
        {
            get { return (QueryBuilderParameter<IdFilterInput>)_documentId.Value; }
            set { _documentId = new InputPropertyInfo { Name = "documentId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Wallet
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_wallet.Value; }
            set { _wallet = new InputPropertyInfo { Name = "Wallet", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> CreatedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_createdAt.Value; }
            set { _createdAt = new InputPropertyInfo { Name = "createdAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> UpdatedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_updatedAt.Value; }
            set { _updatedAt = new InputPropertyInfo { Name = "updatedAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> PublishedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_publishedAt.Value; }
            set { _publishedAt = new InputPropertyInfo { Name = "publishedAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<AuthAdministratorFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<AuthAdministratorFiltersInput>> And
        {
            get { return (QueryBuilderParameter<ICollection<AuthAdministratorFiltersInput>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<AuthAdministratorFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<AuthAdministratorFiltersInput>> Or
        {
            get { return (QueryBuilderParameter<ICollection<AuthAdministratorFiltersInput>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<AuthAdministratorFiltersInput>))]
        #endif
        public QueryBuilderParameter<AuthAdministratorFiltersInput> Not
        {
            get { return (QueryBuilderParameter<AuthAdministratorFiltersInput>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_documentId.Name != null) yield return _documentId;
            if (_wallet.Name != null) yield return _wallet;
            if (_createdAt.Name != null) yield return _createdAt;
            if (_updatedAt.Name != null) yield return _updatedAt;
            if (_publishedAt.Name != null) yield return _publishedAt;
            if (_and.Name != null) yield return _and;
            if (_or.Name != null) yield return _or;
            if (_not.Name != null) yield return _not;
        }
    }

    public partial class AuthAdministratorInput : IGraphQlInputObject
    {
        private InputPropertyInfo _wallet;
        private InputPropertyInfo _publishedAt;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Wallet
        {
            get { return (QueryBuilderParameter<string>)_wallet.Value; }
            set { _wallet = new InputPropertyInfo { Name = "Wallet", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTime?>))]
        #endif
        public QueryBuilderParameter<DateTime?> PublishedAt
        {
            get { return (QueryBuilderParameter<DateTime?>)_publishedAt.Value; }
            set { _publishedAt = new InputPropertyInfo { Name = "publishedAt", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_wallet.Name != null) yield return _wallet;
            if (_publishedAt.Name != null) yield return _publishedAt;
        }
    }

    public partial class AuthAdministratorsResourceInput : IGraphQlInputObject
    {
        private InputPropertyInfo _onlyAdminResources;
        private InputPropertyInfo _publishedAt;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> OnlyAdminResources
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_onlyAdminResources.Value; }
            set { _onlyAdminResources = new InputPropertyInfo { Name = "OnlyAdminResources", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTime?>))]
        #endif
        public QueryBuilderParameter<DateTime?> PublishedAt
        {
            get { return (QueryBuilderParameter<DateTime?>)_publishedAt.Value; }
            set { _publishedAt = new InputPropertyInfo { Name = "publishedAt", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_onlyAdminResources.Name != null) yield return _onlyAdminResources;
            if (_publishedAt.Name != null) yield return _publishedAt;
        }
    }

    public partial class AuthResourceFiltersInput : IGraphQlInputObject
    {
        private InputPropertyInfo _documentId;
        private InputPropertyInfo _name;
        private InputPropertyInfo _roleIDs;
        private InputPropertyInfo _createdAt;
        private InputPropertyInfo _updatedAt;
        private InputPropertyInfo _publishedAt;
        private InputPropertyInfo _and;
        private InputPropertyInfo _or;
        private InputPropertyInfo _not;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterInput>))]
        #endif
        public QueryBuilderParameter<IdFilterInput> DocumentId
        {
            get { return (QueryBuilderParameter<IdFilterInput>)_documentId.Value; }
            set { _documentId = new InputPropertyInfo { Name = "documentId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Name
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "Name", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<AuthRoleFiltersInput>))]
        #endif
        public QueryBuilderParameter<AuthRoleFiltersInput> RoleIDs
        {
            get { return (QueryBuilderParameter<AuthRoleFiltersInput>)_roleIDs.Value; }
            set { _roleIDs = new InputPropertyInfo { Name = "RoleIDs", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> CreatedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_createdAt.Value; }
            set { _createdAt = new InputPropertyInfo { Name = "createdAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> UpdatedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_updatedAt.Value; }
            set { _updatedAt = new InputPropertyInfo { Name = "updatedAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> PublishedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_publishedAt.Value; }
            set { _publishedAt = new InputPropertyInfo { Name = "publishedAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<AuthResourceFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<AuthResourceFiltersInput>> And
        {
            get { return (QueryBuilderParameter<ICollection<AuthResourceFiltersInput>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<AuthResourceFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<AuthResourceFiltersInput>> Or
        {
            get { return (QueryBuilderParameter<ICollection<AuthResourceFiltersInput>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<AuthResourceFiltersInput>))]
        #endif
        public QueryBuilderParameter<AuthResourceFiltersInput> Not
        {
            get { return (QueryBuilderParameter<AuthResourceFiltersInput>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_documentId.Name != null) yield return _documentId;
            if (_name.Name != null) yield return _name;
            if (_roleIDs.Name != null) yield return _roleIDs;
            if (_createdAt.Name != null) yield return _createdAt;
            if (_updatedAt.Name != null) yield return _updatedAt;
            if (_publishedAt.Name != null) yield return _publishedAt;
            if (_and.Name != null) yield return _and;
            if (_or.Name != null) yield return _or;
            if (_not.Name != null) yield return _not;
        }
    }

    public partial class AuthResourceInput : IGraphQlInputObject
    {
        private InputPropertyInfo _name;
        private InputPropertyInfo _roleIDs;
        private InputPropertyInfo _publishedAt;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Name
        {
            get { return (QueryBuilderParameter<string>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "Name", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> RoleIDs
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_roleIDs.Value; }
            set { _roleIDs = new InputPropertyInfo { Name = "RoleIDs", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTime?>))]
        #endif
        public QueryBuilderParameter<DateTime?> PublishedAt
        {
            get { return (QueryBuilderParameter<DateTime?>)_publishedAt.Value; }
            set { _publishedAt = new InputPropertyInfo { Name = "publishedAt", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_name.Name != null) yield return _name;
            if (_roleIDs.Name != null) yield return _roleIDs;
            if (_publishedAt.Name != null) yield return _publishedAt;
        }
    }

    public partial class AuthRoleFiltersInput : IGraphQlInputObject
    {
        private InputPropertyInfo _documentId;
        private InputPropertyInfo _name;
        private InputPropertyInfo _userIDs;
        private InputPropertyInfo _resourceIDs;
        private InputPropertyInfo _createdAt;
        private InputPropertyInfo _updatedAt;
        private InputPropertyInfo _publishedAt;
        private InputPropertyInfo _and;
        private InputPropertyInfo _or;
        private InputPropertyInfo _not;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterInput>))]
        #endif
        public QueryBuilderParameter<IdFilterInput> DocumentId
        {
            get { return (QueryBuilderParameter<IdFilterInput>)_documentId.Value; }
            set { _documentId = new InputPropertyInfo { Name = "documentId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Name
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "Name", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<AuthUserFiltersInput>))]
        #endif
        public QueryBuilderParameter<AuthUserFiltersInput> UserIDs
        {
            get { return (QueryBuilderParameter<AuthUserFiltersInput>)_userIDs.Value; }
            set { _userIDs = new InputPropertyInfo { Name = "UserIDs", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<AuthResourceFiltersInput>))]
        #endif
        public QueryBuilderParameter<AuthResourceFiltersInput> ResourceIDs
        {
            get { return (QueryBuilderParameter<AuthResourceFiltersInput>)_resourceIDs.Value; }
            set { _resourceIDs = new InputPropertyInfo { Name = "ResourceIDs", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> CreatedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_createdAt.Value; }
            set { _createdAt = new InputPropertyInfo { Name = "createdAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> UpdatedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_updatedAt.Value; }
            set { _updatedAt = new InputPropertyInfo { Name = "updatedAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> PublishedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_publishedAt.Value; }
            set { _publishedAt = new InputPropertyInfo { Name = "publishedAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<AuthRoleFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<AuthRoleFiltersInput>> And
        {
            get { return (QueryBuilderParameter<ICollection<AuthRoleFiltersInput>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<AuthRoleFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<AuthRoleFiltersInput>> Or
        {
            get { return (QueryBuilderParameter<ICollection<AuthRoleFiltersInput>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<AuthRoleFiltersInput>))]
        #endif
        public QueryBuilderParameter<AuthRoleFiltersInput> Not
        {
            get { return (QueryBuilderParameter<AuthRoleFiltersInput>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_documentId.Name != null) yield return _documentId;
            if (_name.Name != null) yield return _name;
            if (_userIDs.Name != null) yield return _userIDs;
            if (_resourceIDs.Name != null) yield return _resourceIDs;
            if (_createdAt.Name != null) yield return _createdAt;
            if (_updatedAt.Name != null) yield return _updatedAt;
            if (_publishedAt.Name != null) yield return _publishedAt;
            if (_and.Name != null) yield return _and;
            if (_or.Name != null) yield return _or;
            if (_not.Name != null) yield return _not;
        }
    }

    public partial class AuthRoleInput : IGraphQlInputObject
    {
        private InputPropertyInfo _name;
        private InputPropertyInfo _userIDs;
        private InputPropertyInfo _resourceIDs;
        private InputPropertyInfo _publishedAt;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Name
        {
            get { return (QueryBuilderParameter<string>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "Name", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> UserIDs
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_userIDs.Value; }
            set { _userIDs = new InputPropertyInfo { Name = "UserIDs", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> ResourceIDs
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_resourceIDs.Value; }
            set { _resourceIDs = new InputPropertyInfo { Name = "ResourceIDs", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTime?>))]
        #endif
        public QueryBuilderParameter<DateTime?> PublishedAt
        {
            get { return (QueryBuilderParameter<DateTime?>)_publishedAt.Value; }
            set { _publishedAt = new InputPropertyInfo { Name = "publishedAt", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_name.Name != null) yield return _name;
            if (_userIDs.Name != null) yield return _userIDs;
            if (_resourceIDs.Name != null) yield return _resourceIDs;
            if (_publishedAt.Name != null) yield return _publishedAt;
        }
    }

    public partial class AuthUserFiltersInput : IGraphQlInputObject
    {
        private InputPropertyInfo _documentId;
        private InputPropertyInfo _wallet;
        private InputPropertyInfo _roleIDs;
        private InputPropertyInfo _createdAt;
        private InputPropertyInfo _updatedAt;
        private InputPropertyInfo _publishedAt;
        private InputPropertyInfo _and;
        private InputPropertyInfo _or;
        private InputPropertyInfo _not;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterInput>))]
        #endif
        public QueryBuilderParameter<IdFilterInput> DocumentId
        {
            get { return (QueryBuilderParameter<IdFilterInput>)_documentId.Value; }
            set { _documentId = new InputPropertyInfo { Name = "documentId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Wallet
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_wallet.Value; }
            set { _wallet = new InputPropertyInfo { Name = "Wallet", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<AuthRoleFiltersInput>))]
        #endif
        public QueryBuilderParameter<AuthRoleFiltersInput> RoleIDs
        {
            get { return (QueryBuilderParameter<AuthRoleFiltersInput>)_roleIDs.Value; }
            set { _roleIDs = new InputPropertyInfo { Name = "RoleIDs", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> CreatedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_createdAt.Value; }
            set { _createdAt = new InputPropertyInfo { Name = "createdAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> UpdatedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_updatedAt.Value; }
            set { _updatedAt = new InputPropertyInfo { Name = "updatedAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> PublishedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_publishedAt.Value; }
            set { _publishedAt = new InputPropertyInfo { Name = "publishedAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<AuthUserFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<AuthUserFiltersInput>> And
        {
            get { return (QueryBuilderParameter<ICollection<AuthUserFiltersInput>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<AuthUserFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<AuthUserFiltersInput>> Or
        {
            get { return (QueryBuilderParameter<ICollection<AuthUserFiltersInput>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<AuthUserFiltersInput>))]
        #endif
        public QueryBuilderParameter<AuthUserFiltersInput> Not
        {
            get { return (QueryBuilderParameter<AuthUserFiltersInput>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_documentId.Name != null) yield return _documentId;
            if (_wallet.Name != null) yield return _wallet;
            if (_roleIDs.Name != null) yield return _roleIDs;
            if (_createdAt.Name != null) yield return _createdAt;
            if (_updatedAt.Name != null) yield return _updatedAt;
            if (_publishedAt.Name != null) yield return _publishedAt;
            if (_and.Name != null) yield return _and;
            if (_or.Name != null) yield return _or;
            if (_not.Name != null) yield return _not;
        }
    }

    public partial class AuthUserInput : IGraphQlInputObject
    {
        private InputPropertyInfo _wallet;
        private InputPropertyInfo _roleIDs;
        private InputPropertyInfo _publishedAt;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Wallet
        {
            get { return (QueryBuilderParameter<string>)_wallet.Value; }
            set { _wallet = new InputPropertyInfo { Name = "Wallet", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> RoleIDs
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_roleIDs.Value; }
            set { _roleIDs = new InputPropertyInfo { Name = "RoleIDs", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTime?>))]
        #endif
        public QueryBuilderParameter<DateTime?> PublishedAt
        {
            get { return (QueryBuilderParameter<DateTime?>)_publishedAt.Value; }
            set { _publishedAt = new InputPropertyInfo { Name = "publishedAt", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_wallet.Name != null) yield return _wallet;
            if (_roleIDs.Name != null) yield return _roleIDs;
            if (_publishedAt.Name != null) yield return _publishedAt;
        }
    }

    public partial class AutoSignUpFiltersInput : IGraphQlInputObject
    {
        private InputPropertyInfo _documentId;
        private InputPropertyInfo _wallet;
        private InputPropertyInfo _note;
        private InputPropertyInfo _amount;
        private InputPropertyInfo _createdAt;
        private InputPropertyInfo _updatedAt;
        private InputPropertyInfo _publishedAt;
        private InputPropertyInfo _and;
        private InputPropertyInfo _or;
        private InputPropertyInfo _not;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterInput>))]
        #endif
        public QueryBuilderParameter<IdFilterInput> DocumentId
        {
            get { return (QueryBuilderParameter<IdFilterInput>)_documentId.Value; }
            set { _documentId = new InputPropertyInfo { Name = "documentId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Wallet
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_wallet.Value; }
            set { _wallet = new InputPropertyInfo { Name = "Wallet", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Note
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_note.Value; }
            set { _note = new InputPropertyInfo { Name = "Note", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<FloatFilterInput>))]
        #endif
        public QueryBuilderParameter<FloatFilterInput> Amount
        {
            get { return (QueryBuilderParameter<FloatFilterInput>)_amount.Value; }
            set { _amount = new InputPropertyInfo { Name = "Amount", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> CreatedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_createdAt.Value; }
            set { _createdAt = new InputPropertyInfo { Name = "createdAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> UpdatedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_updatedAt.Value; }
            set { _updatedAt = new InputPropertyInfo { Name = "updatedAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> PublishedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_publishedAt.Value; }
            set { _publishedAt = new InputPropertyInfo { Name = "publishedAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<AutoSignUpFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<AutoSignUpFiltersInput>> And
        {
            get { return (QueryBuilderParameter<ICollection<AutoSignUpFiltersInput>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<AutoSignUpFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<AutoSignUpFiltersInput>> Or
        {
            get { return (QueryBuilderParameter<ICollection<AutoSignUpFiltersInput>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<AutoSignUpFiltersInput>))]
        #endif
        public QueryBuilderParameter<AutoSignUpFiltersInput> Not
        {
            get { return (QueryBuilderParameter<AutoSignUpFiltersInput>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_documentId.Name != null) yield return _documentId;
            if (_wallet.Name != null) yield return _wallet;
            if (_note.Name != null) yield return _note;
            if (_amount.Name != null) yield return _amount;
            if (_createdAt.Name != null) yield return _createdAt;
            if (_updatedAt.Name != null) yield return _updatedAt;
            if (_publishedAt.Name != null) yield return _publishedAt;
            if (_and.Name != null) yield return _and;
            if (_or.Name != null) yield return _or;
            if (_not.Name != null) yield return _not;
        }
    }

    public partial class AutoSignUpInput : IGraphQlInputObject
    {
        private InputPropertyInfo _wallet;
        private InputPropertyInfo _note;
        private InputPropertyInfo _amount;
        private InputPropertyInfo _publishedAt;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Wallet
        {
            get { return (QueryBuilderParameter<string>)_wallet.Value; }
            set { _wallet = new InputPropertyInfo { Name = "Wallet", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Note
        {
            get { return (QueryBuilderParameter<string>)_note.Value; }
            set { _note = new InputPropertyInfo { Name = "Note", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<decimal?>))]
        #endif
        public QueryBuilderParameter<decimal?> Amount
        {
            get { return (QueryBuilderParameter<decimal?>)_amount.Value; }
            set { _amount = new InputPropertyInfo { Name = "Amount", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTime?>))]
        #endif
        public QueryBuilderParameter<DateTime?> PublishedAt
        {
            get { return (QueryBuilderParameter<DateTime?>)_publishedAt.Value; }
            set { _publishedAt = new InputPropertyInfo { Name = "publishedAt", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_wallet.Name != null) yield return _wallet;
            if (_note.Name != null) yield return _note;
            if (_amount.Name != null) yield return _amount;
            if (_publishedAt.Name != null) yield return _publishedAt;
        }
    }

    public partial class BoostInput : IGraphQlInputObject
    {
        private InputPropertyInfo _title;
        private InputPropertyInfo _smallText;
        private InputPropertyInfo _botCtaText;
        private InputPropertyInfo _topBgUrl;
        private InputPropertyInfo _iconText;
        private InputPropertyInfo _mainCta;
        private InputPropertyInfo _sliders;
        private InputPropertyInfo _topBg;
        private InputPropertyInfo _publishedAt;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Title
        {
            get { return (QueryBuilderParameter<string>)_title.Value; }
            set { _title = new InputPropertyInfo { Name = "Title", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> SmallText
        {
            get { return (QueryBuilderParameter<string>)_smallText.Value; }
            set { _smallText = new InputPropertyInfo { Name = "smallText", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("BOT_CTA_Text")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> BotCtaText
        {
            get { return (QueryBuilderParameter<string>)_botCtaText.Value; }
            set { _botCtaText = new InputPropertyInfo { Name = "BOT_CTA_Text", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TopBgUrl
        {
            get { return (QueryBuilderParameter<string>)_topBgUrl.Value; }
            set { _topBgUrl = new InputPropertyInfo { Name = "TopBgUrl", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ComponentIconTextIconTextInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<ComponentIconTextIconTextInput>> IconText
        {
            get { return (QueryBuilderParameter<ICollection<ComponentIconTextIconTextInput>>)_iconText.Value; }
            set { _iconText = new InputPropertyInfo { Name = "iconText", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ComponentMainCtaMainCtaInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<ComponentMainCtaMainCtaInput>> MainCta
        {
            get { return (QueryBuilderParameter<ICollection<ComponentMainCtaMainCtaInput>>)_mainCta.Value; }
            set { _mainCta = new InputPropertyInfo { Name = "MainCTA", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> Sliders
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_sliders.Value; }
            set { _sliders = new InputPropertyInfo { Name = "sliders", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> TopBg
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_topBg.Value; }
            set { _topBg = new InputPropertyInfo { Name = "TopBg", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTime?>))]
        #endif
        public QueryBuilderParameter<DateTime?> PublishedAt
        {
            get { return (QueryBuilderParameter<DateTime?>)_publishedAt.Value; }
            set { _publishedAt = new InputPropertyInfo { Name = "publishedAt", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_title.Name != null) yield return _title;
            if (_smallText.Name != null) yield return _smallText;
            if (_botCtaText.Name != null) yield return _botCtaText;
            if (_topBgUrl.Name != null) yield return _topBgUrl;
            if (_iconText.Name != null) yield return _iconText;
            if (_mainCta.Name != null) yield return _mainCta;
            if (_sliders.Name != null) yield return _sliders;
            if (_topBg.Name != null) yield return _topBg;
            if (_publishedAt.Name != null) yield return _publishedAt;
        }
    }

    public partial class BuyPoolzFiltersInput : IGraphQlInputObject
    {
        private InputPropertyInfo _documentId;
        private InputPropertyInfo _name;
        private InputPropertyInfo _url;
        private InputPropertyInfo _isDex;
        private InputPropertyInfo _order;
        private InputPropertyInfo _createdAt;
        private InputPropertyInfo _updatedAt;
        private InputPropertyInfo _publishedAt;
        private InputPropertyInfo _and;
        private InputPropertyInfo _or;
        private InputPropertyInfo _not;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterInput>))]
        #endif
        public QueryBuilderParameter<IdFilterInput> DocumentId
        {
            get { return (QueryBuilderParameter<IdFilterInput>)_documentId.Value; }
            set { _documentId = new InputPropertyInfo { Name = "documentId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Name
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "Name", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Url
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_url.Value; }
            set { _url = new InputPropertyInfo { Name = "URL", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<BooleanFilterInput>))]
        #endif
        public QueryBuilderParameter<BooleanFilterInput> IsDex
        {
            get { return (QueryBuilderParameter<BooleanFilterInput>)_isDex.Value; }
            set { _isDex = new InputPropertyInfo { Name = "IsDex", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IntFilterInput>))]
        #endif
        public QueryBuilderParameter<IntFilterInput> Order
        {
            get { return (QueryBuilderParameter<IntFilterInput>)_order.Value; }
            set { _order = new InputPropertyInfo { Name = "Order", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> CreatedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_createdAt.Value; }
            set { _createdAt = new InputPropertyInfo { Name = "createdAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> UpdatedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_updatedAt.Value; }
            set { _updatedAt = new InputPropertyInfo { Name = "updatedAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> PublishedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_publishedAt.Value; }
            set { _publishedAt = new InputPropertyInfo { Name = "publishedAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<BuyPoolzFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<BuyPoolzFiltersInput>> And
        {
            get { return (QueryBuilderParameter<ICollection<BuyPoolzFiltersInput>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<BuyPoolzFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<BuyPoolzFiltersInput>> Or
        {
            get { return (QueryBuilderParameter<ICollection<BuyPoolzFiltersInput>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<BuyPoolzFiltersInput>))]
        #endif
        public QueryBuilderParameter<BuyPoolzFiltersInput> Not
        {
            get { return (QueryBuilderParameter<BuyPoolzFiltersInput>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_documentId.Name != null) yield return _documentId;
            if (_name.Name != null) yield return _name;
            if (_url.Name != null) yield return _url;
            if (_isDex.Name != null) yield return _isDex;
            if (_order.Name != null) yield return _order;
            if (_createdAt.Name != null) yield return _createdAt;
            if (_updatedAt.Name != null) yield return _updatedAt;
            if (_publishedAt.Name != null) yield return _publishedAt;
            if (_and.Name != null) yield return _and;
            if (_or.Name != null) yield return _or;
            if (_not.Name != null) yield return _not;
        }
    }

    public partial class BuyPoolzInput : IGraphQlInputObject
    {
        private InputPropertyInfo _name;
        private InputPropertyInfo _url;
        private InputPropertyInfo _icon;
        private InputPropertyInfo _isDex;
        private InputPropertyInfo _order;
        private InputPropertyInfo _publishedAt;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Name
        {
            get { return (QueryBuilderParameter<string>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "Name", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Url
        {
            get { return (QueryBuilderParameter<string>)_url.Value; }
            set { _url = new InputPropertyInfo { Name = "URL", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Icon
        {
            get { return (QueryBuilderParameter<string>)_icon.Value; }
            set { _icon = new InputPropertyInfo { Name = "Icon", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsDex
        {
            get { return (QueryBuilderParameter<bool?>)_isDex.Value; }
            set { _isDex = new InputPropertyInfo { Name = "IsDex", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Order
        {
            get { return (QueryBuilderParameter<int?>)_order.Value; }
            set { _order = new InputPropertyInfo { Name = "Order", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTime?>))]
        #endif
        public QueryBuilderParameter<DateTime?> PublishedAt
        {
            get { return (QueryBuilderParameter<DateTime?>)_publishedAt.Value; }
            set { _publishedAt = new InputPropertyInfo { Name = "publishedAt", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_name.Name != null) yield return _name;
            if (_url.Name != null) yield return _url;
            if (_icon.Name != null) yield return _icon;
            if (_isDex.Name != null) yield return _isDex;
            if (_order.Name != null) yield return _order;
            if (_publishedAt.Name != null) yield return _publishedAt;
        }
    }

    public partial class BuyWithFiltersInput : IGraphQlInputObject
    {
        private InputPropertyInfo _documentId;
        private InputPropertyInfo _name;
        private InputPropertyInfo _chainAddresses;
        private InputPropertyInfo _sourcePoolId;
        private InputPropertyInfo _createdAt;
        private InputPropertyInfo _updatedAt;
        private InputPropertyInfo _publishedAt;
        private InputPropertyInfo _and;
        private InputPropertyInfo _or;
        private InputPropertyInfo _not;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterInput>))]
        #endif
        public QueryBuilderParameter<IdFilterInput> DocumentId
        {
            get { return (QueryBuilderParameter<IdFilterInput>)_documentId.Value; }
            set { _documentId = new InputPropertyInfo { Name = "documentId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Name
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "Name", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ComponentChainAddressesChainAddressesFiltersInput>))]
        #endif
        public QueryBuilderParameter<ComponentChainAddressesChainAddressesFiltersInput> ChainAddresses
        {
            get { return (QueryBuilderParameter<ComponentChainAddressesChainAddressesFiltersInput>)_chainAddresses.Value; }
            set { _chainAddresses = new InputPropertyInfo { Name = "ChainAddresses", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<LongFilterInput>))]
        #endif
        public QueryBuilderParameter<LongFilterInput> SourcePoolId
        {
            get { return (QueryBuilderParameter<LongFilterInput>)_sourcePoolId.Value; }
            set { _sourcePoolId = new InputPropertyInfo { Name = "SourcePoolId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> CreatedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_createdAt.Value; }
            set { _createdAt = new InputPropertyInfo { Name = "createdAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> UpdatedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_updatedAt.Value; }
            set { _updatedAt = new InputPropertyInfo { Name = "updatedAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> PublishedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_publishedAt.Value; }
            set { _publishedAt = new InputPropertyInfo { Name = "publishedAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<BuyWithFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<BuyWithFiltersInput>> And
        {
            get { return (QueryBuilderParameter<ICollection<BuyWithFiltersInput>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<BuyWithFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<BuyWithFiltersInput>> Or
        {
            get { return (QueryBuilderParameter<ICollection<BuyWithFiltersInput>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<BuyWithFiltersInput>))]
        #endif
        public QueryBuilderParameter<BuyWithFiltersInput> Not
        {
            get { return (QueryBuilderParameter<BuyWithFiltersInput>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_documentId.Name != null) yield return _documentId;
            if (_name.Name != null) yield return _name;
            if (_chainAddresses.Name != null) yield return _chainAddresses;
            if (_sourcePoolId.Name != null) yield return _sourcePoolId;
            if (_createdAt.Name != null) yield return _createdAt;
            if (_updatedAt.Name != null) yield return _updatedAt;
            if (_publishedAt.Name != null) yield return _publishedAt;
            if (_and.Name != null) yield return _and;
            if (_or.Name != null) yield return _or;
            if (_not.Name != null) yield return _not;
        }
    }

    public partial class BuyWithInput : IGraphQlInputObject
    {
        private InputPropertyInfo _name;
        private InputPropertyInfo _chainAddresses;
        private InputPropertyInfo _sourcePoolId;
        private InputPropertyInfo _publishedAt;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Name
        {
            get { return (QueryBuilderParameter<string>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "Name", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ComponentChainAddressesChainAddressesInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<ComponentChainAddressesChainAddressesInput>> ChainAddresses
        {
            get { return (QueryBuilderParameter<ICollection<ComponentChainAddressesChainAddressesInput>>)_chainAddresses.Value; }
            set { _chainAddresses = new InputPropertyInfo { Name = "ChainAddresses", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?> SourcePoolId
        {
            get { return (QueryBuilderParameter<long?>)_sourcePoolId.Value; }
            set { _sourcePoolId = new InputPropertyInfo { Name = "SourcePoolId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTime?>))]
        #endif
        public QueryBuilderParameter<DateTime?> PublishedAt
        {
            get { return (QueryBuilderParameter<DateTime?>)_publishedAt.Value; }
            set { _publishedAt = new InputPropertyInfo { Name = "publishedAt", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_name.Name != null) yield return _name;
            if (_chainAddresses.Name != null) yield return _chainAddresses;
            if (_sourcePoolId.Name != null) yield return _sourcePoolId;
            if (_publishedAt.Name != null) yield return _publishedAt;
        }
    }

    public partial class ChainFiltersInput : IGraphQlInputObject
    {
        private InputPropertyInfo _documentId;
        private InputPropertyInfo _name;
        private InputPropertyInfo _symbol;
        private InputPropertyInfo _isTest;
        private InputPropertyInfo _chainId;
        private InputPropertyInfo _chainSetting;
        private InputPropertyInfo _contractsOnChain;
        private InputPropertyInfo _createdAt;
        private InputPropertyInfo _updatedAt;
        private InputPropertyInfo _publishedAt;
        private InputPropertyInfo _and;
        private InputPropertyInfo _or;
        private InputPropertyInfo _not;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterInput>))]
        #endif
        public QueryBuilderParameter<IdFilterInput> DocumentId
        {
            get { return (QueryBuilderParameter<IdFilterInput>)_documentId.Value; }
            set { _documentId = new InputPropertyInfo { Name = "documentId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Name
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Symbol
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_symbol.Value; }
            set { _symbol = new InputPropertyInfo { Name = "symbol", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<BooleanFilterInput>))]
        #endif
        public QueryBuilderParameter<BooleanFilterInput> IsTest
        {
            get { return (QueryBuilderParameter<BooleanFilterInput>)_isTest.Value; }
            set { _isTest = new InputPropertyInfo { Name = "isTest", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<LongFilterInput>))]
        #endif
        public QueryBuilderParameter<LongFilterInput> ChainId
        {
            get { return (QueryBuilderParameter<LongFilterInput>)_chainId.Value; }
            set { _chainId = new InputPropertyInfo { Name = "chainId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("chain_setting")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ChainSettingFiltersInput>))]
        #endif
        public QueryBuilderParameter<ChainSettingFiltersInput> ChainSetting
        {
            get { return (QueryBuilderParameter<ChainSettingFiltersInput>)_chainSetting.Value; }
            set { _chainSetting = new InputPropertyInfo { Name = "chain_setting", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("contracts_on_chain")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ContractsOnChainFiltersInput>))]
        #endif
        public QueryBuilderParameter<ContractsOnChainFiltersInput> ContractsOnChain
        {
            get { return (QueryBuilderParameter<ContractsOnChainFiltersInput>)_contractsOnChain.Value; }
            set { _contractsOnChain = new InputPropertyInfo { Name = "contracts_on_chain", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> CreatedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_createdAt.Value; }
            set { _createdAt = new InputPropertyInfo { Name = "createdAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> UpdatedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_updatedAt.Value; }
            set { _updatedAt = new InputPropertyInfo { Name = "updatedAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> PublishedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_publishedAt.Value; }
            set { _publishedAt = new InputPropertyInfo { Name = "publishedAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ChainFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<ChainFiltersInput>> And
        {
            get { return (QueryBuilderParameter<ICollection<ChainFiltersInput>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ChainFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<ChainFiltersInput>> Or
        {
            get { return (QueryBuilderParameter<ICollection<ChainFiltersInput>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ChainFiltersInput>))]
        #endif
        public QueryBuilderParameter<ChainFiltersInput> Not
        {
            get { return (QueryBuilderParameter<ChainFiltersInput>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_documentId.Name != null) yield return _documentId;
            if (_name.Name != null) yield return _name;
            if (_symbol.Name != null) yield return _symbol;
            if (_isTest.Name != null) yield return _isTest;
            if (_chainId.Name != null) yield return _chainId;
            if (_chainSetting.Name != null) yield return _chainSetting;
            if (_contractsOnChain.Name != null) yield return _contractsOnChain;
            if (_createdAt.Name != null) yield return _createdAt;
            if (_updatedAt.Name != null) yield return _updatedAt;
            if (_publishedAt.Name != null) yield return _publishedAt;
            if (_and.Name != null) yield return _and;
            if (_or.Name != null) yield return _or;
            if (_not.Name != null) yield return _not;
        }
    }

    public partial class ChainInput : IGraphQlInputObject
    {
        private InputPropertyInfo _name;
        private InputPropertyInfo _symbol;
        private InputPropertyInfo _isTest;
        private InputPropertyInfo _chainId;
        private InputPropertyInfo _chainSetting;
        private InputPropertyInfo _contractsOnChain;
        private InputPropertyInfo _publishedAt;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Name
        {
            get { return (QueryBuilderParameter<string>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Symbol
        {
            get { return (QueryBuilderParameter<string>)_symbol.Value; }
            set { _symbol = new InputPropertyInfo { Name = "symbol", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsTest
        {
            get { return (QueryBuilderParameter<bool?>)_isTest.Value; }
            set { _isTest = new InputPropertyInfo { Name = "isTest", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<long?>))]
        #endif
        public QueryBuilderParameter<long?> ChainId
        {
            get { return (QueryBuilderParameter<long?>)_chainId.Value; }
            set { _chainId = new InputPropertyInfo { Name = "chainId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("chain_setting")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ChainSetting
        {
            get { return (QueryBuilderParameter<string>)_chainSetting.Value; }
            set { _chainSetting = new InputPropertyInfo { Name = "chain_setting", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("contracts_on_chain")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ContractsOnChain
        {
            get { return (QueryBuilderParameter<string>)_contractsOnChain.Value; }
            set { _contractsOnChain = new InputPropertyInfo { Name = "contracts_on_chain", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTime?>))]
        #endif
        public QueryBuilderParameter<DateTime?> PublishedAt
        {
            get { return (QueryBuilderParameter<DateTime?>)_publishedAt.Value; }
            set { _publishedAt = new InputPropertyInfo { Name = "publishedAt", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_name.Name != null) yield return _name;
            if (_symbol.Name != null) yield return _symbol;
            if (_isTest.Name != null) yield return _isTest;
            if (_chainId.Name != null) yield return _chainId;
            if (_chainSetting.Name != null) yield return _chainSetting;
            if (_contractsOnChain.Name != null) yield return _contractsOnChain;
            if (_publishedAt.Name != null) yield return _publishedAt;
        }
    }

    public partial class ChainSettingFiltersInput : IGraphQlInputObject
    {
        private InputPropertyInfo _documentId;
        private InputPropertyInfo _isEvm;
        private InputPropertyInfo _displayText;
        private InputPropertyInfo _show;
        private InputPropertyInfo _colorIcon;
        private InputPropertyInfo _showInBoutique;
        private InputPropertyInfo _scannerTxUrl;
        private InputPropertyInfo _chain;
        private InputPropertyInfo _lockTokenWhitelist;
        private InputPropertyInfo _projectsInformations;
        private InputPropertyInfo _createdAt;
        private InputPropertyInfo _updatedAt;
        private InputPropertyInfo _publishedAt;
        private InputPropertyInfo _and;
        private InputPropertyInfo _or;
        private InputPropertyInfo _not;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterInput>))]
        #endif
        public QueryBuilderParameter<IdFilterInput> DocumentId
        {
            get { return (QueryBuilderParameter<IdFilterInput>)_documentId.Value; }
            set { _documentId = new InputPropertyInfo { Name = "documentId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<BooleanFilterInput>))]
        #endif
        public QueryBuilderParameter<BooleanFilterInput> IsEvm
        {
            get { return (QueryBuilderParameter<BooleanFilterInput>)_isEvm.Value; }
            set { _isEvm = new InputPropertyInfo { Name = "IsEVM", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> DisplayText
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_displayText.Value; }
            set { _displayText = new InputPropertyInfo { Name = "DisplayText", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<BooleanFilterInput>))]
        #endif
        public QueryBuilderParameter<BooleanFilterInput> Show
        {
            get { return (QueryBuilderParameter<BooleanFilterInput>)_show.Value; }
            set { _show = new InputPropertyInfo { Name = "Show", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ComponentColorIconColorIconFiltersInput>))]
        #endif
        public QueryBuilderParameter<ComponentColorIconColorIconFiltersInput> ColorIcon
        {
            get { return (QueryBuilderParameter<ComponentColorIconColorIconFiltersInput>)_colorIcon.Value; }
            set { _colorIcon = new InputPropertyInfo { Name = "colorIcon", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<BooleanFilterInput>))]
        #endif
        public QueryBuilderParameter<BooleanFilterInput> ShowInBoutique
        {
            get { return (QueryBuilderParameter<BooleanFilterInput>)_showInBoutique.Value; }
            set { _showInBoutique = new InputPropertyInfo { Name = "ShowInBoutique", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> ScannerTxUrl
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_scannerTxUrl.Value; }
            set { _scannerTxUrl = new InputPropertyInfo { Name = "scannerTxUrl", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ChainFiltersInput>))]
        #endif
        public QueryBuilderParameter<ChainFiltersInput> Chain
        {
            get { return (QueryBuilderParameter<ChainFiltersInput>)_chain.Value; }
            set { _chain = new InputPropertyInfo { Name = "chain", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("lock_token_whitelist")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<LockTokenWhitelistFiltersInput>))]
        #endif
        public QueryBuilderParameter<LockTokenWhitelistFiltersInput> LockTokenWhitelist
        {
            get { return (QueryBuilderParameter<LockTokenWhitelistFiltersInput>)_lockTokenWhitelist.Value; }
            set { _lockTokenWhitelist = new InputPropertyInfo { Name = "lock_token_whitelist", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("projects_informations")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ProjectsInformationFiltersInput>))]
        #endif
        public QueryBuilderParameter<ProjectsInformationFiltersInput> ProjectsInformations
        {
            get { return (QueryBuilderParameter<ProjectsInformationFiltersInput>)_projectsInformations.Value; }
            set { _projectsInformations = new InputPropertyInfo { Name = "projects_informations", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> CreatedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_createdAt.Value; }
            set { _createdAt = new InputPropertyInfo { Name = "createdAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> UpdatedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_updatedAt.Value; }
            set { _updatedAt = new InputPropertyInfo { Name = "updatedAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> PublishedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_publishedAt.Value; }
            set { _publishedAt = new InputPropertyInfo { Name = "publishedAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ChainSettingFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<ChainSettingFiltersInput>> And
        {
            get { return (QueryBuilderParameter<ICollection<ChainSettingFiltersInput>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ChainSettingFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<ChainSettingFiltersInput>> Or
        {
            get { return (QueryBuilderParameter<ICollection<ChainSettingFiltersInput>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ChainSettingFiltersInput>))]
        #endif
        public QueryBuilderParameter<ChainSettingFiltersInput> Not
        {
            get { return (QueryBuilderParameter<ChainSettingFiltersInput>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_documentId.Name != null) yield return _documentId;
            if (_isEvm.Name != null) yield return _isEvm;
            if (_displayText.Name != null) yield return _displayText;
            if (_show.Name != null) yield return _show;
            if (_colorIcon.Name != null) yield return _colorIcon;
            if (_showInBoutique.Name != null) yield return _showInBoutique;
            if (_scannerTxUrl.Name != null) yield return _scannerTxUrl;
            if (_chain.Name != null) yield return _chain;
            if (_lockTokenWhitelist.Name != null) yield return _lockTokenWhitelist;
            if (_projectsInformations.Name != null) yield return _projectsInformations;
            if (_createdAt.Name != null) yield return _createdAt;
            if (_updatedAt.Name != null) yield return _updatedAt;
            if (_publishedAt.Name != null) yield return _publishedAt;
            if (_and.Name != null) yield return _and;
            if (_or.Name != null) yield return _or;
            if (_not.Name != null) yield return _not;
        }
    }

    public partial class ChainSettingInput : IGraphQlInputObject
    {
        private InputPropertyInfo _isEvm;
        private InputPropertyInfo _displayText;
        private InputPropertyInfo _whiteLogo;
        private InputPropertyInfo _show;
        private InputPropertyInfo _colorIcon;
        private InputPropertyInfo _showInBoutique;
        private InputPropertyInfo _scannerTxUrl;
        private InputPropertyInfo _chain;
        private InputPropertyInfo _lockTokenWhitelist;
        private InputPropertyInfo _projectsInformations;
        private InputPropertyInfo _publishedAt;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsEvm
        {
            get { return (QueryBuilderParameter<bool?>)_isEvm.Value; }
            set { _isEvm = new InputPropertyInfo { Name = "IsEVM", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> DisplayText
        {
            get { return (QueryBuilderParameter<string>)_displayText.Value; }
            set { _displayText = new InputPropertyInfo { Name = "DisplayText", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> WhiteLogo
        {
            get { return (QueryBuilderParameter<string>)_whiteLogo.Value; }
            set { _whiteLogo = new InputPropertyInfo { Name = "WhiteLogo", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> Show
        {
            get { return (QueryBuilderParameter<bool?>)_show.Value; }
            set { _show = new InputPropertyInfo { Name = "Show", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ComponentColorIconColorIconInput>))]
        #endif
        public QueryBuilderParameter<ComponentColorIconColorIconInput> ColorIcon
        {
            get { return (QueryBuilderParameter<ComponentColorIconColorIconInput>)_colorIcon.Value; }
            set { _colorIcon = new InputPropertyInfo { Name = "colorIcon", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> ShowInBoutique
        {
            get { return (QueryBuilderParameter<bool?>)_showInBoutique.Value; }
            set { _showInBoutique = new InputPropertyInfo { Name = "ShowInBoutique", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ScannerTxUrl
        {
            get { return (QueryBuilderParameter<string>)_scannerTxUrl.Value; }
            set { _scannerTxUrl = new InputPropertyInfo { Name = "scannerTxUrl", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Chain
        {
            get { return (QueryBuilderParameter<string>)_chain.Value; }
            set { _chain = new InputPropertyInfo { Name = "chain", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("lock_token_whitelist")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> LockTokenWhitelist
        {
            get { return (QueryBuilderParameter<string>)_lockTokenWhitelist.Value; }
            set { _lockTokenWhitelist = new InputPropertyInfo { Name = "lock_token_whitelist", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("projects_informations")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> ProjectsInformations
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_projectsInformations.Value; }
            set { _projectsInformations = new InputPropertyInfo { Name = "projects_informations", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTime?>))]
        #endif
        public QueryBuilderParameter<DateTime?> PublishedAt
        {
            get { return (QueryBuilderParameter<DateTime?>)_publishedAt.Value; }
            set { _publishedAt = new InputPropertyInfo { Name = "publishedAt", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_isEvm.Name != null) yield return _isEvm;
            if (_displayText.Name != null) yield return _displayText;
            if (_whiteLogo.Name != null) yield return _whiteLogo;
            if (_show.Name != null) yield return _show;
            if (_colorIcon.Name != null) yield return _colorIcon;
            if (_showInBoutique.Name != null) yield return _showInBoutique;
            if (_scannerTxUrl.Name != null) yield return _scannerTxUrl;
            if (_chain.Name != null) yield return _chain;
            if (_lockTokenWhitelist.Name != null) yield return _lockTokenWhitelist;
            if (_projectsInformations.Name != null) yield return _projectsInformations;
            if (_publishedAt.Name != null) yield return _publishedAt;
        }
    }

    public partial class ConditionInput : IGraphQlInputObject
    {
        private InputPropertyInfo _value;
        private InputPropertyInfo _publishedAt;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Value
        {
            get { return (QueryBuilderParameter<string>)_value.Value; }
            set { _value = new InputPropertyInfo { Name = "Value", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTime?>))]
        #endif
        public QueryBuilderParameter<DateTime?> PublishedAt
        {
            get { return (QueryBuilderParameter<DateTime?>)_publishedAt.Value; }
            set { _publishedAt = new InputPropertyInfo { Name = "publishedAt", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_value.Name != null) yield return _value;
            if (_publishedAt.Name != null) yield return _publishedAt;
        }
    }

    public partial class ContractFiltersInput : IGraphQlInputObject
    {
        private InputPropertyInfo _documentId;
        private InputPropertyInfo _nameVersion;
        private InputPropertyInfo _abi;
        private InputPropertyInfo _byteCode;
        private InputPropertyInfo _releaseNotes;
        private InputPropertyInfo _gitLink;
        private InputPropertyInfo _compilerSetting;
        private InputPropertyInfo _createdAt;
        private InputPropertyInfo _updatedAt;
        private InputPropertyInfo _publishedAt;
        private InputPropertyInfo _and;
        private InputPropertyInfo _or;
        private InputPropertyInfo _not;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterInput>))]
        #endif
        public QueryBuilderParameter<IdFilterInput> DocumentId
        {
            get { return (QueryBuilderParameter<IdFilterInput>)_documentId.Value; }
            set { _documentId = new InputPropertyInfo { Name = "documentId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> NameVersion
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_nameVersion.Value; }
            set { _nameVersion = new InputPropertyInfo { Name = "NameVersion", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<JsonFilterInput>))]
        #endif
        public QueryBuilderParameter<JsonFilterInput> Abi
        {
            get { return (QueryBuilderParameter<JsonFilterInput>)_abi.Value; }
            set { _abi = new InputPropertyInfo { Name = "ABI", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<JsonFilterInput>))]
        #endif
        public QueryBuilderParameter<JsonFilterInput> ByteCode
        {
            get { return (QueryBuilderParameter<JsonFilterInput>)_byteCode.Value; }
            set { _byteCode = new InputPropertyInfo { Name = "ByteCode", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> ReleaseNotes
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_releaseNotes.Value; }
            set { _releaseNotes = new InputPropertyInfo { Name = "ReleaseNotes", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> GitLink
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_gitLink.Value; }
            set { _gitLink = new InputPropertyInfo { Name = "GitLink", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ComponentCompilerSettingCompilerSettingsFiltersInput>))]
        #endif
        public QueryBuilderParameter<ComponentCompilerSettingCompilerSettingsFiltersInput> CompilerSetting
        {
            get { return (QueryBuilderParameter<ComponentCompilerSettingCompilerSettingsFiltersInput>)_compilerSetting.Value; }
            set { _compilerSetting = new InputPropertyInfo { Name = "CompilerSetting", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> CreatedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_createdAt.Value; }
            set { _createdAt = new InputPropertyInfo { Name = "createdAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> UpdatedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_updatedAt.Value; }
            set { _updatedAt = new InputPropertyInfo { Name = "updatedAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> PublishedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_publishedAt.Value; }
            set { _publishedAt = new InputPropertyInfo { Name = "publishedAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ContractFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<ContractFiltersInput>> And
        {
            get { return (QueryBuilderParameter<ICollection<ContractFiltersInput>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ContractFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<ContractFiltersInput>> Or
        {
            get { return (QueryBuilderParameter<ICollection<ContractFiltersInput>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ContractFiltersInput>))]
        #endif
        public QueryBuilderParameter<ContractFiltersInput> Not
        {
            get { return (QueryBuilderParameter<ContractFiltersInput>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_documentId.Name != null) yield return _documentId;
            if (_nameVersion.Name != null) yield return _nameVersion;
            if (_abi.Name != null) yield return _abi;
            if (_byteCode.Name != null) yield return _byteCode;
            if (_releaseNotes.Name != null) yield return _releaseNotes;
            if (_gitLink.Name != null) yield return _gitLink;
            if (_compilerSetting.Name != null) yield return _compilerSetting;
            if (_createdAt.Name != null) yield return _createdAt;
            if (_updatedAt.Name != null) yield return _updatedAt;
            if (_publishedAt.Name != null) yield return _publishedAt;
            if (_and.Name != null) yield return _and;
            if (_or.Name != null) yield return _or;
            if (_not.Name != null) yield return _not;
        }
    }

    public partial class ContractInput : IGraphQlInputObject
    {
        private InputPropertyInfo _nameVersion;
        private InputPropertyInfo _abi;
        private InputPropertyInfo _byteCode;
        private InputPropertyInfo _releaseNotes;
        private InputPropertyInfo _gitLink;
        private InputPropertyInfo _compilerSetting;
        private InputPropertyInfo _publishedAt;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> NameVersion
        {
            get { return (QueryBuilderParameter<string>)_nameVersion.Value; }
            set { _nameVersion = new InputPropertyInfo { Name = "NameVersion", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
        #endif
        public QueryBuilderParameter<object> Abi
        {
            get { return (QueryBuilderParameter<object>)_abi.Value; }
            set { _abi = new InputPropertyInfo { Name = "ABI", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
        #endif
        public QueryBuilderParameter<object> ByteCode
        {
            get { return (QueryBuilderParameter<object>)_byteCode.Value; }
            set { _byteCode = new InputPropertyInfo { Name = "ByteCode", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ReleaseNotes
        {
            get { return (QueryBuilderParameter<string>)_releaseNotes.Value; }
            set { _releaseNotes = new InputPropertyInfo { Name = "ReleaseNotes", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> GitLink
        {
            get { return (QueryBuilderParameter<string>)_gitLink.Value; }
            set { _gitLink = new InputPropertyInfo { Name = "GitLink", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ComponentCompilerSettingCompilerSettingsInput>))]
        #endif
        public QueryBuilderParameter<ComponentCompilerSettingCompilerSettingsInput> CompilerSetting
        {
            get { return (QueryBuilderParameter<ComponentCompilerSettingCompilerSettingsInput>)_compilerSetting.Value; }
            set { _compilerSetting = new InputPropertyInfo { Name = "CompilerSetting", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTime?>))]
        #endif
        public QueryBuilderParameter<DateTime?> PublishedAt
        {
            get { return (QueryBuilderParameter<DateTime?>)_publishedAt.Value; }
            set { _publishedAt = new InputPropertyInfo { Name = "publishedAt", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_nameVersion.Name != null) yield return _nameVersion;
            if (_abi.Name != null) yield return _abi;
            if (_byteCode.Name != null) yield return _byteCode;
            if (_releaseNotes.Name != null) yield return _releaseNotes;
            if (_gitLink.Name != null) yield return _gitLink;
            if (_compilerSetting.Name != null) yield return _compilerSetting;
            if (_publishedAt.Name != null) yield return _publishedAt;
        }
    }

    public partial class ContractTypeFiltersInput : IGraphQlInputObject
    {
        private InputPropertyInfo _documentId;
        private InputPropertyInfo _contractType;
        private InputPropertyInfo _order;
        private InputPropertyInfo _isUpgradable;
        private InputPropertyInfo _createdAt;
        private InputPropertyInfo _updatedAt;
        private InputPropertyInfo _publishedAt;
        private InputPropertyInfo _and;
        private InputPropertyInfo _or;
        private InputPropertyInfo _not;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterInput>))]
        #endif
        public QueryBuilderParameter<IdFilterInput> DocumentId
        {
            get { return (QueryBuilderParameter<IdFilterInput>)_documentId.Value; }
            set { _documentId = new InputPropertyInfo { Name = "documentId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> ContractType
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_contractType.Value; }
            set { _contractType = new InputPropertyInfo { Name = "ContractType", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IntFilterInput>))]
        #endif
        public QueryBuilderParameter<IntFilterInput> Order
        {
            get { return (QueryBuilderParameter<IntFilterInput>)_order.Value; }
            set { _order = new InputPropertyInfo { Name = "order", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<BooleanFilterInput>))]
        #endif
        public QueryBuilderParameter<BooleanFilterInput> IsUpgradable
        {
            get { return (QueryBuilderParameter<BooleanFilterInput>)_isUpgradable.Value; }
            set { _isUpgradable = new InputPropertyInfo { Name = "isUpgradable", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> CreatedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_createdAt.Value; }
            set { _createdAt = new InputPropertyInfo { Name = "createdAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> UpdatedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_updatedAt.Value; }
            set { _updatedAt = new InputPropertyInfo { Name = "updatedAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> PublishedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_publishedAt.Value; }
            set { _publishedAt = new InputPropertyInfo { Name = "publishedAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ContractTypeFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<ContractTypeFiltersInput>> And
        {
            get { return (QueryBuilderParameter<ICollection<ContractTypeFiltersInput>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ContractTypeFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<ContractTypeFiltersInput>> Or
        {
            get { return (QueryBuilderParameter<ICollection<ContractTypeFiltersInput>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ContractTypeFiltersInput>))]
        #endif
        public QueryBuilderParameter<ContractTypeFiltersInput> Not
        {
            get { return (QueryBuilderParameter<ContractTypeFiltersInput>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_documentId.Name != null) yield return _documentId;
            if (_contractType.Name != null) yield return _contractType;
            if (_order.Name != null) yield return _order;
            if (_isUpgradable.Name != null) yield return _isUpgradable;
            if (_createdAt.Name != null) yield return _createdAt;
            if (_updatedAt.Name != null) yield return _updatedAt;
            if (_publishedAt.Name != null) yield return _publishedAt;
            if (_and.Name != null) yield return _and;
            if (_or.Name != null) yield return _or;
            if (_not.Name != null) yield return _not;
        }
    }

    public partial class ContractTypeInput : IGraphQlInputObject
    {
        private InputPropertyInfo _contractType;
        private InputPropertyInfo _order;
        private InputPropertyInfo _isUpgradable;
        private InputPropertyInfo _publishedAt;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ContractType
        {
            get { return (QueryBuilderParameter<string>)_contractType.Value; }
            set { _contractType = new InputPropertyInfo { Name = "ContractType", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Order
        {
            get { return (QueryBuilderParameter<int?>)_order.Value; }
            set { _order = new InputPropertyInfo { Name = "order", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsUpgradable
        {
            get { return (QueryBuilderParameter<bool?>)_isUpgradable.Value; }
            set { _isUpgradable = new InputPropertyInfo { Name = "isUpgradable", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTime?>))]
        #endif
        public QueryBuilderParameter<DateTime?> PublishedAt
        {
            get { return (QueryBuilderParameter<DateTime?>)_publishedAt.Value; }
            set { _publishedAt = new InputPropertyInfo { Name = "publishedAt", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_contractType.Name != null) yield return _contractType;
            if (_order.Name != null) yield return _order;
            if (_isUpgradable.Name != null) yield return _isUpgradable;
            if (_publishedAt.Name != null) yield return _publishedAt;
        }
    }

    public partial class ContractsOnChainFiltersInput : IGraphQlInputObject
    {
        private InputPropertyInfo _documentId;
        private InputPropertyInfo _chain;
        private InputPropertyInfo _contracts;
        private InputPropertyInfo _decimals;
        private InputPropertyInfo _explorer;
        private InputPropertyInfo _faucet;
        private InputPropertyInfo _rpc;
        private InputPropertyInfo _nativeCurrency;
        private InputPropertyInfo _webSocket;
        private InputPropertyInfo _theGraphUrl;
        private InputPropertyInfo _createdAt;
        private InputPropertyInfo _updatedAt;
        private InputPropertyInfo _publishedAt;
        private InputPropertyInfo _and;
        private InputPropertyInfo _or;
        private InputPropertyInfo _not;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterInput>))]
        #endif
        public QueryBuilderParameter<IdFilterInput> DocumentId
        {
            get { return (QueryBuilderParameter<IdFilterInput>)_documentId.Value; }
            set { _documentId = new InputPropertyInfo { Name = "documentId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ChainFiltersInput>))]
        #endif
        public QueryBuilderParameter<ChainFiltersInput> Chain
        {
            get { return (QueryBuilderParameter<ChainFiltersInput>)_chain.Value; }
            set { _chain = new InputPropertyInfo { Name = "Chain", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ComponentContractOnChainContractOnChainFiltersInput>))]
        #endif
        public QueryBuilderParameter<ComponentContractOnChainContractOnChainFiltersInput> Contracts
        {
            get { return (QueryBuilderParameter<ComponentContractOnChainContractOnChainFiltersInput>)_contracts.Value; }
            set { _contracts = new InputPropertyInfo { Name = "Contracts", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IntFilterInput>))]
        #endif
        public QueryBuilderParameter<IntFilterInput> Decimals
        {
            get { return (QueryBuilderParameter<IntFilterInput>)_decimals.Value; }
            set { _decimals = new InputPropertyInfo { Name = "Decimals", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Explorer
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_explorer.Value; }
            set { _explorer = new InputPropertyInfo { Name = "Explorer", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Faucet
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_faucet.Value; }
            set { _faucet = new InputPropertyInfo { Name = "Faucet", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Rpc
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_rpc.Value; }
            set { _rpc = new InputPropertyInfo { Name = "RPC", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> NativeCurrency
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_nativeCurrency.Value; }
            set { _nativeCurrency = new InputPropertyInfo { Name = "NativeCurrency", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> WebSocket
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_webSocket.Value; }
            set { _webSocket = new InputPropertyInfo { Name = "WebSocket", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> TheGraphUrl
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_theGraphUrl.Value; }
            set { _theGraphUrl = new InputPropertyInfo { Name = "TheGraphURL", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> CreatedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_createdAt.Value; }
            set { _createdAt = new InputPropertyInfo { Name = "createdAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> UpdatedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_updatedAt.Value; }
            set { _updatedAt = new InputPropertyInfo { Name = "updatedAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> PublishedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_publishedAt.Value; }
            set { _publishedAt = new InputPropertyInfo { Name = "publishedAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ContractsOnChainFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<ContractsOnChainFiltersInput>> And
        {
            get { return (QueryBuilderParameter<ICollection<ContractsOnChainFiltersInput>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ContractsOnChainFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<ContractsOnChainFiltersInput>> Or
        {
            get { return (QueryBuilderParameter<ICollection<ContractsOnChainFiltersInput>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ContractsOnChainFiltersInput>))]
        #endif
        public QueryBuilderParameter<ContractsOnChainFiltersInput> Not
        {
            get { return (QueryBuilderParameter<ContractsOnChainFiltersInput>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_documentId.Name != null) yield return _documentId;
            if (_chain.Name != null) yield return _chain;
            if (_contracts.Name != null) yield return _contracts;
            if (_decimals.Name != null) yield return _decimals;
            if (_explorer.Name != null) yield return _explorer;
            if (_faucet.Name != null) yield return _faucet;
            if (_rpc.Name != null) yield return _rpc;
            if (_nativeCurrency.Name != null) yield return _nativeCurrency;
            if (_webSocket.Name != null) yield return _webSocket;
            if (_theGraphUrl.Name != null) yield return _theGraphUrl;
            if (_createdAt.Name != null) yield return _createdAt;
            if (_updatedAt.Name != null) yield return _updatedAt;
            if (_publishedAt.Name != null) yield return _publishedAt;
            if (_and.Name != null) yield return _and;
            if (_or.Name != null) yield return _or;
            if (_not.Name != null) yield return _not;
        }
    }

    public partial class ContractsOnChainInput : IGraphQlInputObject
    {
        private InputPropertyInfo _chain;
        private InputPropertyInfo _contracts;
        private InputPropertyInfo _decimals;
        private InputPropertyInfo _explorer;
        private InputPropertyInfo _faucet;
        private InputPropertyInfo _rpc;
        private InputPropertyInfo _nativeCurrency;
        private InputPropertyInfo _webSocket;
        private InputPropertyInfo _theGraphUrl;
        private InputPropertyInfo _publishedAt;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Chain
        {
            get { return (QueryBuilderParameter<string>)_chain.Value; }
            set { _chain = new InputPropertyInfo { Name = "Chain", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ComponentContractOnChainContractOnChainInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<ComponentContractOnChainContractOnChainInput>> Contracts
        {
            get { return (QueryBuilderParameter<ICollection<ComponentContractOnChainContractOnChainInput>>)_contracts.Value; }
            set { _contracts = new InputPropertyInfo { Name = "Contracts", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Decimals
        {
            get { return (QueryBuilderParameter<int?>)_decimals.Value; }
            set { _decimals = new InputPropertyInfo { Name = "Decimals", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Explorer
        {
            get { return (QueryBuilderParameter<string>)_explorer.Value; }
            set { _explorer = new InputPropertyInfo { Name = "Explorer", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Faucet
        {
            get { return (QueryBuilderParameter<string>)_faucet.Value; }
            set { _faucet = new InputPropertyInfo { Name = "Faucet", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Rpc
        {
            get { return (QueryBuilderParameter<string>)_rpc.Value; }
            set { _rpc = new InputPropertyInfo { Name = "RPC", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> NativeCurrency
        {
            get { return (QueryBuilderParameter<string>)_nativeCurrency.Value; }
            set { _nativeCurrency = new InputPropertyInfo { Name = "NativeCurrency", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> WebSocket
        {
            get { return (QueryBuilderParameter<string>)_webSocket.Value; }
            set { _webSocket = new InputPropertyInfo { Name = "WebSocket", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TheGraphUrl
        {
            get { return (QueryBuilderParameter<string>)_theGraphUrl.Value; }
            set { _theGraphUrl = new InputPropertyInfo { Name = "TheGraphURL", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTime?>))]
        #endif
        public QueryBuilderParameter<DateTime?> PublishedAt
        {
            get { return (QueryBuilderParameter<DateTime?>)_publishedAt.Value; }
            set { _publishedAt = new InputPropertyInfo { Name = "publishedAt", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_chain.Name != null) yield return _chain;
            if (_contracts.Name != null) yield return _contracts;
            if (_decimals.Name != null) yield return _decimals;
            if (_explorer.Name != null) yield return _explorer;
            if (_faucet.Name != null) yield return _faucet;
            if (_rpc.Name != null) yield return _rpc;
            if (_nativeCurrency.Name != null) yield return _nativeCurrency;
            if (_webSocket.Name != null) yield return _webSocket;
            if (_theGraphUrl.Name != null) yield return _theGraphUrl;
            if (_publishedAt.Name != null) yield return _publishedAt;
        }
    }

    public partial class CoverFiltersInput : IGraphQlInputObject
    {
        private InputPropertyInfo _documentId;
        private InputPropertyInfo _createdAt;
        private InputPropertyInfo _updatedAt;
        private InputPropertyInfo _publishedAt;
        private InputPropertyInfo _and;
        private InputPropertyInfo _or;
        private InputPropertyInfo _not;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterInput>))]
        #endif
        public QueryBuilderParameter<IdFilterInput> DocumentId
        {
            get { return (QueryBuilderParameter<IdFilterInput>)_documentId.Value; }
            set { _documentId = new InputPropertyInfo { Name = "documentId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> CreatedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_createdAt.Value; }
            set { _createdAt = new InputPropertyInfo { Name = "createdAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> UpdatedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_updatedAt.Value; }
            set { _updatedAt = new InputPropertyInfo { Name = "updatedAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> PublishedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_publishedAt.Value; }
            set { _publishedAt = new InputPropertyInfo { Name = "publishedAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<CoverFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<CoverFiltersInput>> And
        {
            get { return (QueryBuilderParameter<ICollection<CoverFiltersInput>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<CoverFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<CoverFiltersInput>> Or
        {
            get { return (QueryBuilderParameter<ICollection<CoverFiltersInput>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<CoverFiltersInput>))]
        #endif
        public QueryBuilderParameter<CoverFiltersInput> Not
        {
            get { return (QueryBuilderParameter<CoverFiltersInput>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_documentId.Name != null) yield return _documentId;
            if (_createdAt.Name != null) yield return _createdAt;
            if (_updatedAt.Name != null) yield return _updatedAt;
            if (_publishedAt.Name != null) yield return _publishedAt;
            if (_and.Name != null) yield return _and;
            if (_or.Name != null) yield return _or;
            if (_not.Name != null) yield return _not;
        }
    }

    public partial class CoverInput : IGraphQlInputObject
    {
        private InputPropertyInfo _picture;
        private InputPropertyInfo _publishedAt;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Picture
        {
            get { return (QueryBuilderParameter<string>)_picture.Value; }
            set { _picture = new InputPropertyInfo { Name = "picture", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTime?>))]
        #endif
        public QueryBuilderParameter<DateTime?> PublishedAt
        {
            get { return (QueryBuilderParameter<DateTime?>)_publishedAt.Value; }
            set { _publishedAt = new InputPropertyInfo { Name = "publishedAt", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_picture.Name != null) yield return _picture;
            if (_publishedAt.Name != null) yield return _publishedAt;
        }
    }

    public partial class DefaultWalletFiltersInput : IGraphQlInputObject
    {
        private InputPropertyInfo _documentId;
        private InputPropertyInfo _name;
        private InputPropertyInfo _link;
        private InputPropertyInfo _order;
        private InputPropertyInfo _createdAt;
        private InputPropertyInfo _updatedAt;
        private InputPropertyInfo _publishedAt;
        private InputPropertyInfo _and;
        private InputPropertyInfo _or;
        private InputPropertyInfo _not;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterInput>))]
        #endif
        public QueryBuilderParameter<IdFilterInput> DocumentId
        {
            get { return (QueryBuilderParameter<IdFilterInput>)_documentId.Value; }
            set { _documentId = new InputPropertyInfo { Name = "documentId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Name
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "Name", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Link
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_link.Value; }
            set { _link = new InputPropertyInfo { Name = "Link", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IntFilterInput>))]
        #endif
        public QueryBuilderParameter<IntFilterInput> Order
        {
            get { return (QueryBuilderParameter<IntFilterInput>)_order.Value; }
            set { _order = new InputPropertyInfo { Name = "order", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> CreatedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_createdAt.Value; }
            set { _createdAt = new InputPropertyInfo { Name = "createdAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> UpdatedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_updatedAt.Value; }
            set { _updatedAt = new InputPropertyInfo { Name = "updatedAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> PublishedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_publishedAt.Value; }
            set { _publishedAt = new InputPropertyInfo { Name = "publishedAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<DefaultWalletFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<DefaultWalletFiltersInput>> And
        {
            get { return (QueryBuilderParameter<ICollection<DefaultWalletFiltersInput>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<DefaultWalletFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<DefaultWalletFiltersInput>> Or
        {
            get { return (QueryBuilderParameter<ICollection<DefaultWalletFiltersInput>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DefaultWalletFiltersInput>))]
        #endif
        public QueryBuilderParameter<DefaultWalletFiltersInput> Not
        {
            get { return (QueryBuilderParameter<DefaultWalletFiltersInput>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_documentId.Name != null) yield return _documentId;
            if (_name.Name != null) yield return _name;
            if (_link.Name != null) yield return _link;
            if (_order.Name != null) yield return _order;
            if (_createdAt.Name != null) yield return _createdAt;
            if (_updatedAt.Name != null) yield return _updatedAt;
            if (_publishedAt.Name != null) yield return _publishedAt;
            if (_and.Name != null) yield return _and;
            if (_or.Name != null) yield return _or;
            if (_not.Name != null) yield return _not;
        }
    }

    public partial class DefaultWalletInput : IGraphQlInputObject
    {
        private InputPropertyInfo _name;
        private InputPropertyInfo _link;
        private InputPropertyInfo _order;
        private InputPropertyInfo _icon;
        private InputPropertyInfo _publishedAt;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Name
        {
            get { return (QueryBuilderParameter<string>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "Name", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Link
        {
            get { return (QueryBuilderParameter<string>)_link.Value; }
            set { _link = new InputPropertyInfo { Name = "Link", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Order
        {
            get { return (QueryBuilderParameter<int?>)_order.Value; }
            set { _order = new InputPropertyInfo { Name = "order", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Icon
        {
            get { return (QueryBuilderParameter<string>)_icon.Value; }
            set { _icon = new InputPropertyInfo { Name = "Icon", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTime?>))]
        #endif
        public QueryBuilderParameter<DateTime?> PublishedAt
        {
            get { return (QueryBuilderParameter<DateTime?>)_publishedAt.Value; }
            set { _publishedAt = new InputPropertyInfo { Name = "publishedAt", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_name.Name != null) yield return _name;
            if (_link.Name != null) yield return _link;
            if (_order.Name != null) yield return _order;
            if (_icon.Name != null) yield return _icon;
            if (_publishedAt.Name != null) yield return _publishedAt;
        }
    }

    public partial class EvmVersionFiltersInput : IGraphQlInputObject
    {
        private InputPropertyInfo _documentId;
        private InputPropertyInfo _evmVersion;
        private InputPropertyInfo _createdAt;
        private InputPropertyInfo _updatedAt;
        private InputPropertyInfo _publishedAt;
        private InputPropertyInfo _and;
        private InputPropertyInfo _or;
        private InputPropertyInfo _not;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterInput>))]
        #endif
        public QueryBuilderParameter<IdFilterInput> DocumentId
        {
            get { return (QueryBuilderParameter<IdFilterInput>)_documentId.Value; }
            set { _documentId = new InputPropertyInfo { Name = "documentId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> EvmVersion
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_evmVersion.Value; }
            set { _evmVersion = new InputPropertyInfo { Name = "EVMVersion", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> CreatedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_createdAt.Value; }
            set { _createdAt = new InputPropertyInfo { Name = "createdAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> UpdatedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_updatedAt.Value; }
            set { _updatedAt = new InputPropertyInfo { Name = "updatedAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> PublishedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_publishedAt.Value; }
            set { _publishedAt = new InputPropertyInfo { Name = "publishedAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<EvmVersionFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<EvmVersionFiltersInput>> And
        {
            get { return (QueryBuilderParameter<ICollection<EvmVersionFiltersInput>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<EvmVersionFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<EvmVersionFiltersInput>> Or
        {
            get { return (QueryBuilderParameter<ICollection<EvmVersionFiltersInput>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<EvmVersionFiltersInput>))]
        #endif
        public QueryBuilderParameter<EvmVersionFiltersInput> Not
        {
            get { return (QueryBuilderParameter<EvmVersionFiltersInput>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_documentId.Name != null) yield return _documentId;
            if (_evmVersion.Name != null) yield return _evmVersion;
            if (_createdAt.Name != null) yield return _createdAt;
            if (_updatedAt.Name != null) yield return _updatedAt;
            if (_publishedAt.Name != null) yield return _publishedAt;
            if (_and.Name != null) yield return _and;
            if (_or.Name != null) yield return _or;
            if (_not.Name != null) yield return _not;
        }
    }

    public partial class EvmVersionInput : IGraphQlInputObject
    {
        private InputPropertyInfo _evmVersion;
        private InputPropertyInfo _publishedAt;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> EvmVersion
        {
            get { return (QueryBuilderParameter<string>)_evmVersion.Value; }
            set { _evmVersion = new InputPropertyInfo { Name = "EVMVersion", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTime?>))]
        #endif
        public QueryBuilderParameter<DateTime?> PublishedAt
        {
            get { return (QueryBuilderParameter<DateTime?>)_publishedAt.Value; }
            set { _publishedAt = new InputPropertyInfo { Name = "publishedAt", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_evmVersion.Name != null) yield return _evmVersion;
            if (_publishedAt.Name != null) yield return _publishedAt;
        }
    }

    public partial class FooterInput : IGraphQlInputObject
    {
        private InputPropertyInfo _company;
        private InputPropertyInfo _help;
        private InputPropertyInfo _information;
        private InputPropertyInfo _social;
        private InputPropertyInfo _boostSocial;
        private InputPropertyInfo _publishedAt;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ComponentSimpleUrlSimpleUrlInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<ComponentSimpleUrlSimpleUrlInput>> Company
        {
            get { return (QueryBuilderParameter<ICollection<ComponentSimpleUrlSimpleUrlInput>>)_company.Value; }
            set { _company = new InputPropertyInfo { Name = "Company", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ComponentSimpleUrlSimpleUrlInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<ComponentSimpleUrlSimpleUrlInput>> Help
        {
            get { return (QueryBuilderParameter<ICollection<ComponentSimpleUrlSimpleUrlInput>>)_help.Value; }
            set { _help = new InputPropertyInfo { Name = "Help", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ComponentSimpleUrlSimpleUrlInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<ComponentSimpleUrlSimpleUrlInput>> Information
        {
            get { return (QueryBuilderParameter<ICollection<ComponentSimpleUrlSimpleUrlInput>>)_information.Value; }
            set { _information = new InputPropertyInfo { Name = "Information", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ComponentSimpleUrlSimpleUrlInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<ComponentSimpleUrlSimpleUrlInput>> Social
        {
            get { return (QueryBuilderParameter<ICollection<ComponentSimpleUrlSimpleUrlInput>>)_social.Value; }
            set { _social = new InputPropertyInfo { Name = "Social", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("Boost_Social")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ComponentSimpleUrlSimpleUrlInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<ComponentSimpleUrlSimpleUrlInput>> BoostSocial
        {
            get { return (QueryBuilderParameter<ICollection<ComponentSimpleUrlSimpleUrlInput>>)_boostSocial.Value; }
            set { _boostSocial = new InputPropertyInfo { Name = "Boost_Social", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTime?>))]
        #endif
        public QueryBuilderParameter<DateTime?> PublishedAt
        {
            get { return (QueryBuilderParameter<DateTime?>)_publishedAt.Value; }
            set { _publishedAt = new InputPropertyInfo { Name = "publishedAt", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_company.Name != null) yield return _company;
            if (_help.Name != null) yield return _help;
            if (_information.Name != null) yield return _information;
            if (_social.Name != null) yield return _social;
            if (_boostSocial.Name != null) yield return _boostSocial;
            if (_publishedAt.Name != null) yield return _publishedAt;
        }
    }

    public partial class GrowFiltersInput : IGraphQlInputObject
    {
        private InputPropertyInfo _documentId;
        private InputPropertyInfo _reward;
        private InputPropertyInfo _text;
        private InputPropertyInfo _projectName;
        private InputPropertyInfo _participants;
        private InputPropertyInfo _startTime;
        private InputPropertyInfo _subTitle;
        private InputPropertyInfo _dataCcode;
        private InputPropertyInfo _descriptionMainText;
        private InputPropertyInfo _descriptionSubText;
        private InputPropertyInfo _finishTime;
        private InputPropertyInfo _bannerUrl;
        private InputPropertyInfo _bannerText;
        private InputPropertyInfo _order;
        private InputPropertyInfo _showInMainBanner;
        private InputPropertyInfo _show;
        private InputPropertyInfo _growBadge;
        private InputPropertyInfo _createdAt;
        private InputPropertyInfo _updatedAt;
        private InputPropertyInfo _publishedAt;
        private InputPropertyInfo _and;
        private InputPropertyInfo _or;
        private InputPropertyInfo _not;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterInput>))]
        #endif
        public QueryBuilderParameter<IdFilterInput> DocumentId
        {
            get { return (QueryBuilderParameter<IdFilterInput>)_documentId.Value; }
            set { _documentId = new InputPropertyInfo { Name = "documentId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Reward
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_reward.Value; }
            set { _reward = new InputPropertyInfo { Name = "reward", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Text
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_text.Value; }
            set { _text = new InputPropertyInfo { Name = "text", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> ProjectName
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_projectName.Value; }
            set { _projectName = new InputPropertyInfo { Name = "projectName", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IntFilterInput>))]
        #endif
        public QueryBuilderParameter<IntFilterInput> Participants
        {
            get { return (QueryBuilderParameter<IntFilterInput>)_participants.Value; }
            set { _participants = new InputPropertyInfo { Name = "participants", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> StartTime
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_startTime.Value; }
            set { _startTime = new InputPropertyInfo { Name = "startTime", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> SubTitle
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_subTitle.Value; }
            set { _subTitle = new InputPropertyInfo { Name = "subTitle", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("data_ccode")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> DataCcode
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_dataCcode.Value; }
            set { _dataCcode = new InputPropertyInfo { Name = "data_ccode", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> DescriptionMainText
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_descriptionMainText.Value; }
            set { _descriptionMainText = new InputPropertyInfo { Name = "DescriptionMainText", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> DescriptionSubText
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_descriptionSubText.Value; }
            set { _descriptionSubText = new InputPropertyInfo { Name = "DescriptionSubText", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> FinishTime
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_finishTime.Value; }
            set { _finishTime = new InputPropertyInfo { Name = "finishTime", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> BannerUrl
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_bannerUrl.Value; }
            set { _bannerUrl = new InputPropertyInfo { Name = "BannerUrl", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> BannerText
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_bannerText.Value; }
            set { _bannerText = new InputPropertyInfo { Name = "BannerText", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IntFilterInput>))]
        #endif
        public QueryBuilderParameter<IntFilterInput> Order
        {
            get { return (QueryBuilderParameter<IntFilterInput>)_order.Value; }
            set { _order = new InputPropertyInfo { Name = "order", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<BooleanFilterInput>))]
        #endif
        public QueryBuilderParameter<BooleanFilterInput> ShowInMainBanner
        {
            get { return (QueryBuilderParameter<BooleanFilterInput>)_showInMainBanner.Value; }
            set { _showInMainBanner = new InputPropertyInfo { Name = "showInMainBanner", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<BooleanFilterInput>))]
        #endif
        public QueryBuilderParameter<BooleanFilterInput> Show
        {
            get { return (QueryBuilderParameter<BooleanFilterInput>)_show.Value; }
            set { _show = new InputPropertyInfo { Name = "Show", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("grow_badge")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<GrowBadgeFiltersInput>))]
        #endif
        public QueryBuilderParameter<GrowBadgeFiltersInput> GrowBadge
        {
            get { return (QueryBuilderParameter<GrowBadgeFiltersInput>)_growBadge.Value; }
            set { _growBadge = new InputPropertyInfo { Name = "grow_badge", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> CreatedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_createdAt.Value; }
            set { _createdAt = new InputPropertyInfo { Name = "createdAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> UpdatedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_updatedAt.Value; }
            set { _updatedAt = new InputPropertyInfo { Name = "updatedAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> PublishedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_publishedAt.Value; }
            set { _publishedAt = new InputPropertyInfo { Name = "publishedAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<GrowFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<GrowFiltersInput>> And
        {
            get { return (QueryBuilderParameter<ICollection<GrowFiltersInput>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<GrowFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<GrowFiltersInput>> Or
        {
            get { return (QueryBuilderParameter<ICollection<GrowFiltersInput>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<GrowFiltersInput>))]
        #endif
        public QueryBuilderParameter<GrowFiltersInput> Not
        {
            get { return (QueryBuilderParameter<GrowFiltersInput>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_documentId.Name != null) yield return _documentId;
            if (_reward.Name != null) yield return _reward;
            if (_text.Name != null) yield return _text;
            if (_projectName.Name != null) yield return _projectName;
            if (_participants.Name != null) yield return _participants;
            if (_startTime.Name != null) yield return _startTime;
            if (_subTitle.Name != null) yield return _subTitle;
            if (_dataCcode.Name != null) yield return _dataCcode;
            if (_descriptionMainText.Name != null) yield return _descriptionMainText;
            if (_descriptionSubText.Name != null) yield return _descriptionSubText;
            if (_finishTime.Name != null) yield return _finishTime;
            if (_bannerUrl.Name != null) yield return _bannerUrl;
            if (_bannerText.Name != null) yield return _bannerText;
            if (_order.Name != null) yield return _order;
            if (_showInMainBanner.Name != null) yield return _showInMainBanner;
            if (_show.Name != null) yield return _show;
            if (_growBadge.Name != null) yield return _growBadge;
            if (_createdAt.Name != null) yield return _createdAt;
            if (_updatedAt.Name != null) yield return _updatedAt;
            if (_publishedAt.Name != null) yield return _publishedAt;
            if (_and.Name != null) yield return _and;
            if (_or.Name != null) yield return _or;
            if (_not.Name != null) yield return _not;
        }
    }

    public partial class GrowInput : IGraphQlInputObject
    {
        private InputPropertyInfo _reward;
        private InputPropertyInfo _text;
        private InputPropertyInfo _mainIcon;
        private InputPropertyInfo _projectName;
        private InputPropertyInfo _participants;
        private InputPropertyInfo _mainPicture;
        private InputPropertyInfo _startTime;
        private InputPropertyInfo _subTitle;
        private InputPropertyInfo _dataCcode;
        private InputPropertyInfo _descriptionMainText;
        private InputPropertyInfo _descriptionSubText;
        private InputPropertyInfo _finishTime;
        private InputPropertyInfo _banner;
        private InputPropertyInfo _bannerUrl;
        private InputPropertyInfo _bannerText;
        private InputPropertyInfo _order;
        private InputPropertyInfo _showInMainBanner;
        private InputPropertyInfo _show;
        private InputPropertyInfo _growBadge;
        private InputPropertyInfo _publishedAt;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<EnumGrowReward?>))]
        #endif
        public QueryBuilderParameter<EnumGrowReward?> Reward
        {
            get { return (QueryBuilderParameter<EnumGrowReward?>)_reward.Value; }
            set { _reward = new InputPropertyInfo { Name = "reward", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Text
        {
            get { return (QueryBuilderParameter<string>)_text.Value; }
            set { _text = new InputPropertyInfo { Name = "text", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> MainIcon
        {
            get { return (QueryBuilderParameter<string>)_mainIcon.Value; }
            set { _mainIcon = new InputPropertyInfo { Name = "mainIcon", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ProjectName
        {
            get { return (QueryBuilderParameter<string>)_projectName.Value; }
            set { _projectName = new InputPropertyInfo { Name = "projectName", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Participants
        {
            get { return (QueryBuilderParameter<int?>)_participants.Value; }
            set { _participants = new InputPropertyInfo { Name = "participants", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> MainPicture
        {
            get { return (QueryBuilderParameter<string>)_mainPicture.Value; }
            set { _mainPicture = new InputPropertyInfo { Name = "mainPicture", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTime?>))]
        #endif
        public QueryBuilderParameter<DateTime?> StartTime
        {
            get { return (QueryBuilderParameter<DateTime?>)_startTime.Value; }
            set { _startTime = new InputPropertyInfo { Name = "startTime", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> SubTitle
        {
            get { return (QueryBuilderParameter<string>)_subTitle.Value; }
            set { _subTitle = new InputPropertyInfo { Name = "subTitle", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("data_ccode")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> DataCcode
        {
            get { return (QueryBuilderParameter<string>)_dataCcode.Value; }
            set { _dataCcode = new InputPropertyInfo { Name = "data_ccode", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> DescriptionMainText
        {
            get { return (QueryBuilderParameter<string>)_descriptionMainText.Value; }
            set { _descriptionMainText = new InputPropertyInfo { Name = "DescriptionMainText", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> DescriptionSubText
        {
            get { return (QueryBuilderParameter<string>)_descriptionSubText.Value; }
            set { _descriptionSubText = new InputPropertyInfo { Name = "DescriptionSubText", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTime?>))]
        #endif
        public QueryBuilderParameter<DateTime?> FinishTime
        {
            get { return (QueryBuilderParameter<DateTime?>)_finishTime.Value; }
            set { _finishTime = new InputPropertyInfo { Name = "finishTime", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Banner
        {
            get { return (QueryBuilderParameter<string>)_banner.Value; }
            set { _banner = new InputPropertyInfo { Name = "Banner", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> BannerUrl
        {
            get { return (QueryBuilderParameter<string>)_bannerUrl.Value; }
            set { _bannerUrl = new InputPropertyInfo { Name = "BannerUrl", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> BannerText
        {
            get { return (QueryBuilderParameter<string>)_bannerText.Value; }
            set { _bannerText = new InputPropertyInfo { Name = "BannerText", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Order
        {
            get { return (QueryBuilderParameter<int?>)_order.Value; }
            set { _order = new InputPropertyInfo { Name = "order", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> ShowInMainBanner
        {
            get { return (QueryBuilderParameter<bool?>)_showInMainBanner.Value; }
            set { _showInMainBanner = new InputPropertyInfo { Name = "showInMainBanner", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> Show
        {
            get { return (QueryBuilderParameter<bool?>)_show.Value; }
            set { _show = new InputPropertyInfo { Name = "Show", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("grow_badge")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> GrowBadge
        {
            get { return (QueryBuilderParameter<string>)_growBadge.Value; }
            set { _growBadge = new InputPropertyInfo { Name = "grow_badge", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTime?>))]
        #endif
        public QueryBuilderParameter<DateTime?> PublishedAt
        {
            get { return (QueryBuilderParameter<DateTime?>)_publishedAt.Value; }
            set { _publishedAt = new InputPropertyInfo { Name = "publishedAt", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_reward.Name != null) yield return _reward;
            if (_text.Name != null) yield return _text;
            if (_mainIcon.Name != null) yield return _mainIcon;
            if (_projectName.Name != null) yield return _projectName;
            if (_participants.Name != null) yield return _participants;
            if (_mainPicture.Name != null) yield return _mainPicture;
            if (_startTime.Name != null) yield return _startTime;
            if (_subTitle.Name != null) yield return _subTitle;
            if (_dataCcode.Name != null) yield return _dataCcode;
            if (_descriptionMainText.Name != null) yield return _descriptionMainText;
            if (_descriptionSubText.Name != null) yield return _descriptionSubText;
            if (_finishTime.Name != null) yield return _finishTime;
            if (_banner.Name != null) yield return _banner;
            if (_bannerUrl.Name != null) yield return _bannerUrl;
            if (_bannerText.Name != null) yield return _bannerText;
            if (_order.Name != null) yield return _order;
            if (_showInMainBanner.Name != null) yield return _showInMainBanner;
            if (_show.Name != null) yield return _show;
            if (_growBadge.Name != null) yield return _growBadge;
            if (_publishedAt.Name != null) yield return _publishedAt;
        }
    }

    public partial class GrowBadgeFiltersInput : IGraphQlInputObject
    {
        private InputPropertyInfo _documentId;
        private InputPropertyInfo _name;
        private InputPropertyInfo _backgroundColor;
        private InputPropertyInfo _tooltipText;
        private InputPropertyInfo _color;
        private InputPropertyInfo _createdAt;
        private InputPropertyInfo _updatedAt;
        private InputPropertyInfo _publishedAt;
        private InputPropertyInfo _and;
        private InputPropertyInfo _or;
        private InputPropertyInfo _not;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterInput>))]
        #endif
        public QueryBuilderParameter<IdFilterInput> DocumentId
        {
            get { return (QueryBuilderParameter<IdFilterInput>)_documentId.Value; }
            set { _documentId = new InputPropertyInfo { Name = "documentId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Name
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "Name", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> BackgroundColor
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_backgroundColor.Value; }
            set { _backgroundColor = new InputPropertyInfo { Name = "BackgroundColor", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> TooltipText
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_tooltipText.Value; }
            set { _tooltipText = new InputPropertyInfo { Name = "TooltipText", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Color
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_color.Value; }
            set { _color = new InputPropertyInfo { Name = "Color", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> CreatedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_createdAt.Value; }
            set { _createdAt = new InputPropertyInfo { Name = "createdAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> UpdatedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_updatedAt.Value; }
            set { _updatedAt = new InputPropertyInfo { Name = "updatedAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> PublishedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_publishedAt.Value; }
            set { _publishedAt = new InputPropertyInfo { Name = "publishedAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<GrowBadgeFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<GrowBadgeFiltersInput>> And
        {
            get { return (QueryBuilderParameter<ICollection<GrowBadgeFiltersInput>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<GrowBadgeFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<GrowBadgeFiltersInput>> Or
        {
            get { return (QueryBuilderParameter<ICollection<GrowBadgeFiltersInput>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<GrowBadgeFiltersInput>))]
        #endif
        public QueryBuilderParameter<GrowBadgeFiltersInput> Not
        {
            get { return (QueryBuilderParameter<GrowBadgeFiltersInput>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_documentId.Name != null) yield return _documentId;
            if (_name.Name != null) yield return _name;
            if (_backgroundColor.Name != null) yield return _backgroundColor;
            if (_tooltipText.Name != null) yield return _tooltipText;
            if (_color.Name != null) yield return _color;
            if (_createdAt.Name != null) yield return _createdAt;
            if (_updatedAt.Name != null) yield return _updatedAt;
            if (_publishedAt.Name != null) yield return _publishedAt;
            if (_and.Name != null) yield return _and;
            if (_or.Name != null) yield return _or;
            if (_not.Name != null) yield return _not;
        }
    }

    public partial class GrowBadgeInput : IGraphQlInputObject
    {
        private InputPropertyInfo _name;
        private InputPropertyInfo _backgroundColor;
        private InputPropertyInfo _tooltipText;
        private InputPropertyInfo _color;
        private InputPropertyInfo _publishedAt;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Name
        {
            get { return (QueryBuilderParameter<string>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "Name", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> BackgroundColor
        {
            get { return (QueryBuilderParameter<string>)_backgroundColor.Value; }
            set { _backgroundColor = new InputPropertyInfo { Name = "BackgroundColor", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TooltipText
        {
            get { return (QueryBuilderParameter<string>)_tooltipText.Value; }
            set { _tooltipText = new InputPropertyInfo { Name = "TooltipText", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Color
        {
            get { return (QueryBuilderParameter<string>)_color.Value; }
            set { _color = new InputPropertyInfo { Name = "Color", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTime?>))]
        #endif
        public QueryBuilderParameter<DateTime?> PublishedAt
        {
            get { return (QueryBuilderParameter<DateTime?>)_publishedAt.Value; }
            set { _publishedAt = new InputPropertyInfo { Name = "publishedAt", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_name.Name != null) yield return _name;
            if (_backgroundColor.Name != null) yield return _backgroundColor;
            if (_tooltipText.Name != null) yield return _tooltipText;
            if (_color.Name != null) yield return _color;
            if (_publishedAt.Name != null) yield return _publishedAt;
        }
    }

    public partial class HeaderInput : IGraphQlInputObject
    {
        private InputPropertyInfo _headerList;
        private InputPropertyInfo _publishedAt;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ComponentHeaderSimpleUrlHeaderSimpleUrlInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<ComponentHeaderSimpleUrlHeaderSimpleUrlInput>> HeaderList
        {
            get { return (QueryBuilderParameter<ICollection<ComponentHeaderSimpleUrlHeaderSimpleUrlInput>>)_headerList.Value; }
            set { _headerList = new InputPropertyInfo { Name = "HeaderList", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTime?>))]
        #endif
        public QueryBuilderParameter<DateTime?> PublishedAt
        {
            get { return (QueryBuilderParameter<DateTime?>)_publishedAt.Value; }
            set { _publishedAt = new InputPropertyInfo { Name = "publishedAt", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_headerList.Name != null) yield return _headerList;
            if (_publishedAt.Name != null) yield return _publishedAt;
        }
    }

    public partial class IdoBadgeFiltersInput : IGraphQlInputObject
    {
        private InputPropertyInfo _documentId;
        private InputPropertyInfo _name;
        private InputPropertyInfo _explainText;
        private InputPropertyInfo _colorCode;
        private InputPropertyInfo _createdAt;
        private InputPropertyInfo _updatedAt;
        private InputPropertyInfo _publishedAt;
        private InputPropertyInfo _and;
        private InputPropertyInfo _or;
        private InputPropertyInfo _not;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterInput>))]
        #endif
        public QueryBuilderParameter<IdFilterInput> DocumentId
        {
            get { return (QueryBuilderParameter<IdFilterInput>)_documentId.Value; }
            set { _documentId = new InputPropertyInfo { Name = "documentId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Name
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "Name", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> ExplainText
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_explainText.Value; }
            set { _explainText = new InputPropertyInfo { Name = "ExplainText", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> ColorCode
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_colorCode.Value; }
            set { _colorCode = new InputPropertyInfo { Name = "ColorCode", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> CreatedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_createdAt.Value; }
            set { _createdAt = new InputPropertyInfo { Name = "createdAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> UpdatedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_updatedAt.Value; }
            set { _updatedAt = new InputPropertyInfo { Name = "updatedAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> PublishedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_publishedAt.Value; }
            set { _publishedAt = new InputPropertyInfo { Name = "publishedAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<IdoBadgeFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<IdoBadgeFiltersInput>> And
        {
            get { return (QueryBuilderParameter<ICollection<IdoBadgeFiltersInput>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<IdoBadgeFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<IdoBadgeFiltersInput>> Or
        {
            get { return (QueryBuilderParameter<ICollection<IdoBadgeFiltersInput>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdoBadgeFiltersInput>))]
        #endif
        public QueryBuilderParameter<IdoBadgeFiltersInput> Not
        {
            get { return (QueryBuilderParameter<IdoBadgeFiltersInput>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_documentId.Name != null) yield return _documentId;
            if (_name.Name != null) yield return _name;
            if (_explainText.Name != null) yield return _explainText;
            if (_colorCode.Name != null) yield return _colorCode;
            if (_createdAt.Name != null) yield return _createdAt;
            if (_updatedAt.Name != null) yield return _updatedAt;
            if (_publishedAt.Name != null) yield return _publishedAt;
            if (_and.Name != null) yield return _and;
            if (_or.Name != null) yield return _or;
            if (_not.Name != null) yield return _not;
        }
    }

    public partial class IdoBadgeInput : IGraphQlInputObject
    {
        private InputPropertyInfo _name;
        private InputPropertyInfo _explainText;
        private InputPropertyInfo _colorCode;
        private InputPropertyInfo _publishedAt;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Name
        {
            get { return (QueryBuilderParameter<string>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "Name", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ExplainText
        {
            get { return (QueryBuilderParameter<string>)_explainText.Value; }
            set { _explainText = new InputPropertyInfo { Name = "ExplainText", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ColorCode
        {
            get { return (QueryBuilderParameter<string>)_colorCode.Value; }
            set { _colorCode = new InputPropertyInfo { Name = "ColorCode", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTime?>))]
        #endif
        public QueryBuilderParameter<DateTime?> PublishedAt
        {
            get { return (QueryBuilderParameter<DateTime?>)_publishedAt.Value; }
            set { _publishedAt = new InputPropertyInfo { Name = "publishedAt", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_name.Name != null) yield return _name;
            if (_explainText.Name != null) yield return _explainText;
            if (_colorCode.Name != null) yield return _colorCode;
            if (_publishedAt.Name != null) yield return _publishedAt;
        }
    }

    public partial class IgnoreLeaderBoardWalletFiltersInput : IGraphQlInputObject
    {
        private InputPropertyInfo _documentId;
        private InputPropertyInfo _wallet;
        private InputPropertyInfo _reason;
        private InputPropertyInfo _createdAt;
        private InputPropertyInfo _updatedAt;
        private InputPropertyInfo _publishedAt;
        private InputPropertyInfo _and;
        private InputPropertyInfo _or;
        private InputPropertyInfo _not;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterInput>))]
        #endif
        public QueryBuilderParameter<IdFilterInput> DocumentId
        {
            get { return (QueryBuilderParameter<IdFilterInput>)_documentId.Value; }
            set { _documentId = new InputPropertyInfo { Name = "documentId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Wallet
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_wallet.Value; }
            set { _wallet = new InputPropertyInfo { Name = "Wallet", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Reason
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_reason.Value; }
            set { _reason = new InputPropertyInfo { Name = "Reason", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> CreatedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_createdAt.Value; }
            set { _createdAt = new InputPropertyInfo { Name = "createdAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> UpdatedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_updatedAt.Value; }
            set { _updatedAt = new InputPropertyInfo { Name = "updatedAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> PublishedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_publishedAt.Value; }
            set { _publishedAt = new InputPropertyInfo { Name = "publishedAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<IgnoreLeaderBoardWalletFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<IgnoreLeaderBoardWalletFiltersInput>> And
        {
            get { return (QueryBuilderParameter<ICollection<IgnoreLeaderBoardWalletFiltersInput>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<IgnoreLeaderBoardWalletFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<IgnoreLeaderBoardWalletFiltersInput>> Or
        {
            get { return (QueryBuilderParameter<ICollection<IgnoreLeaderBoardWalletFiltersInput>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IgnoreLeaderBoardWalletFiltersInput>))]
        #endif
        public QueryBuilderParameter<IgnoreLeaderBoardWalletFiltersInput> Not
        {
            get { return (QueryBuilderParameter<IgnoreLeaderBoardWalletFiltersInput>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_documentId.Name != null) yield return _documentId;
            if (_wallet.Name != null) yield return _wallet;
            if (_reason.Name != null) yield return _reason;
            if (_createdAt.Name != null) yield return _createdAt;
            if (_updatedAt.Name != null) yield return _updatedAt;
            if (_publishedAt.Name != null) yield return _publishedAt;
            if (_and.Name != null) yield return _and;
            if (_or.Name != null) yield return _or;
            if (_not.Name != null) yield return _not;
        }
    }

    public partial class IgnoreLeaderBoardWalletInput : IGraphQlInputObject
    {
        private InputPropertyInfo _wallet;
        private InputPropertyInfo _reason;
        private InputPropertyInfo _publishedAt;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Wallet
        {
            get { return (QueryBuilderParameter<string>)_wallet.Value; }
            set { _wallet = new InputPropertyInfo { Name = "Wallet", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Reason
        {
            get { return (QueryBuilderParameter<string>)_reason.Value; }
            set { _reason = new InputPropertyInfo { Name = "Reason", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTime?>))]
        #endif
        public QueryBuilderParameter<DateTime?> PublishedAt
        {
            get { return (QueryBuilderParameter<DateTime?>)_publishedAt.Value; }
            set { _publishedAt = new InputPropertyInfo { Name = "publishedAt", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_wallet.Name != null) yield return _wallet;
            if (_reason.Name != null) yield return _reason;
            if (_publishedAt.Name != null) yield return _publishedAt;
        }
    }

    public partial class InvestTermInput : IGraphQlInputObject
    {
        private InputPropertyInfo _value;
        private InputPropertyInfo _publishedAt;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Value
        {
            get { return (QueryBuilderParameter<string>)_value.Value; }
            set { _value = new InputPropertyInfo { Name = "Value", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTime?>))]
        #endif
        public QueryBuilderParameter<DateTime?> PublishedAt
        {
            get { return (QueryBuilderParameter<DateTime?>)_publishedAt.Value; }
            set { _publishedAt = new InputPropertyInfo { Name = "publishedAt", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_value.Name != null) yield return _value;
            if (_publishedAt.Name != null) yield return _publishedAt;
        }
    }

    public partial class InvestorFiltersInput : IGraphQlInputObject
    {
        private InputPropertyInfo _documentId;
        private InputPropertyInfo _name;
        private InputPropertyInfo _createdAt;
        private InputPropertyInfo _updatedAt;
        private InputPropertyInfo _publishedAt;
        private InputPropertyInfo _and;
        private InputPropertyInfo _or;
        private InputPropertyInfo _not;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterInput>))]
        #endif
        public QueryBuilderParameter<IdFilterInput> DocumentId
        {
            get { return (QueryBuilderParameter<IdFilterInput>)_documentId.Value; }
            set { _documentId = new InputPropertyInfo { Name = "documentId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Name
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "Name", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> CreatedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_createdAt.Value; }
            set { _createdAt = new InputPropertyInfo { Name = "createdAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> UpdatedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_updatedAt.Value; }
            set { _updatedAt = new InputPropertyInfo { Name = "updatedAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> PublishedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_publishedAt.Value; }
            set { _publishedAt = new InputPropertyInfo { Name = "publishedAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<InvestorFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<InvestorFiltersInput>> And
        {
            get { return (QueryBuilderParameter<ICollection<InvestorFiltersInput>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<InvestorFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<InvestorFiltersInput>> Or
        {
            get { return (QueryBuilderParameter<ICollection<InvestorFiltersInput>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<InvestorFiltersInput>))]
        #endif
        public QueryBuilderParameter<InvestorFiltersInput> Not
        {
            get { return (QueryBuilderParameter<InvestorFiltersInput>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_documentId.Name != null) yield return _documentId;
            if (_name.Name != null) yield return _name;
            if (_createdAt.Name != null) yield return _createdAt;
            if (_updatedAt.Name != null) yield return _updatedAt;
            if (_publishedAt.Name != null) yield return _publishedAt;
            if (_and.Name != null) yield return _and;
            if (_or.Name != null) yield return _or;
            if (_not.Name != null) yield return _not;
        }
    }

    public partial class InvestorInput : IGraphQlInputObject
    {
        private InputPropertyInfo _name;
        private InputPropertyInfo _icon;
        private InputPropertyInfo _publishedAt;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Name
        {
            get { return (QueryBuilderParameter<string>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "Name", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Icon
        {
            get { return (QueryBuilderParameter<string>)_icon.Value; }
            set { _icon = new InputPropertyInfo { Name = "Icon", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTime?>))]
        #endif
        public QueryBuilderParameter<DateTime?> PublishedAt
        {
            get { return (QueryBuilderParameter<DateTime?>)_publishedAt.Value; }
            set { _publishedAt = new InputPropertyInfo { Name = "publishedAt", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_name.Name != null) yield return _name;
            if (_icon.Name != null) yield return _icon;
            if (_publishedAt.Name != null) yield return _publishedAt;
        }
    }

    public partial class LatestTypeInput : IGraphQlInputObject
    {
        private InputPropertyInfo _version;
        private InputPropertyInfo _publishedAt;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ComponentVersionVersionInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<ComponentVersionVersionInput>> Version
        {
            get { return (QueryBuilderParameter<ICollection<ComponentVersionVersionInput>>)_version.Value; }
            set { _version = new InputPropertyInfo { Name = "Version", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTime?>))]
        #endif
        public QueryBuilderParameter<DateTime?> PublishedAt
        {
            get { return (QueryBuilderParameter<DateTime?>)_publishedAt.Value; }
            set { _publishedAt = new InputPropertyInfo { Name = "publishedAt", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_version.Name != null) yield return _version;
            if (_publishedAt.Name != null) yield return _publishedAt;
        }
    }

    public partial class LinkTypeFiltersInput : IGraphQlInputObject
    {
        private InputPropertyInfo _documentId;
        private InputPropertyInfo _name;
        private InputPropertyInfo _isOnTop;
        private InputPropertyInfo _createdAt;
        private InputPropertyInfo _updatedAt;
        private InputPropertyInfo _publishedAt;
        private InputPropertyInfo _and;
        private InputPropertyInfo _or;
        private InputPropertyInfo _not;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterInput>))]
        #endif
        public QueryBuilderParameter<IdFilterInput> DocumentId
        {
            get { return (QueryBuilderParameter<IdFilterInput>)_documentId.Value; }
            set { _documentId = new InputPropertyInfo { Name = "documentId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Name
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "Name", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<BooleanFilterInput>))]
        #endif
        public QueryBuilderParameter<BooleanFilterInput> IsOnTop
        {
            get { return (QueryBuilderParameter<BooleanFilterInput>)_isOnTop.Value; }
            set { _isOnTop = new InputPropertyInfo { Name = "IsOnTop", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> CreatedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_createdAt.Value; }
            set { _createdAt = new InputPropertyInfo { Name = "createdAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> UpdatedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_updatedAt.Value; }
            set { _updatedAt = new InputPropertyInfo { Name = "updatedAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> PublishedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_publishedAt.Value; }
            set { _publishedAt = new InputPropertyInfo { Name = "publishedAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<LinkTypeFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<LinkTypeFiltersInput>> And
        {
            get { return (QueryBuilderParameter<ICollection<LinkTypeFiltersInput>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<LinkTypeFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<LinkTypeFiltersInput>> Or
        {
            get { return (QueryBuilderParameter<ICollection<LinkTypeFiltersInput>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<LinkTypeFiltersInput>))]
        #endif
        public QueryBuilderParameter<LinkTypeFiltersInput> Not
        {
            get { return (QueryBuilderParameter<LinkTypeFiltersInput>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_documentId.Name != null) yield return _documentId;
            if (_name.Name != null) yield return _name;
            if (_isOnTop.Name != null) yield return _isOnTop;
            if (_createdAt.Name != null) yield return _createdAt;
            if (_updatedAt.Name != null) yield return _updatedAt;
            if (_publishedAt.Name != null) yield return _publishedAt;
            if (_and.Name != null) yield return _and;
            if (_or.Name != null) yield return _or;
            if (_not.Name != null) yield return _not;
        }
    }

    public partial class LinkTypeInput : IGraphQlInputObject
    {
        private InputPropertyInfo _name;
        private InputPropertyInfo _isOnTop;
        private InputPropertyInfo _darkIcon;
        private InputPropertyInfo _lightIcon;
        private InputPropertyInfo _publishedAt;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Name
        {
            get { return (QueryBuilderParameter<string>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "Name", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsOnTop
        {
            get { return (QueryBuilderParameter<bool?>)_isOnTop.Value; }
            set { _isOnTop = new InputPropertyInfo { Name = "IsOnTop", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> DarkIcon
        {
            get { return (QueryBuilderParameter<string>)_darkIcon.Value; }
            set { _darkIcon = new InputPropertyInfo { Name = "DarkIcon", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> LightIcon
        {
            get { return (QueryBuilderParameter<string>)_lightIcon.Value; }
            set { _lightIcon = new InputPropertyInfo { Name = "LightIcon", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTime?>))]
        #endif
        public QueryBuilderParameter<DateTime?> PublishedAt
        {
            get { return (QueryBuilderParameter<DateTime?>)_publishedAt.Value; }
            set { _publishedAt = new InputPropertyInfo { Name = "publishedAt", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_name.Name != null) yield return _name;
            if (_isOnTop.Name != null) yield return _isOnTop;
            if (_darkIcon.Name != null) yield return _darkIcon;
            if (_lightIcon.Name != null) yield return _lightIcon;
            if (_publishedAt.Name != null) yield return _publishedAt;
        }
    }

    public partial class LockPoolzTermInput : IGraphQlInputObject
    {
        private InputPropertyInfo _value;
        private InputPropertyInfo _publishedAt;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Value
        {
            get { return (QueryBuilderParameter<string>)_value.Value; }
            set { _value = new InputPropertyInfo { Name = "Value", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTime?>))]
        #endif
        public QueryBuilderParameter<DateTime?> PublishedAt
        {
            get { return (QueryBuilderParameter<DateTime?>)_publishedAt.Value; }
            set { _publishedAt = new InputPropertyInfo { Name = "publishedAt", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_value.Name != null) yield return _value;
            if (_publishedAt.Name != null) yield return _publishedAt;
        }
    }

    public partial class LockTokenWhitelistFiltersInput : IGraphQlInputObject
    {
        private InputPropertyInfo _documentId;
        private InputPropertyInfo _name;
        private InputPropertyInfo _address;
        private InputPropertyInfo _type;
        private InputPropertyInfo _chainSettings;
        private InputPropertyInfo _createdAt;
        private InputPropertyInfo _updatedAt;
        private InputPropertyInfo _publishedAt;
        private InputPropertyInfo _and;
        private InputPropertyInfo _or;
        private InputPropertyInfo _not;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterInput>))]
        #endif
        public QueryBuilderParameter<IdFilterInput> DocumentId
        {
            get { return (QueryBuilderParameter<IdFilterInput>)_documentId.Value; }
            set { _documentId = new InputPropertyInfo { Name = "documentId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Name
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "Name", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Address
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_address.Value; }
            set { _address = new InputPropertyInfo { Name = "Address", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Type
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_type.Value; }
            set { _type = new InputPropertyInfo { Name = "Type", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("chain_settings")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ChainSettingFiltersInput>))]
        #endif
        public QueryBuilderParameter<ChainSettingFiltersInput> ChainSettings
        {
            get { return (QueryBuilderParameter<ChainSettingFiltersInput>)_chainSettings.Value; }
            set { _chainSettings = new InputPropertyInfo { Name = "chain_settings", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> CreatedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_createdAt.Value; }
            set { _createdAt = new InputPropertyInfo { Name = "createdAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> UpdatedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_updatedAt.Value; }
            set { _updatedAt = new InputPropertyInfo { Name = "updatedAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> PublishedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_publishedAt.Value; }
            set { _publishedAt = new InputPropertyInfo { Name = "publishedAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<LockTokenWhitelistFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<LockTokenWhitelistFiltersInput>> And
        {
            get { return (QueryBuilderParameter<ICollection<LockTokenWhitelistFiltersInput>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<LockTokenWhitelistFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<LockTokenWhitelistFiltersInput>> Or
        {
            get { return (QueryBuilderParameter<ICollection<LockTokenWhitelistFiltersInput>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<LockTokenWhitelistFiltersInput>))]
        #endif
        public QueryBuilderParameter<LockTokenWhitelistFiltersInput> Not
        {
            get { return (QueryBuilderParameter<LockTokenWhitelistFiltersInput>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_documentId.Name != null) yield return _documentId;
            if (_name.Name != null) yield return _name;
            if (_address.Name != null) yield return _address;
            if (_type.Name != null) yield return _type;
            if (_chainSettings.Name != null) yield return _chainSettings;
            if (_createdAt.Name != null) yield return _createdAt;
            if (_updatedAt.Name != null) yield return _updatedAt;
            if (_publishedAt.Name != null) yield return _publishedAt;
            if (_and.Name != null) yield return _and;
            if (_or.Name != null) yield return _or;
            if (_not.Name != null) yield return _not;
        }
    }

    public partial class LockTokenWhitelistInput : IGraphQlInputObject
    {
        private InputPropertyInfo _name;
        private InputPropertyInfo _address;
        private InputPropertyInfo _type;
        private InputPropertyInfo _chainSettings;
        private InputPropertyInfo _publishedAt;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Name
        {
            get { return (QueryBuilderParameter<string>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "Name", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Address
        {
            get { return (QueryBuilderParameter<string>)_address.Value; }
            set { _address = new InputPropertyInfo { Name = "Address", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<EnumLocktokenwhitelistType?>))]
        #endif
        public QueryBuilderParameter<EnumLocktokenwhitelistType?> Type
        {
            get { return (QueryBuilderParameter<EnumLocktokenwhitelistType?>)_type.Value; }
            set { _type = new InputPropertyInfo { Name = "Type", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("chain_settings")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
        #endif
        public QueryBuilderParameter<ICollection<string>> ChainSettings
        {
            get { return (QueryBuilderParameter<ICollection<string>>)_chainSettings.Value; }
            set { _chainSettings = new InputPropertyInfo { Name = "chain_settings", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTime?>))]
        #endif
        public QueryBuilderParameter<DateTime?> PublishedAt
        {
            get { return (QueryBuilderParameter<DateTime?>)_publishedAt.Value; }
            set { _publishedAt = new InputPropertyInfo { Name = "publishedAt", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_name.Name != null) yield return _name;
            if (_address.Name != null) yield return _address;
            if (_type.Name != null) yield return _type;
            if (_chainSettings.Name != null) yield return _chainSettings;
            if (_publishedAt.Name != null) yield return _publishedAt;
        }
    }

    public partial class MainInput : IGraphQlInputObject
    {
        private InputPropertyInfo _sections;
        private InputPropertyInfo _publishedAt;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ComponentSectionSectionInput>))]
        #endif
        public QueryBuilderParameter<ComponentSectionSectionInput> Sections
        {
            get { return (QueryBuilderParameter<ComponentSectionSectionInput>)_sections.Value; }
            set { _sections = new InputPropertyInfo { Name = "sections", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTime?>))]
        #endif
        public QueryBuilderParameter<DateTime?> PublishedAt
        {
            get { return (QueryBuilderParameter<DateTime?>)_publishedAt.Value; }
            set { _publishedAt = new InputPropertyInfo { Name = "publishedAt", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_sections.Name != null) yield return _sections;
            if (_publishedAt.Name != null) yield return _publishedAt;
        }
    }

    public partial class MarketCapBadgeFiltersInput : IGraphQlInputObject
    {
        private InputPropertyInfo _documentId;
        private InputPropertyInfo _link;
        private InputPropertyInfo _createdAt;
        private InputPropertyInfo _updatedAt;
        private InputPropertyInfo _publishedAt;
        private InputPropertyInfo _and;
        private InputPropertyInfo _or;
        private InputPropertyInfo _not;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterInput>))]
        #endif
        public QueryBuilderParameter<IdFilterInput> DocumentId
        {
            get { return (QueryBuilderParameter<IdFilterInput>)_documentId.Value; }
            set { _documentId = new InputPropertyInfo { Name = "documentId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Link
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_link.Value; }
            set { _link = new InputPropertyInfo { Name = "Link", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> CreatedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_createdAt.Value; }
            set { _createdAt = new InputPropertyInfo { Name = "createdAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> UpdatedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_updatedAt.Value; }
            set { _updatedAt = new InputPropertyInfo { Name = "updatedAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> PublishedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_publishedAt.Value; }
            set { _publishedAt = new InputPropertyInfo { Name = "publishedAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<MarketCapBadgeFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<MarketCapBadgeFiltersInput>> And
        {
            get { return (QueryBuilderParameter<ICollection<MarketCapBadgeFiltersInput>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<MarketCapBadgeFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<MarketCapBadgeFiltersInput>> Or
        {
            get { return (QueryBuilderParameter<ICollection<MarketCapBadgeFiltersInput>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<MarketCapBadgeFiltersInput>))]
        #endif
        public QueryBuilderParameter<MarketCapBadgeFiltersInput> Not
        {
            get { return (QueryBuilderParameter<MarketCapBadgeFiltersInput>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_documentId.Name != null) yield return _documentId;
            if (_link.Name != null) yield return _link;
            if (_createdAt.Name != null) yield return _createdAt;
            if (_updatedAt.Name != null) yield return _updatedAt;
            if (_publishedAt.Name != null) yield return _publishedAt;
            if (_and.Name != null) yield return _and;
            if (_or.Name != null) yield return _or;
            if (_not.Name != null) yield return _not;
        }
    }

    public partial class MarketCapBadgeInput : IGraphQlInputObject
    {
        private InputPropertyInfo _link;
        private InputPropertyInfo _icon;
        private InputPropertyInfo _publishedAt;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Link
        {
            get { return (QueryBuilderParameter<string>)_link.Value; }
            set { _link = new InputPropertyInfo { Name = "Link", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Icon
        {
            get { return (QueryBuilderParameter<string>)_icon.Value; }
            set { _icon = new InputPropertyInfo { Name = "icon", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTime?>))]
        #endif
        public QueryBuilderParameter<DateTime?> PublishedAt
        {
            get { return (QueryBuilderParameter<DateTime?>)_publishedAt.Value; }
            set { _publishedAt = new InputPropertyInfo { Name = "publishedAt", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_link.Name != null) yield return _link;
            if (_icon.Name != null) yield return _icon;
            if (_publishedAt.Name != null) yield return _publishedAt;
        }
    }

    public partial class MediaKitFiltersInput : IGraphQlInputObject
    {
        private InputPropertyInfo _documentId;
        private InputPropertyInfo _name;
        private InputPropertyInfo _text;
        private InputPropertyInfo _link;
        private InputPropertyInfo _createdAt;
        private InputPropertyInfo _updatedAt;
        private InputPropertyInfo _publishedAt;
        private InputPropertyInfo _and;
        private InputPropertyInfo _or;
        private InputPropertyInfo _not;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterInput>))]
        #endif
        public QueryBuilderParameter<IdFilterInput> DocumentId
        {
            get { return (QueryBuilderParameter<IdFilterInput>)_documentId.Value; }
            set { _documentId = new InputPropertyInfo { Name = "documentId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Name
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "Name", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Text
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_text.Value; }
            set { _text = new InputPropertyInfo { Name = "Text", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ComponentDictionaryLinksFiltersInput>))]
        #endif
        public QueryBuilderParameter<ComponentDictionaryLinksFiltersInput> Link
        {
            get { return (QueryBuilderParameter<ComponentDictionaryLinksFiltersInput>)_link.Value; }
            set { _link = new InputPropertyInfo { Name = "Link", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> CreatedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_createdAt.Value; }
            set { _createdAt = new InputPropertyInfo { Name = "createdAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> UpdatedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_updatedAt.Value; }
            set { _updatedAt = new InputPropertyInfo { Name = "updatedAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> PublishedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_publishedAt.Value; }
            set { _publishedAt = new InputPropertyInfo { Name = "publishedAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<MediaKitFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<MediaKitFiltersInput>> And
        {
            get { return (QueryBuilderParameter<ICollection<MediaKitFiltersInput>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<MediaKitFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<MediaKitFiltersInput>> Or
        {
            get { return (QueryBuilderParameter<ICollection<MediaKitFiltersInput>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<MediaKitFiltersInput>))]
        #endif
        public QueryBuilderParameter<MediaKitFiltersInput> Not
        {
            get { return (QueryBuilderParameter<MediaKitFiltersInput>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_documentId.Name != null) yield return _documentId;
            if (_name.Name != null) yield return _name;
            if (_text.Name != null) yield return _text;
            if (_link.Name != null) yield return _link;
            if (_createdAt.Name != null) yield return _createdAt;
            if (_updatedAt.Name != null) yield return _updatedAt;
            if (_publishedAt.Name != null) yield return _publishedAt;
            if (_and.Name != null) yield return _and;
            if (_or.Name != null) yield return _or;
            if (_not.Name != null) yield return _not;
        }
    }

    public partial class MediaKitInput : IGraphQlInputObject
    {
        private InputPropertyInfo _name;
        private InputPropertyInfo _text;
        private InputPropertyInfo _link;
        private InputPropertyInfo _publishedAt;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Name
        {
            get { return (QueryBuilderParameter<string>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "Name", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Text
        {
            get { return (QueryBuilderParameter<string>)_text.Value; }
            set { _text = new InputPropertyInfo { Name = "Text", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ComponentDictionaryLinksInput>))]
        #endif
        public QueryBuilderParameter<ComponentDictionaryLinksInput> Link
        {
            get { return (QueryBuilderParameter<ComponentDictionaryLinksInput>)_link.Value; }
            set { _link = new InputPropertyInfo { Name = "Link", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTime?>))]
        #endif
        public QueryBuilderParameter<DateTime?> PublishedAt
        {
            get { return (QueryBuilderParameter<DateTime?>)_publishedAt.Value; }
            set { _publishedAt = new InputPropertyInfo { Name = "publishedAt", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_name.Name != null) yield return _name;
            if (_text.Name != null) yield return _text;
            if (_link.Name != null) yield return _link;
            if (_publishedAt.Name != null) yield return _publishedAt;
        }
    }

    public partial class NonEvmChainFiltersInput : IGraphQlInputObject
    {
        private InputPropertyInfo _documentId;
        private InputPropertyInfo _displayText;
        private InputPropertyInfo _regex;
        private InputPropertyInfo _createdAt;
        private InputPropertyInfo _updatedAt;
        private InputPropertyInfo _publishedAt;
        private InputPropertyInfo _and;
        private InputPropertyInfo _or;
        private InputPropertyInfo _not;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterInput>))]
        #endif
        public QueryBuilderParameter<IdFilterInput> DocumentId
        {
            get { return (QueryBuilderParameter<IdFilterInput>)_documentId.Value; }
            set { _documentId = new InputPropertyInfo { Name = "documentId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> DisplayText
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_displayText.Value; }
            set { _displayText = new InputPropertyInfo { Name = "DisplayText", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Regex
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_regex.Value; }
            set { _regex = new InputPropertyInfo { Name = "Regex", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> CreatedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_createdAt.Value; }
            set { _createdAt = new InputPropertyInfo { Name = "createdAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> UpdatedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_updatedAt.Value; }
            set { _updatedAt = new InputPropertyInfo { Name = "updatedAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> PublishedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_publishedAt.Value; }
            set { _publishedAt = new InputPropertyInfo { Name = "publishedAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<NonEvmChainFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<NonEvmChainFiltersInput>> And
        {
            get { return (QueryBuilderParameter<ICollection<NonEvmChainFiltersInput>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<NonEvmChainFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<NonEvmChainFiltersInput>> Or
        {
            get { return (QueryBuilderParameter<ICollection<NonEvmChainFiltersInput>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<NonEvmChainFiltersInput>))]
        #endif
        public QueryBuilderParameter<NonEvmChainFiltersInput> Not
        {
            get { return (QueryBuilderParameter<NonEvmChainFiltersInput>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_documentId.Name != null) yield return _documentId;
            if (_displayText.Name != null) yield return _displayText;
            if (_regex.Name != null) yield return _regex;
            if (_createdAt.Name != null) yield return _createdAt;
            if (_updatedAt.Name != null) yield return _updatedAt;
            if (_publishedAt.Name != null) yield return _publishedAt;
            if (_and.Name != null) yield return _and;
            if (_or.Name != null) yield return _or;
            if (_not.Name != null) yield return _not;
        }
    }

    public partial class NonEvmChainInput : IGraphQlInputObject
    {
        private InputPropertyInfo _icon;
        private InputPropertyInfo _displayText;
        private InputPropertyInfo _regex;
        private InputPropertyInfo _publishedAt;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Icon
        {
            get { return (QueryBuilderParameter<string>)_icon.Value; }
            set { _icon = new InputPropertyInfo { Name = "Icon", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> DisplayText
        {
            get { return (QueryBuilderParameter<string>)_displayText.Value; }
            set { _displayText = new InputPropertyInfo { Name = "DisplayText", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Regex
        {
            get { return (QueryBuilderParameter<string>)_regex.Value; }
            set { _regex = new InputPropertyInfo { Name = "Regex", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTime?>))]
        #endif
        public QueryBuilderParameter<DateTime?> PublishedAt
        {
            get { return (QueryBuilderParameter<DateTime?>)_publishedAt.Value; }
            set { _publishedAt = new InputPropertyInfo { Name = "publishedAt", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_icon.Name != null) yield return _icon;
            if (_displayText.Name != null) yield return _displayText;
            if (_regex.Name != null) yield return _regex;
            if (_publishedAt.Name != null) yield return _publishedAt;
        }
    }

    public partial class OpenGrantFiltersInput : IGraphQlInputObject
    {
        private InputPropertyInfo _documentId;
        private InputPropertyInfo _name;
        private InputPropertyInfo _text;
        private InputPropertyInfo _link;
        private InputPropertyInfo _createdAt;
        private InputPropertyInfo _updatedAt;
        private InputPropertyInfo _publishedAt;
        private InputPropertyInfo _and;
        private InputPropertyInfo _or;
        private InputPropertyInfo _not;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterInput>))]
        #endif
        public QueryBuilderParameter<IdFilterInput> DocumentId
        {
            get { return (QueryBuilderParameter<IdFilterInput>)_documentId.Value; }
            set { _documentId = new InputPropertyInfo { Name = "documentId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Name
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "Name", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Text
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_text.Value; }
            set { _text = new InputPropertyInfo { Name = "Text", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Link
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_link.Value; }
            set { _link = new InputPropertyInfo { Name = "Link", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> CreatedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_createdAt.Value; }
            set { _createdAt = new InputPropertyInfo { Name = "createdAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> UpdatedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_updatedAt.Value; }
            set { _updatedAt = new InputPropertyInfo { Name = "updatedAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> PublishedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_publishedAt.Value; }
            set { _publishedAt = new InputPropertyInfo { Name = "publishedAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<OpenGrantFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<OpenGrantFiltersInput>> And
        {
            get { return (QueryBuilderParameter<ICollection<OpenGrantFiltersInput>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<OpenGrantFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<OpenGrantFiltersInput>> Or
        {
            get { return (QueryBuilderParameter<ICollection<OpenGrantFiltersInput>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<OpenGrantFiltersInput>))]
        #endif
        public QueryBuilderParameter<OpenGrantFiltersInput> Not
        {
            get { return (QueryBuilderParameter<OpenGrantFiltersInput>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_documentId.Name != null) yield return _documentId;
            if (_name.Name != null) yield return _name;
            if (_text.Name != null) yield return _text;
            if (_link.Name != null) yield return _link;
            if (_createdAt.Name != null) yield return _createdAt;
            if (_updatedAt.Name != null) yield return _updatedAt;
            if (_publishedAt.Name != null) yield return _publishedAt;
            if (_and.Name != null) yield return _and;
            if (_or.Name != null) yield return _or;
            if (_not.Name != null) yield return _not;
        }
    }

    public partial class OpenGrantInput : IGraphQlInputObject
    {
        private InputPropertyInfo _name;
        private InputPropertyInfo _text;
        private InputPropertyInfo _link;
        private InputPropertyInfo _icon;
        private InputPropertyInfo _publishedAt;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Name
        {
            get { return (QueryBuilderParameter<string>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "Name", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Text
        {
            get { return (QueryBuilderParameter<string>)_text.Value; }
            set { _text = new InputPropertyInfo { Name = "Text", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Link
        {
            get { return (QueryBuilderParameter<string>)_link.Value; }
            set { _link = new InputPropertyInfo { Name = "Link", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Icon
        {
            get { return (QueryBuilderParameter<string>)_icon.Value; }
            set { _icon = new InputPropertyInfo { Name = "icon", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTime?>))]
        #endif
        public QueryBuilderParameter<DateTime?> PublishedAt
        {
            get { return (QueryBuilderParameter<DateTime?>)_publishedAt.Value; }
            set { _publishedAt = new InputPropertyInfo { Name = "publishedAt", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_name.Name != null) yield return _name;
            if (_text.Name != null) yield return _text;
            if (_link.Name != null) yield return _link;
            if (_icon.Name != null) yield return _icon;
            if (_publishedAt.Name != null) yield return _publishedAt;
        }
    }

    public partial class OurPartnerFiltersInput : IGraphQlInputObject
    {
        private InputPropertyInfo _documentId;
        private InputPropertyInfo _name;
        private InputPropertyInfo _createdAt;
        private InputPropertyInfo _updatedAt;
        private InputPropertyInfo _publishedAt;
        private InputPropertyInfo _and;
        private InputPropertyInfo _or;
        private InputPropertyInfo _not;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterInput>))]
        #endif
        public QueryBuilderParameter<IdFilterInput> DocumentId
        {
            get { return (QueryBuilderParameter<IdFilterInput>)_documentId.Value; }
            set { _documentId = new InputPropertyInfo { Name = "documentId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Name
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "Name", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> CreatedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_createdAt.Value; }
            set { _createdAt = new InputPropertyInfo { Name = "createdAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> UpdatedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_updatedAt.Value; }
            set { _updatedAt = new InputPropertyInfo { Name = "updatedAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> PublishedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_publishedAt.Value; }
            set { _publishedAt = new InputPropertyInfo { Name = "publishedAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<OurPartnerFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<OurPartnerFiltersInput>> And
        {
            get { return (QueryBuilderParameter<ICollection<OurPartnerFiltersInput>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<OurPartnerFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<OurPartnerFiltersInput>> Or
        {
            get { return (QueryBuilderParameter<ICollection<OurPartnerFiltersInput>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<OurPartnerFiltersInput>))]
        #endif
        public QueryBuilderParameter<OurPartnerFiltersInput> Not
        {
            get { return (QueryBuilderParameter<OurPartnerFiltersInput>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_documentId.Name != null) yield return _documentId;
            if (_name.Name != null) yield return _name;
            if (_createdAt.Name != null) yield return _createdAt;
            if (_updatedAt.Name != null) yield return _updatedAt;
            if (_publishedAt.Name != null) yield return _publishedAt;
            if (_and.Name != null) yield return _and;
            if (_or.Name != null) yield return _or;
            if (_not.Name != null) yield return _not;
        }
    }

    public partial class OurPartnerInput : IGraphQlInputObject
    {
        private InputPropertyInfo _name;
        private InputPropertyInfo _darkLogo;
        private InputPropertyInfo _publishedAt;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Name
        {
            get { return (QueryBuilderParameter<string>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "Name", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> DarkLogo
        {
            get { return (QueryBuilderParameter<string>)_darkLogo.Value; }
            set { _darkLogo = new InputPropertyInfo { Name = "DarkLogo", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTime?>))]
        #endif
        public QueryBuilderParameter<DateTime?> PublishedAt
        {
            get { return (QueryBuilderParameter<DateTime?>)_publishedAt.Value; }
            set { _publishedAt = new InputPropertyInfo { Name = "publishedAt", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_name.Name != null) yield return _name;
            if (_darkLogo.Name != null) yield return _darkLogo;
            if (_publishedAt.Name != null) yield return _publishedAt;
        }
    }

    public partial class PageInfoFiltersInput : IGraphQlInputObject
    {
        private InputPropertyInfo _documentId;
        private InputPropertyInfo _link;
        private InputPropertyInfo _title;
        private InputPropertyInfo _description;
        private InputPropertyInfo _createdAt;
        private InputPropertyInfo _updatedAt;
        private InputPropertyInfo _publishedAt;
        private InputPropertyInfo _and;
        private InputPropertyInfo _or;
        private InputPropertyInfo _not;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterInput>))]
        #endif
        public QueryBuilderParameter<IdFilterInput> DocumentId
        {
            get { return (QueryBuilderParameter<IdFilterInput>)_documentId.Value; }
            set { _documentId = new InputPropertyInfo { Name = "documentId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Link
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_link.Value; }
            set { _link = new InputPropertyInfo { Name = "Link", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Title
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_title.Value; }
            set { _title = new InputPropertyInfo { Name = "Title", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Description
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_description.Value; }
            set { _description = new InputPropertyInfo { Name = "Description", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> CreatedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_createdAt.Value; }
            set { _createdAt = new InputPropertyInfo { Name = "createdAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> UpdatedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_updatedAt.Value; }
            set { _updatedAt = new InputPropertyInfo { Name = "updatedAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> PublishedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_publishedAt.Value; }
            set { _publishedAt = new InputPropertyInfo { Name = "publishedAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<PageInfoFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<PageInfoFiltersInput>> And
        {
            get { return (QueryBuilderParameter<ICollection<PageInfoFiltersInput>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<PageInfoFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<PageInfoFiltersInput>> Or
        {
            get { return (QueryBuilderParameter<ICollection<PageInfoFiltersInput>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<PageInfoFiltersInput>))]
        #endif
        public QueryBuilderParameter<PageInfoFiltersInput> Not
        {
            get { return (QueryBuilderParameter<PageInfoFiltersInput>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_documentId.Name != null) yield return _documentId;
            if (_link.Name != null) yield return _link;
            if (_title.Name != null) yield return _title;
            if (_description.Name != null) yield return _description;
            if (_createdAt.Name != null) yield return _createdAt;
            if (_updatedAt.Name != null) yield return _updatedAt;
            if (_publishedAt.Name != null) yield return _publishedAt;
            if (_and.Name != null) yield return _and;
            if (_or.Name != null) yield return _or;
            if (_not.Name != null) yield return _not;
        }
    }

    public partial class PageInfoInput : IGraphQlInputObject
    {
        private InputPropertyInfo _link;
        private InputPropertyInfo _title;
        private InputPropertyInfo _description;
        private InputPropertyInfo _publishedAt;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Link
        {
            get { return (QueryBuilderParameter<string>)_link.Value; }
            set { _link = new InputPropertyInfo { Name = "Link", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Title
        {
            get { return (QueryBuilderParameter<string>)_title.Value; }
            set { _title = new InputPropertyInfo { Name = "Title", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Description
        {
            get { return (QueryBuilderParameter<string>)_description.Value; }
            set { _description = new InputPropertyInfo { Name = "Description", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTime?>))]
        #endif
        public QueryBuilderParameter<DateTime?> PublishedAt
        {
            get { return (QueryBuilderParameter<DateTime?>)_publishedAt.Value; }
            set { _publishedAt = new InputPropertyInfo { Name = "publishedAt", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_link.Name != null) yield return _link;
            if (_title.Name != null) yield return _title;
            if (_description.Name != null) yield return _description;
            if (_publishedAt.Name != null) yield return _publishedAt;
        }
    }

    public partial class PoolzBoutiqueFiltersInput : IGraphQlInputObject
    {
        private InputPropertyInfo _documentId;
        private InputPropertyInfo _projectName;
        private InputPropertyInfo _tokenAddress;
        private InputPropertyInfo _chainId;
        private InputPropertyInfo _webSite;
        private InputPropertyInfo _twitter;
        private InputPropertyInfo _telegram;
        private InputPropertyInfo _discord;
        private InputPropertyInfo _color;
        private InputPropertyInfo _createdAt;
        private InputPropertyInfo _updatedAt;
        private InputPropertyInfo _publishedAt;
        private InputPropertyInfo _and;
        private InputPropertyInfo _or;
        private InputPropertyInfo _not;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterInput>))]
        #endif
        public QueryBuilderParameter<IdFilterInput> DocumentId
        {
            get { return (QueryBuilderParameter<IdFilterInput>)_documentId.Value; }
            set { _documentId = new InputPropertyInfo { Name = "documentId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> ProjectName
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_projectName.Value; }
            set { _projectName = new InputPropertyInfo { Name = "projectName", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> TokenAddress
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_tokenAddress.Value; }
            set { _tokenAddress = new InputPropertyInfo { Name = "TokenAddress", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IntFilterInput>))]
        #endif
        public QueryBuilderParameter<IntFilterInput> ChainId
        {
            get { return (QueryBuilderParameter<IntFilterInput>)_chainId.Value; }
            set { _chainId = new InputPropertyInfo { Name = "chainID", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> WebSite
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_webSite.Value; }
            set { _webSite = new InputPropertyInfo { Name = "WebSite", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Twitter
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_twitter.Value; }
            set { _twitter = new InputPropertyInfo { Name = "Twitter", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Telegram
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_telegram.Value; }
            set { _telegram = new InputPropertyInfo { Name = "Telegram", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Discord
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_discord.Value; }
            set { _discord = new InputPropertyInfo { Name = "Discord", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Color
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_color.Value; }
            set { _color = new InputPropertyInfo { Name = "Color", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> CreatedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_createdAt.Value; }
            set { _createdAt = new InputPropertyInfo { Name = "createdAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> UpdatedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_updatedAt.Value; }
            set { _updatedAt = new InputPropertyInfo { Name = "updatedAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> PublishedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_publishedAt.Value; }
            set { _publishedAt = new InputPropertyInfo { Name = "publishedAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<PoolzBoutiqueFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<PoolzBoutiqueFiltersInput>> And
        {
            get { return (QueryBuilderParameter<ICollection<PoolzBoutiqueFiltersInput>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<PoolzBoutiqueFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<PoolzBoutiqueFiltersInput>> Or
        {
            get { return (QueryBuilderParameter<ICollection<PoolzBoutiqueFiltersInput>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<PoolzBoutiqueFiltersInput>))]
        #endif
        public QueryBuilderParameter<PoolzBoutiqueFiltersInput> Not
        {
            get { return (QueryBuilderParameter<PoolzBoutiqueFiltersInput>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_documentId.Name != null) yield return _documentId;
            if (_projectName.Name != null) yield return _projectName;
            if (_tokenAddress.Name != null) yield return _tokenAddress;
            if (_chainId.Name != null) yield return _chainId;
            if (_webSite.Name != null) yield return _webSite;
            if (_twitter.Name != null) yield return _twitter;
            if (_telegram.Name != null) yield return _telegram;
            if (_discord.Name != null) yield return _discord;
            if (_color.Name != null) yield return _color;
            if (_createdAt.Name != null) yield return _createdAt;
            if (_updatedAt.Name != null) yield return _updatedAt;
            if (_publishedAt.Name != null) yield return _publishedAt;
            if (_and.Name != null) yield return _and;
            if (_or.Name != null) yield return _or;
            if (_not.Name != null) yield return _not;
        }
    }

    public partial class PoolzBoutiqueInput : IGraphQlInputObject
    {
        private InputPropertyInfo _projectName;
        private InputPropertyInfo _tokenAddress;
        private InputPropertyInfo _chainId;
        private InputPropertyInfo _logo;
        private InputPropertyInfo _webSite;
        private InputPropertyInfo _twitter;
        private InputPropertyInfo _telegram;
        private InputPropertyInfo _discord;
        private InputPropertyInfo _color;
        private InputPropertyInfo _publishedAt;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ProjectName
        {
            get { return (QueryBuilderParameter<string>)_projectName.Value; }
            set { _projectName = new InputPropertyInfo { Name = "projectName", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> TokenAddress
        {
            get { return (QueryBuilderParameter<string>)_tokenAddress.Value; }
            set { _tokenAddress = new InputPropertyInfo { Name = "TokenAddress", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> ChainId
        {
            get { return (QueryBuilderParameter<int?>)_chainId.Value; }
            set { _chainId = new InputPropertyInfo { Name = "chainID", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Logo
        {
            get { return (QueryBuilderParameter<string>)_logo.Value; }
            set { _logo = new InputPropertyInfo { Name = "Logo", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> WebSite
        {
            get { return (QueryBuilderParameter<string>)_webSite.Value; }
            set { _webSite = new InputPropertyInfo { Name = "WebSite", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Twitter
        {
            get { return (QueryBuilderParameter<string>)_twitter.Value; }
            set { _twitter = new InputPropertyInfo { Name = "Twitter", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Telegram
        {
            get { return (QueryBuilderParameter<string>)_telegram.Value; }
            set { _telegram = new InputPropertyInfo { Name = "Telegram", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Discord
        {
            get { return (QueryBuilderParameter<string>)_discord.Value; }
            set { _discord = new InputPropertyInfo { Name = "Discord", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Color
        {
            get { return (QueryBuilderParameter<string>)_color.Value; }
            set { _color = new InputPropertyInfo { Name = "Color", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTime?>))]
        #endif
        public QueryBuilderParameter<DateTime?> PublishedAt
        {
            get { return (QueryBuilderParameter<DateTime?>)_publishedAt.Value; }
            set { _publishedAt = new InputPropertyInfo { Name = "publishedAt", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_projectName.Name != null) yield return _projectName;
            if (_tokenAddress.Name != null) yield return _tokenAddress;
            if (_chainId.Name != null) yield return _chainId;
            if (_logo.Name != null) yield return _logo;
            if (_webSite.Name != null) yield return _webSite;
            if (_twitter.Name != null) yield return _twitter;
            if (_telegram.Name != null) yield return _telegram;
            if (_discord.Name != null) yield return _discord;
            if (_color.Name != null) yield return _color;
            if (_publishedAt.Name != null) yield return _publishedAt;
        }
    }

    public partial class PragmaVersionFiltersInput : IGraphQlInputObject
    {
        private InputPropertyInfo _documentId;
        private InputPropertyInfo _pragmaVersion;
        private InputPropertyInfo _createdAt;
        private InputPropertyInfo _updatedAt;
        private InputPropertyInfo _publishedAt;
        private InputPropertyInfo _and;
        private InputPropertyInfo _or;
        private InputPropertyInfo _not;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterInput>))]
        #endif
        public QueryBuilderParameter<IdFilterInput> DocumentId
        {
            get { return (QueryBuilderParameter<IdFilterInput>)_documentId.Value; }
            set { _documentId = new InputPropertyInfo { Name = "documentId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> PragmaVersion
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_pragmaVersion.Value; }
            set { _pragmaVersion = new InputPropertyInfo { Name = "PragmaVersion", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> CreatedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_createdAt.Value; }
            set { _createdAt = new InputPropertyInfo { Name = "createdAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> UpdatedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_updatedAt.Value; }
            set { _updatedAt = new InputPropertyInfo { Name = "updatedAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> PublishedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_publishedAt.Value; }
            set { _publishedAt = new InputPropertyInfo { Name = "publishedAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<PragmaVersionFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<PragmaVersionFiltersInput>> And
        {
            get { return (QueryBuilderParameter<ICollection<PragmaVersionFiltersInput>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<PragmaVersionFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<PragmaVersionFiltersInput>> Or
        {
            get { return (QueryBuilderParameter<ICollection<PragmaVersionFiltersInput>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<PragmaVersionFiltersInput>))]
        #endif
        public QueryBuilderParameter<PragmaVersionFiltersInput> Not
        {
            get { return (QueryBuilderParameter<PragmaVersionFiltersInput>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_documentId.Name != null) yield return _documentId;
            if (_pragmaVersion.Name != null) yield return _pragmaVersion;
            if (_createdAt.Name != null) yield return _createdAt;
            if (_updatedAt.Name != null) yield return _updatedAt;
            if (_publishedAt.Name != null) yield return _publishedAt;
            if (_and.Name != null) yield return _and;
            if (_or.Name != null) yield return _or;
            if (_not.Name != null) yield return _not;
        }
    }

    public partial class PragmaVersionInput : IGraphQlInputObject
    {
        private InputPropertyInfo _pragmaVersion;
        private InputPropertyInfo _publishedAt;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> PragmaVersion
        {
            get { return (QueryBuilderParameter<string>)_pragmaVersion.Value; }
            set { _pragmaVersion = new InputPropertyInfo { Name = "PragmaVersion", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTime?>))]
        #endif
        public QueryBuilderParameter<DateTime?> PublishedAt
        {
            get { return (QueryBuilderParameter<DateTime?>)_publishedAt.Value; }
            set { _publishedAt = new InputPropertyInfo { Name = "publishedAt", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_pragmaVersion.Name != null) yield return _pragmaVersion;
            if (_publishedAt.Name != null) yield return _publishedAt;
        }
    }

    public partial class PrivacyInput : IGraphQlInputObject
    {
        private InputPropertyInfo _value;
        private InputPropertyInfo _publishedAt;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Value
        {
            get { return (QueryBuilderParameter<string>)_value.Value; }
            set { _value = new InputPropertyInfo { Name = "Value", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTime?>))]
        #endif
        public QueryBuilderParameter<DateTime?> PublishedAt
        {
            get { return (QueryBuilderParameter<DateTime?>)_publishedAt.Value; }
            set { _publishedAt = new InputPropertyInfo { Name = "publishedAt", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_value.Name != null) yield return _value;
            if (_publishedAt.Name != null) yield return _publishedAt;
        }
    }

    public partial class ProjectsInformationFiltersInput : IGraphQlInputObject
    {
        private InputPropertyInfo _documentId;
        private InputPropertyInfo _cryptorankKey;
        private InputPropertyInfo _poolzBackId;
        private InputPropertyInfo _whitelistId;
        private InputPropertyInfo _name;
        private InputPropertyInfo _visualText;
        private InputPropertyInfo _uploadPool;
        private InputPropertyInfo _isShow;
        private InputPropertyInfo _syntetic;
        private InputPropertyInfo _original;
        private InputPropertyInfo _investors;
        private InputPropertyInfo _coinmarketcapKey;
        private InputPropertyInfo _coingeckoKey;
        private InputPropertyInfo _mainListShow;
        private InputPropertyInfo _fullTokenDistribution;
        private InputPropertyInfo _athroi;
        private InputPropertyInfo _chainSetting;
        private InputPropertyInfo _idoBadge;
        private InputPropertyInfo _warningText;
        private InputPropertyInfo _blockLocations;
        private InputPropertyInfo _projectPhases;
        private InputPropertyInfo _order;
        private InputPropertyInfo _createdAt;
        private InputPropertyInfo _updatedAt;
        private InputPropertyInfo _publishedAt;
        private InputPropertyInfo _and;
        private InputPropertyInfo _or;
        private InputPropertyInfo _not;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterInput>))]
        #endif
        public QueryBuilderParameter<IdFilterInput> DocumentId
        {
            get { return (QueryBuilderParameter<IdFilterInput>)_documentId.Value; }
            set { _documentId = new InputPropertyInfo { Name = "documentId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> CryptorankKey
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_cryptorankKey.Value; }
            set { _cryptorankKey = new InputPropertyInfo { Name = "CryptorankKey", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IntFilterInput>))]
        #endif
        public QueryBuilderParameter<IntFilterInput> PoolzBackId
        {
            get { return (QueryBuilderParameter<IntFilterInput>)_poolzBackId.Value; }
            set { _poolzBackId = new InputPropertyInfo { Name = "PoolzBackId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IntFilterInput>))]
        #endif
        public QueryBuilderParameter<IntFilterInput> WhitelistId
        {
            get { return (QueryBuilderParameter<IntFilterInput>)_whitelistId.Value; }
            set { _whitelistId = new InputPropertyInfo { Name = "WhitelistId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Name
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "Name", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ComponentVisualTextVisualTextFiltersInput>))]
        #endif
        public QueryBuilderParameter<ComponentVisualTextVisualTextFiltersInput> VisualText
        {
            get { return (QueryBuilderParameter<ComponentVisualTextVisualTextFiltersInput>)_visualText.Value; }
            set { _visualText = new InputPropertyInfo { Name = "VisualText", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ComponentUploadPoolUploadPoolFiltersInput>))]
        #endif
        public QueryBuilderParameter<ComponentUploadPoolUploadPoolFiltersInput> UploadPool
        {
            get { return (QueryBuilderParameter<ComponentUploadPoolUploadPoolFiltersInput>)_uploadPool.Value; }
            set { _uploadPool = new InputPropertyInfo { Name = "UploadPool", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<BooleanFilterInput>))]
        #endif
        public QueryBuilderParameter<BooleanFilterInput> IsShow
        {
            get { return (QueryBuilderParameter<BooleanFilterInput>)_isShow.Value; }
            set { _isShow = new InputPropertyInfo { Name = "IsShow", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ComponentSyntheticZoneSynteticFiltersInput>))]
        #endif
        public QueryBuilderParameter<ComponentSyntheticZoneSynteticFiltersInput> Syntetic
        {
            get { return (QueryBuilderParameter<ComponentSyntheticZoneSynteticFiltersInput>)_syntetic.Value; }
            set { _syntetic = new InputPropertyInfo { Name = "Syntetic", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ComponentSyntheticZoneSynteticFiltersInput>))]
        #endif
        public QueryBuilderParameter<ComponentSyntheticZoneSynteticFiltersInput> Original
        {
            get { return (QueryBuilderParameter<ComponentSyntheticZoneSynteticFiltersInput>)_original.Value; }
            set { _original = new InputPropertyInfo { Name = "Original", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ComponentInvestorsInvestorsFiltersInput>))]
        #endif
        public QueryBuilderParameter<ComponentInvestorsInvestorsFiltersInput> Investors
        {
            get { return (QueryBuilderParameter<ComponentInvestorsInvestorsFiltersInput>)_investors.Value; }
            set { _investors = new InputPropertyInfo { Name = "Investors", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> CoinmarketcapKey
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_coinmarketcapKey.Value; }
            set { _coinmarketcapKey = new InputPropertyInfo { Name = "coinmarketcapKey", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> CoingeckoKey
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_coingeckoKey.Value; }
            set { _coingeckoKey = new InputPropertyInfo { Name = "coingeckoKey", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<BooleanFilterInput>))]
        #endif
        public QueryBuilderParameter<BooleanFilterInput> MainListShow
        {
            get { return (QueryBuilderParameter<BooleanFilterInput>)_mainListShow.Value; }
            set { _mainListShow = new InputPropertyInfo { Name = "MainListShow", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ComponentFullTokenDistributionFullTokenDistributionFiltersInput>))]
        #endif
        public QueryBuilderParameter<ComponentFullTokenDistributionFullTokenDistributionFiltersInput> FullTokenDistribution
        {
            get { return (QueryBuilderParameter<ComponentFullTokenDistributionFullTokenDistributionFiltersInput>)_fullTokenDistribution.Value; }
            set { _fullTokenDistribution = new InputPropertyInfo { Name = "FullTokenDistribution", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<FloatFilterInput>))]
        #endif
        public QueryBuilderParameter<FloatFilterInput> Athroi
        {
            get { return (QueryBuilderParameter<FloatFilterInput>)_athroi.Value; }
            set { _athroi = new InputPropertyInfo { Name = "ATHROI", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("chain_setting")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<ChainSettingFiltersInput>))]
        #endif
        public QueryBuilderParameter<ChainSettingFiltersInput> ChainSetting
        {
            get { return (QueryBuilderParameter<ChainSettingFiltersInput>)_chainSetting.Value; }
            set { _chainSetting = new InputPropertyInfo { Name = "chain_setting", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("ido_badge")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdoBadgeFiltersInput>))]
        #endif
        public QueryBuilderParameter<IdoBadgeFiltersInput> IdoBadge
        {
            get { return (QueryBuilderParameter<IdoBadgeFiltersInput>)_idoBadge.Value; }
            set { _idoBadge = new InputPropertyInfo { Name = "ido_badge", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("Warning_Text")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> WarningText
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_warningText.Value; }
            set { _warningText = new InputPropertyInfo { Name = "Warning_Text", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> BlockLocations
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_blockLocations.Value; }
            set { _blockLocations = new InputPropertyInfo { Name = "blockLocations", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ComponentPhaseStartEndAmountFiltersInput>))]
        #endif
        public QueryBuilderParameter<ComponentPhaseStartEndAmountFiltersInput> ProjectPhases
        {
            get { return (QueryBuilderParameter<ComponentPhaseStartEndAmountFiltersInput>)_projectPhases.Value; }
            set { _projectPhases = new InputPropertyInfo { Name = "ProjectPhases", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IntFilterInput>))]
        #endif
        public QueryBuilderParameter<IntFilterInput> Order
        {
            get { return (QueryBuilderParameter<IntFilterInput>)_order.Value; }
            set { _order = new InputPropertyInfo { Name = "Order", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> CreatedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_createdAt.Value; }
            set { _createdAt = new InputPropertyInfo { Name = "createdAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> UpdatedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_updatedAt.Value; }
            set { _updatedAt = new InputPropertyInfo { Name = "updatedAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> PublishedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_publishedAt.Value; }
            set { _publishedAt = new InputPropertyInfo { Name = "publishedAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ProjectsInformationFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<ProjectsInformationFiltersInput>> And
        {
            get { return (QueryBuilderParameter<ICollection<ProjectsInformationFiltersInput>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ProjectsInformationFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<ProjectsInformationFiltersInput>> Or
        {
            get { return (QueryBuilderParameter<ICollection<ProjectsInformationFiltersInput>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ProjectsInformationFiltersInput>))]
        #endif
        public QueryBuilderParameter<ProjectsInformationFiltersInput> Not
        {
            get { return (QueryBuilderParameter<ProjectsInformationFiltersInput>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_documentId.Name != null) yield return _documentId;
            if (_cryptorankKey.Name != null) yield return _cryptorankKey;
            if (_poolzBackId.Name != null) yield return _poolzBackId;
            if (_whitelistId.Name != null) yield return _whitelistId;
            if (_name.Name != null) yield return _name;
            if (_visualText.Name != null) yield return _visualText;
            if (_uploadPool.Name != null) yield return _uploadPool;
            if (_isShow.Name != null) yield return _isShow;
            if (_syntetic.Name != null) yield return _syntetic;
            if (_original.Name != null) yield return _original;
            if (_investors.Name != null) yield return _investors;
            if (_coinmarketcapKey.Name != null) yield return _coinmarketcapKey;
            if (_coingeckoKey.Name != null) yield return _coingeckoKey;
            if (_mainListShow.Name != null) yield return _mainListShow;
            if (_fullTokenDistribution.Name != null) yield return _fullTokenDistribution;
            if (_athroi.Name != null) yield return _athroi;
            if (_chainSetting.Name != null) yield return _chainSetting;
            if (_idoBadge.Name != null) yield return _idoBadge;
            if (_warningText.Name != null) yield return _warningText;
            if (_blockLocations.Name != null) yield return _blockLocations;
            if (_projectPhases.Name != null) yield return _projectPhases;
            if (_order.Name != null) yield return _order;
            if (_createdAt.Name != null) yield return _createdAt;
            if (_updatedAt.Name != null) yield return _updatedAt;
            if (_publishedAt.Name != null) yield return _publishedAt;
            if (_and.Name != null) yield return _and;
            if (_or.Name != null) yield return _or;
            if (_not.Name != null) yield return _not;
        }
    }

    public partial class ProjectsInformationInput : IGraphQlInputObject
    {
        private InputPropertyInfo _cryptorankKey;
        private InputPropertyInfo _poolzBackId;
        private InputPropertyInfo _whitelistId;
        private InputPropertyInfo _name;
        private InputPropertyInfo _logo;
        private InputPropertyInfo _block;
        private InputPropertyInfo _visualText;
        private InputPropertyInfo _uploadPool;
        private InputPropertyInfo _isShow;
        private InputPropertyInfo _syntetic;
        private InputPropertyInfo _original;
        private InputPropertyInfo _investors;
        private InputPropertyInfo _coinmarketcapKey;
        private InputPropertyInfo _coingeckoKey;
        private InputPropertyInfo _mainListShow;
        private InputPropertyInfo _fullTokenDistribution;
        private InputPropertyInfo _athroi;
        private InputPropertyInfo _chainSetting;
        private InputPropertyInfo _idoBadge;
        private InputPropertyInfo _warningText;
        private InputPropertyInfo _blockLocations;
        private InputPropertyInfo _projectPhases;
        private InputPropertyInfo _order;
        private InputPropertyInfo _publishedAt;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> CryptorankKey
        {
            get { return (QueryBuilderParameter<string>)_cryptorankKey.Value; }
            set { _cryptorankKey = new InputPropertyInfo { Name = "CryptorankKey", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> PoolzBackId
        {
            get { return (QueryBuilderParameter<int?>)_poolzBackId.Value; }
            set { _poolzBackId = new InputPropertyInfo { Name = "PoolzBackId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> WhitelistId
        {
            get { return (QueryBuilderParameter<int?>)_whitelistId.Value; }
            set { _whitelistId = new InputPropertyInfo { Name = "WhitelistId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Name
        {
            get { return (QueryBuilderParameter<string>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "Name", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Logo
        {
            get { return (QueryBuilderParameter<string>)_logo.Value; }
            set { _logo = new InputPropertyInfo { Name = "Logo", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Block
        {
            get { return (QueryBuilderParameter<string>)_block.Value; }
            set { _block = new InputPropertyInfo { Name = "Block", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ComponentVisualTextVisualTextInput>))]
        #endif
        public QueryBuilderParameter<ComponentVisualTextVisualTextInput> VisualText
        {
            get { return (QueryBuilderParameter<ComponentVisualTextVisualTextInput>)_visualText.Value; }
            set { _visualText = new InputPropertyInfo { Name = "VisualText", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ComponentUploadPoolUploadPoolInput>))]
        #endif
        public QueryBuilderParameter<ComponentUploadPoolUploadPoolInput> UploadPool
        {
            get { return (QueryBuilderParameter<ComponentUploadPoolUploadPoolInput>)_uploadPool.Value; }
            set { _uploadPool = new InputPropertyInfo { Name = "UploadPool", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> IsShow
        {
            get { return (QueryBuilderParameter<bool?>)_isShow.Value; }
            set { _isShow = new InputPropertyInfo { Name = "IsShow", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ComponentSyntheticZoneSynteticInput>))]
        #endif
        public QueryBuilderParameter<ComponentSyntheticZoneSynteticInput> Syntetic
        {
            get { return (QueryBuilderParameter<ComponentSyntheticZoneSynteticInput>)_syntetic.Value; }
            set { _syntetic = new InputPropertyInfo { Name = "Syntetic", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ComponentSyntheticZoneSynteticInput>))]
        #endif
        public QueryBuilderParameter<ComponentSyntheticZoneSynteticInput> Original
        {
            get { return (QueryBuilderParameter<ComponentSyntheticZoneSynteticInput>)_original.Value; }
            set { _original = new InputPropertyInfo { Name = "Original", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ComponentInvestorsInvestorsInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<ComponentInvestorsInvestorsInput>> Investors
        {
            get { return (QueryBuilderParameter<ICollection<ComponentInvestorsInvestorsInput>>)_investors.Value; }
            set { _investors = new InputPropertyInfo { Name = "Investors", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> CoinmarketcapKey
        {
            get { return (QueryBuilderParameter<string>)_coinmarketcapKey.Value; }
            set { _coinmarketcapKey = new InputPropertyInfo { Name = "coinmarketcapKey", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> CoingeckoKey
        {
            get { return (QueryBuilderParameter<string>)_coingeckoKey.Value; }
            set { _coingeckoKey = new InputPropertyInfo { Name = "coingeckoKey", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
        #endif
        public QueryBuilderParameter<bool?> MainListShow
        {
            get { return (QueryBuilderParameter<bool?>)_mainListShow.Value; }
            set { _mainListShow = new InputPropertyInfo { Name = "MainListShow", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ComponentFullTokenDistributionFullTokenDistributionInput>))]
        #endif
        public QueryBuilderParameter<ComponentFullTokenDistributionFullTokenDistributionInput> FullTokenDistribution
        {
            get { return (QueryBuilderParameter<ComponentFullTokenDistributionFullTokenDistributionInput>)_fullTokenDistribution.Value; }
            set { _fullTokenDistribution = new InputPropertyInfo { Name = "FullTokenDistribution", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<decimal?>))]
        #endif
        public QueryBuilderParameter<decimal?> Athroi
        {
            get { return (QueryBuilderParameter<decimal?>)_athroi.Value; }
            set { _athroi = new InputPropertyInfo { Name = "ATHROI", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("chain_setting")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ChainSetting
        {
            get { return (QueryBuilderParameter<string>)_chainSetting.Value; }
            set { _chainSetting = new InputPropertyInfo { Name = "chain_setting", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("ido_badge")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> IdoBadge
        {
            get { return (QueryBuilderParameter<string>)_idoBadge.Value; }
            set { _idoBadge = new InputPropertyInfo { Name = "ido_badge", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("Warning_Text")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> WarningText
        {
            get { return (QueryBuilderParameter<string>)_warningText.Value; }
            set { _warningText = new InputPropertyInfo { Name = "Warning_Text", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> BlockLocations
        {
            get { return (QueryBuilderParameter<string>)_blockLocations.Value; }
            set { _blockLocations = new InputPropertyInfo { Name = "blockLocations", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ComponentPhaseStartEndAmountInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<ComponentPhaseStartEndAmountInput>> ProjectPhases
        {
            get { return (QueryBuilderParameter<ICollection<ComponentPhaseStartEndAmountInput>>)_projectPhases.Value; }
            set { _projectPhases = new InputPropertyInfo { Name = "ProjectPhases", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Order
        {
            get { return (QueryBuilderParameter<int?>)_order.Value; }
            set { _order = new InputPropertyInfo { Name = "Order", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTime?>))]
        #endif
        public QueryBuilderParameter<DateTime?> PublishedAt
        {
            get { return (QueryBuilderParameter<DateTime?>)_publishedAt.Value; }
            set { _publishedAt = new InputPropertyInfo { Name = "publishedAt", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_cryptorankKey.Name != null) yield return _cryptorankKey;
            if (_poolzBackId.Name != null) yield return _poolzBackId;
            if (_whitelistId.Name != null) yield return _whitelistId;
            if (_name.Name != null) yield return _name;
            if (_logo.Name != null) yield return _logo;
            if (_block.Name != null) yield return _block;
            if (_visualText.Name != null) yield return _visualText;
            if (_uploadPool.Name != null) yield return _uploadPool;
            if (_isShow.Name != null) yield return _isShow;
            if (_syntetic.Name != null) yield return _syntetic;
            if (_original.Name != null) yield return _original;
            if (_investors.Name != null) yield return _investors;
            if (_coinmarketcapKey.Name != null) yield return _coinmarketcapKey;
            if (_coingeckoKey.Name != null) yield return _coingeckoKey;
            if (_mainListShow.Name != null) yield return _mainListShow;
            if (_fullTokenDistribution.Name != null) yield return _fullTokenDistribution;
            if (_athroi.Name != null) yield return _athroi;
            if (_chainSetting.Name != null) yield return _chainSetting;
            if (_idoBadge.Name != null) yield return _idoBadge;
            if (_warningText.Name != null) yield return _warningText;
            if (_blockLocations.Name != null) yield return _blockLocations;
            if (_projectPhases.Name != null) yield return _projectPhases;
            if (_order.Name != null) yield return _order;
            if (_publishedAt.Name != null) yield return _publishedAt;
        }
    }

    public partial class SeasonPassFiltersInput : IGraphQlInputObject
    {
        private InputPropertyInfo _documentId;
        private InputPropertyInfo _wallet;
        private InputPropertyInfo _amount;
        private InputPropertyInfo _validUntil;
        private InputPropertyInfo _note;
        private InputPropertyInfo _createdAt;
        private InputPropertyInfo _updatedAt;
        private InputPropertyInfo _publishedAt;
        private InputPropertyInfo _and;
        private InputPropertyInfo _or;
        private InputPropertyInfo _not;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterInput>))]
        #endif
        public QueryBuilderParameter<IdFilterInput> DocumentId
        {
            get { return (QueryBuilderParameter<IdFilterInput>)_documentId.Value; }
            set { _documentId = new InputPropertyInfo { Name = "documentId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Wallet
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_wallet.Value; }
            set { _wallet = new InputPropertyInfo { Name = "Wallet", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<FloatFilterInput>))]
        #endif
        public QueryBuilderParameter<FloatFilterInput> Amount
        {
            get { return (QueryBuilderParameter<FloatFilterInput>)_amount.Value; }
            set { _amount = new InputPropertyInfo { Name = "Amount", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> ValidUntil
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_validUntil.Value; }
            set { _validUntil = new InputPropertyInfo { Name = "ValidUntil", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Note
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_note.Value; }
            set { _note = new InputPropertyInfo { Name = "Note", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> CreatedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_createdAt.Value; }
            set { _createdAt = new InputPropertyInfo { Name = "createdAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> UpdatedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_updatedAt.Value; }
            set { _updatedAt = new InputPropertyInfo { Name = "updatedAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> PublishedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_publishedAt.Value; }
            set { _publishedAt = new InputPropertyInfo { Name = "publishedAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<SeasonPassFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<SeasonPassFiltersInput>> And
        {
            get { return (QueryBuilderParameter<ICollection<SeasonPassFiltersInput>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<SeasonPassFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<SeasonPassFiltersInput>> Or
        {
            get { return (QueryBuilderParameter<ICollection<SeasonPassFiltersInput>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<SeasonPassFiltersInput>))]
        #endif
        public QueryBuilderParameter<SeasonPassFiltersInput> Not
        {
            get { return (QueryBuilderParameter<SeasonPassFiltersInput>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_documentId.Name != null) yield return _documentId;
            if (_wallet.Name != null) yield return _wallet;
            if (_amount.Name != null) yield return _amount;
            if (_validUntil.Name != null) yield return _validUntil;
            if (_note.Name != null) yield return _note;
            if (_createdAt.Name != null) yield return _createdAt;
            if (_updatedAt.Name != null) yield return _updatedAt;
            if (_publishedAt.Name != null) yield return _publishedAt;
            if (_and.Name != null) yield return _and;
            if (_or.Name != null) yield return _or;
            if (_not.Name != null) yield return _not;
        }
    }

    public partial class SeasonPassInput : IGraphQlInputObject
    {
        private InputPropertyInfo _wallet;
        private InputPropertyInfo _amount;
        private InputPropertyInfo _validUntil;
        private InputPropertyInfo _note;
        private InputPropertyInfo _publishedAt;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Wallet
        {
            get { return (QueryBuilderParameter<string>)_wallet.Value; }
            set { _wallet = new InputPropertyInfo { Name = "Wallet", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<decimal?>))]
        #endif
        public QueryBuilderParameter<decimal?> Amount
        {
            get { return (QueryBuilderParameter<decimal?>)_amount.Value; }
            set { _amount = new InputPropertyInfo { Name = "Amount", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTime?>))]
        #endif
        public QueryBuilderParameter<DateTime?> ValidUntil
        {
            get { return (QueryBuilderParameter<DateTime?>)_validUntil.Value; }
            set { _validUntil = new InputPropertyInfo { Name = "ValidUntil", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Note
        {
            get { return (QueryBuilderParameter<string>)_note.Value; }
            set { _note = new InputPropertyInfo { Name = "Note", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTime?>))]
        #endif
        public QueryBuilderParameter<DateTime?> PublishedAt
        {
            get { return (QueryBuilderParameter<DateTime?>)_publishedAt.Value; }
            set { _publishedAt = new InputPropertyInfo { Name = "publishedAt", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_wallet.Name != null) yield return _wallet;
            if (_amount.Name != null) yield return _amount;
            if (_validUntil.Name != null) yield return _validUntil;
            if (_note.Name != null) yield return _note;
            if (_publishedAt.Name != null) yield return _publishedAt;
        }
    }

    public partial class StakingCoolDownFiltersInput : IGraphQlInputObject
    {
        private InputPropertyInfo _documentId;
        private InputPropertyInfo _amount;
        private InputPropertyInfo _coolDownPeriod;
        private InputPropertyInfo _type;
        private InputPropertyInfo _text;
        private InputPropertyInfo _createdAt;
        private InputPropertyInfo _updatedAt;
        private InputPropertyInfo _publishedAt;
        private InputPropertyInfo _and;
        private InputPropertyInfo _or;
        private InputPropertyInfo _not;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterInput>))]
        #endif
        public QueryBuilderParameter<IdFilterInput> DocumentId
        {
            get { return (QueryBuilderParameter<IdFilterInput>)_documentId.Value; }
            set { _documentId = new InputPropertyInfo { Name = "documentId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Amount
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_amount.Value; }
            set { _amount = new InputPropertyInfo { Name = "Amount", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> CoolDownPeriod
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_coolDownPeriod.Value; }
            set { _coolDownPeriod = new InputPropertyInfo { Name = "CoolDownPeriod", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IntFilterInput>))]
        #endif
        public QueryBuilderParameter<IntFilterInput> Type
        {
            get { return (QueryBuilderParameter<IntFilterInput>)_type.Value; }
            set { _type = new InputPropertyInfo { Name = "type", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Text
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_text.Value; }
            set { _text = new InputPropertyInfo { Name = "text", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> CreatedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_createdAt.Value; }
            set { _createdAt = new InputPropertyInfo { Name = "createdAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> UpdatedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_updatedAt.Value; }
            set { _updatedAt = new InputPropertyInfo { Name = "updatedAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> PublishedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_publishedAt.Value; }
            set { _publishedAt = new InputPropertyInfo { Name = "publishedAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<StakingCoolDownFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<StakingCoolDownFiltersInput>> And
        {
            get { return (QueryBuilderParameter<ICollection<StakingCoolDownFiltersInput>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<StakingCoolDownFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<StakingCoolDownFiltersInput>> Or
        {
            get { return (QueryBuilderParameter<ICollection<StakingCoolDownFiltersInput>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StakingCoolDownFiltersInput>))]
        #endif
        public QueryBuilderParameter<StakingCoolDownFiltersInput> Not
        {
            get { return (QueryBuilderParameter<StakingCoolDownFiltersInput>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_documentId.Name != null) yield return _documentId;
            if (_amount.Name != null) yield return _amount;
            if (_coolDownPeriod.Name != null) yield return _coolDownPeriod;
            if (_type.Name != null) yield return _type;
            if (_text.Name != null) yield return _text;
            if (_createdAt.Name != null) yield return _createdAt;
            if (_updatedAt.Name != null) yield return _updatedAt;
            if (_publishedAt.Name != null) yield return _publishedAt;
            if (_and.Name != null) yield return _and;
            if (_or.Name != null) yield return _or;
            if (_not.Name != null) yield return _not;
        }
    }

    public partial class StakingCoolDownInput : IGraphQlInputObject
    {
        private InputPropertyInfo _amount;
        private InputPropertyInfo _coolDownPeriod;
        private InputPropertyInfo _type;
        private InputPropertyInfo _text;
        private InputPropertyInfo _publishedAt;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Amount
        {
            get { return (QueryBuilderParameter<string>)_amount.Value; }
            set { _amount = new InputPropertyInfo { Name = "Amount", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> CoolDownPeriod
        {
            get { return (QueryBuilderParameter<string>)_coolDownPeriod.Value; }
            set { _coolDownPeriod = new InputPropertyInfo { Name = "CoolDownPeriod", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Type
        {
            get { return (QueryBuilderParameter<int?>)_type.Value; }
            set { _type = new InputPropertyInfo { Name = "type", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Text
        {
            get { return (QueryBuilderParameter<string>)_text.Value; }
            set { _text = new InputPropertyInfo { Name = "text", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTime?>))]
        #endif
        public QueryBuilderParameter<DateTime?> PublishedAt
        {
            get { return (QueryBuilderParameter<DateTime?>)_publishedAt.Value; }
            set { _publishedAt = new InputPropertyInfo { Name = "publishedAt", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_amount.Name != null) yield return _amount;
            if (_coolDownPeriod.Name != null) yield return _coolDownPeriod;
            if (_type.Name != null) yield return _type;
            if (_text.Name != null) yield return _text;
            if (_publishedAt.Name != null) yield return _publishedAt;
        }
    }

    public partial class TokenomicInput : IGraphQlInputObject
    {
        private InputPropertyInfo _list;
        private InputPropertyInfo _poolxToken;
        private InputPropertyInfo _chainSetting;
        private InputPropertyInfo _multiCallContractAddress;
        private InputPropertyInfo _publishedAt;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ComponentChainAddressesOnlyAddressInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<ComponentChainAddressesOnlyAddressInput>> List
        {
            get { return (QueryBuilderParameter<ICollection<ComponentChainAddressesOnlyAddressInput>>)_list.Value; }
            set { _list = new InputPropertyInfo { Name = "List", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> PoolxToken
        {
            get { return (QueryBuilderParameter<string>)_poolxToken.Value; }
            set { _poolxToken = new InputPropertyInfo { Name = "PoolxToken", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("chain_setting")]
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ChainSetting
        {
            get { return (QueryBuilderParameter<string>)_chainSetting.Value; }
            set { _chainSetting = new InputPropertyInfo { Name = "chain_setting", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> MultiCallContractAddress
        {
            get { return (QueryBuilderParameter<string>)_multiCallContractAddress.Value; }
            set { _multiCallContractAddress = new InputPropertyInfo { Name = "MultiCallContractAddress", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTime?>))]
        #endif
        public QueryBuilderParameter<DateTime?> PublishedAt
        {
            get { return (QueryBuilderParameter<DateTime?>)_publishedAt.Value; }
            set { _publishedAt = new InputPropertyInfo { Name = "publishedAt", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_list.Name != null) yield return _list;
            if (_poolxToken.Name != null) yield return _poolxToken;
            if (_chainSetting.Name != null) yield return _chainSetting;
            if (_multiCallContractAddress.Name != null) yield return _multiCallContractAddress;
            if (_publishedAt.Name != null) yield return _publishedAt;
        }
    }

    public partial class TradeContractFiltersInput : IGraphQlInputObject
    {
        private InputPropertyInfo _documentId;
        private InputPropertyInfo _name;
        private InputPropertyInfo _adressList;
        private InputPropertyInfo _createdAt;
        private InputPropertyInfo _updatedAt;
        private InputPropertyInfo _publishedAt;
        private InputPropertyInfo _and;
        private InputPropertyInfo _or;
        private InputPropertyInfo _not;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterInput>))]
        #endif
        public QueryBuilderParameter<IdFilterInput> DocumentId
        {
            get { return (QueryBuilderParameter<IdFilterInput>)_documentId.Value; }
            set { _documentId = new InputPropertyInfo { Name = "documentId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> Name
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "Name", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ComponentTokenomicsListOfStringsFiltersInput>))]
        #endif
        public QueryBuilderParameter<ComponentTokenomicsListOfStringsFiltersInput> AdressList
        {
            get { return (QueryBuilderParameter<ComponentTokenomicsListOfStringsFiltersInput>)_adressList.Value; }
            set { _adressList = new InputPropertyInfo { Name = "AdressList", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> CreatedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_createdAt.Value; }
            set { _createdAt = new InputPropertyInfo { Name = "createdAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> UpdatedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_updatedAt.Value; }
            set { _updatedAt = new InputPropertyInfo { Name = "updatedAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> PublishedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_publishedAt.Value; }
            set { _publishedAt = new InputPropertyInfo { Name = "publishedAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<TradeContractFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<TradeContractFiltersInput>> And
        {
            get { return (QueryBuilderParameter<ICollection<TradeContractFiltersInput>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<TradeContractFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<TradeContractFiltersInput>> Or
        {
            get { return (QueryBuilderParameter<ICollection<TradeContractFiltersInput>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<TradeContractFiltersInput>))]
        #endif
        public QueryBuilderParameter<TradeContractFiltersInput> Not
        {
            get { return (QueryBuilderParameter<TradeContractFiltersInput>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_documentId.Name != null) yield return _documentId;
            if (_name.Name != null) yield return _name;
            if (_adressList.Name != null) yield return _adressList;
            if (_createdAt.Name != null) yield return _createdAt;
            if (_updatedAt.Name != null) yield return _updatedAt;
            if (_publishedAt.Name != null) yield return _publishedAt;
            if (_and.Name != null) yield return _and;
            if (_or.Name != null) yield return _or;
            if (_not.Name != null) yield return _not;
        }
    }

    public partial class TradeContractInput : IGraphQlInputObject
    {
        private InputPropertyInfo _name;
        private InputPropertyInfo _adressList;
        private InputPropertyInfo _publishedAt;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Name
        {
            get { return (QueryBuilderParameter<string>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "Name", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<ComponentTokenomicsListOfStringsInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<ComponentTokenomicsListOfStringsInput>> AdressList
        {
            get { return (QueryBuilderParameter<ICollection<ComponentTokenomicsListOfStringsInput>>)_adressList.Value; }
            set { _adressList = new InputPropertyInfo { Name = "AdressList", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTime?>))]
        #endif
        public QueryBuilderParameter<DateTime?> PublishedAt
        {
            get { return (QueryBuilderParameter<DateTime?>)_publishedAt.Value; }
            set { _publishedAt = new InputPropertyInfo { Name = "publishedAt", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_name.Name != null) yield return _name;
            if (_adressList.Name != null) yield return _adressList;
            if (_publishedAt.Name != null) yield return _publishedAt;
        }
    }

    public partial class VaultFaqFiltersInput : IGraphQlInputObject
    {
        private InputPropertyInfo _documentId;
        private InputPropertyInfo _shortText;
        private InputPropertyInfo _longText;
        private InputPropertyInfo _createdAt;
        private InputPropertyInfo _updatedAt;
        private InputPropertyInfo _publishedAt;
        private InputPropertyInfo _and;
        private InputPropertyInfo _or;
        private InputPropertyInfo _not;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<IdFilterInput>))]
        #endif
        public QueryBuilderParameter<IdFilterInput> DocumentId
        {
            get { return (QueryBuilderParameter<IdFilterInput>)_documentId.Value; }
            set { _documentId = new InputPropertyInfo { Name = "documentId", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> ShortText
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_shortText.Value; }
            set { _shortText = new InputPropertyInfo { Name = "ShortText", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<StringFilterInput>))]
        #endif
        public QueryBuilderParameter<StringFilterInput> LongText
        {
            get { return (QueryBuilderParameter<StringFilterInput>)_longText.Value; }
            set { _longText = new InputPropertyInfo { Name = "LongText", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> CreatedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_createdAt.Value; }
            set { _createdAt = new InputPropertyInfo { Name = "createdAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> UpdatedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_updatedAt.Value; }
            set { _updatedAt = new InputPropertyInfo { Name = "updatedAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTimeFilterInput>))]
        #endif
        public QueryBuilderParameter<DateTimeFilterInput> PublishedAt
        {
            get { return (QueryBuilderParameter<DateTimeFilterInput>)_publishedAt.Value; }
            set { _publishedAt = new InputPropertyInfo { Name = "publishedAt", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<VaultFaqFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<VaultFaqFiltersInput>> And
        {
            get { return (QueryBuilderParameter<ICollection<VaultFaqFiltersInput>>)_and.Value; }
            set { _and = new InputPropertyInfo { Name = "and", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<VaultFaqFiltersInput>>))]
        #endif
        public QueryBuilderParameter<ICollection<VaultFaqFiltersInput>> Or
        {
            get { return (QueryBuilderParameter<ICollection<VaultFaqFiltersInput>>)_or.Value; }
            set { _or = new InputPropertyInfo { Name = "or", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<VaultFaqFiltersInput>))]
        #endif
        public QueryBuilderParameter<VaultFaqFiltersInput> Not
        {
            get { return (QueryBuilderParameter<VaultFaqFiltersInput>)_not.Value; }
            set { _not = new InputPropertyInfo { Name = "not", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_documentId.Name != null) yield return _documentId;
            if (_shortText.Name != null) yield return _shortText;
            if (_longText.Name != null) yield return _longText;
            if (_createdAt.Name != null) yield return _createdAt;
            if (_updatedAt.Name != null) yield return _updatedAt;
            if (_publishedAt.Name != null) yield return _publishedAt;
            if (_and.Name != null) yield return _and;
            if (_or.Name != null) yield return _or;
            if (_not.Name != null) yield return _not;
        }
    }

    public partial class VaultFaqInput : IGraphQlInputObject
    {
        private InputPropertyInfo _shortText;
        private InputPropertyInfo _longText;
        private InputPropertyInfo _publishedAt;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> ShortText
        {
            get { return (QueryBuilderParameter<string>)_shortText.Value; }
            set { _shortText = new InputPropertyInfo { Name = "ShortText", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> LongText
        {
            get { return (QueryBuilderParameter<string>)_longText.Value; }
            set { _longText = new InputPropertyInfo { Name = "LongText", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<DateTime?>))]
        #endif
        public QueryBuilderParameter<DateTime?> PublishedAt
        {
            get { return (QueryBuilderParameter<DateTime?>)_publishedAt.Value; }
            set { _publishedAt = new InputPropertyInfo { Name = "publishedAt", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_shortText.Name != null) yield return _shortText;
            if (_longText.Name != null) yield return _longText;
            if (_publishedAt.Name != null) yield return _publishedAt;
        }
    }

    public partial class FileInfoInput : IGraphQlInputObject
    {
        private InputPropertyInfo _name;
        private InputPropertyInfo _alternativeText;
        private InputPropertyInfo _caption;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Name
        {
            get { return (QueryBuilderParameter<string>)_name.Value; }
            set { _name = new InputPropertyInfo { Name = "name", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> AlternativeText
        {
            get { return (QueryBuilderParameter<string>)_alternativeText.Value; }
            set { _alternativeText = new InputPropertyInfo { Name = "alternativeText", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Caption
        {
            get { return (QueryBuilderParameter<string>)_caption.Value; }
            set { _caption = new InputPropertyInfo { Name = "caption", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_name.Name != null) yield return _name;
            if (_alternativeText.Name != null) yield return _alternativeText;
            if (_caption.Name != null) yield return _caption;
        }
    }

    public partial class UsersPermissionsRegisterInput : IGraphQlInputObject
    {
        private InputPropertyInfo _username;
        private InputPropertyInfo _email;
        private InputPropertyInfo _password;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Username
        {
            get { return (QueryBuilderParameter<string>)_username.Value; }
            set { _username = new InputPropertyInfo { Name = "username", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Email
        {
            get { return (QueryBuilderParameter<string>)_email.Value; }
            set { _email = new InputPropertyInfo { Name = "email", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Password
        {
            get { return (QueryBuilderParameter<string>)_password.Value; }
            set { _password = new InputPropertyInfo { Name = "password", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_username.Name != null) yield return _username;
            if (_email.Name != null) yield return _email;
            if (_password.Name != null) yield return _password;
        }
    }

    public partial class UsersPermissionsLoginInput : IGraphQlInputObject
    {
        private InputPropertyInfo _identifier;
        private InputPropertyInfo _password;
        private InputPropertyInfo _provider;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Identifier
        {
            get { return (QueryBuilderParameter<string>)_identifier.Value; }
            set { _identifier = new InputPropertyInfo { Name = "identifier", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Password
        {
            get { return (QueryBuilderParameter<string>)_password.Value; }
            set { _password = new InputPropertyInfo { Name = "password", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
        #endif
        public QueryBuilderParameter<string> Provider
        {
            get { return (QueryBuilderParameter<string>)_provider.Value; }
            set { _provider = new InputPropertyInfo { Name = "provider", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_identifier.Name != null) yield return _identifier;
            if (_password.Name != null) yield return _password;
            if (_provider.Name != null) yield return _provider;
        }
    }

    public partial class PaginationArg : IGraphQlInputObject
    {
        private InputPropertyInfo _page;
        private InputPropertyInfo _pageSize;
        private InputPropertyInfo _start;
        private InputPropertyInfo _limit;

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Page
        {
            get { return (QueryBuilderParameter<int?>)_page.Value; }
            set { _page = new InputPropertyInfo { Name = "page", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> PageSize
        {
            get { return (QueryBuilderParameter<int?>)_pageSize.Value; }
            set { _pageSize = new InputPropertyInfo { Name = "pageSize", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Start
        {
            get { return (QueryBuilderParameter<int?>)_start.Value; }
            set { _start = new InputPropertyInfo { Name = "start", Value = value }; }
        }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
        #endif
        public QueryBuilderParameter<int?> Limit
        {
            get { return (QueryBuilderParameter<int?>)_limit.Value; }
            set { _limit = new InputPropertyInfo { Name = "limit", Value = value }; }
        }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (_page.Name != null) yield return _page;
            if (_pageSize.Name != null) yield return _pageSize;
            if (_start.Name != null) yield return _start;
            if (_limit.Name != null) yield return _limit;
        }
    }
    #endregion

    #region data classes
    public partial class Pagination
    {
        public int? Total { get; set; }
        public int? Page { get; set; }
        public int? PageSize { get; set; }
        public int? PageCount { get; set; }
    }

    public partial class DeleteMutationResponse
    {
        public string DocumentId { get; set; }
    }

    [GraphQlObjectType("ComponentVisualTextVisualText")]
    public partial class ComponentVisualTextVisualText : IGenericMorph
    {
        public string Id { get; set; }
        public ICollection<ComponentHighlightsHighlights> Highlights { get; set; }
        public ICollection<ComponentOverviewOverview> Overview { get; set; }
        public ComponentTokenomicsTokenomics Tokenomics { get; set; }
        public ICollection<ComponentSmartLinksSmartLinks> SmartLinks { get; set; }
    }

    [GraphQlObjectType("ComponentVersionVersion")]
    public partial class ComponentVersionVersion : IGenericMorph
    {
        public string Id { get; set; }
        public Contract ContractVersion { get; set; }
        public ContractTypeData ContractType { get; set; }
    }

    [GraphQlObjectType("ComponentUploadPoolUploadPool")]
    public partial class ComponentUploadPoolUploadPool : IGenericMorph
    {
        public string Id { get; set; }
        public decimal? WhitelistRate { get; set; }
        public decimal? PublicRate { get; set; }
        public decimal? TotalTokens { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("buy_with")]
        #endif
        public BuyWith BuyWith { get; set; }
        public int? Participants { get; set; }
    }

    [GraphQlObjectType("ComponentTokenomicsTokenomics")]
    public partial class ComponentTokenomicsTokenomics : IGenericMorph
    {
        public string Id { get; set; }
        public UploadFile VisualInfo { get; set; }
        public string MarketCap { get; set; }
        public string TgeMarketCap { get; set; }
        public string Symbol { get; set; }
        public string CirculationSupply { get; set; }
        public string TotalSupply { get; set; }
        public string TotalRaise { get; set; }
        public string TokenPrice { get; set; }
    }

    [GraphQlObjectType("ComponentTokenomicsListOfStrings")]
    public partial class ComponentTokenomicsListOfStrings : IGenericMorph
    {
        public string Id { get; set; }
        public string EvmAddress { get; set; }
    }

    [GraphQlObjectType("ComponentTokenDistributionTokenDistribution")]
    public partial class ComponentTokenDistributionTokenDistribution : IGenericMorph
    {
        public string Id { get; set; }
        public DateTime? Unlock { get; set; }
        public decimal? Ratio { get; set; }
        public bool? IsTimeTba { get; set; }
        public DateTime? StartTime { get; set; }
    }

    [GraphQlObjectType("ComponentSyntheticZoneSyntetic")]
    public partial class ComponentSyntheticZoneSyntetic : IGenericMorph
    {
        public string Id { get; set; }
        public string TokenAddress { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("chain_setting")]
        #endif
        public ChainSetting ChainSetting { get; set; }
    }

    [GraphQlObjectType("ComponentSmartLinksSmartLinks")]
    public partial class ComponentSmartLinksSmartLinks : IGenericMorph
    {
        public string Id { get; set; }
        public string Url { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("link_type")]
        #endif
        public LinkType LinkType { get; set; }
    }

    [GraphQlObjectType("ComponentSimpleUrlSimpleUrl")]
    public partial class ComponentSimpleUrlSimpleUrl : IGenericMorph
    {
        public string Id { get; set; }
        public string Name { get; set; }
        public string Url { get; set; }
        public bool? NewWindow { get; set; }
    }

    [GraphQlObjectType("ComponentSectionSection")]
    public partial class ComponentSectionSection : IGenericMorph
    {
        public string Id { get; set; }
        public string Title { get; set; }
        public string SmallText { get; set; }
        public string TopBgUrl { get; set; }
        public UploadFile TopBg { get; set; }
        public ComponentHtmlColorTextHtmlColorText HtmlColorText { get; set; }
        public ICollection<ComponentMainCtaMainCta> MainCta { get; set; }
        public ICollection<ComponentMainCtaMainCta> SecondCta { get; set; }
        public string SecondTitle { get; set; }
        public string SecondSmallText { get; set; }
    }

    [GraphQlObjectType("ComponentOverviewOverview")]
    public partial class ComponentOverviewOverview : IGenericMorph
    {
        public string Id { get; set; }
        public string Name { get; set; }
        public string BoldText { get; set; }
        public string Text { get; set; }
    }

    [GraphQlObjectType("ComponentPhaseStartEndAmount")]
    public partial class ComponentPhaseStartEndAmount : IGenericMorph
    {
        public string Id { get; set; }
        public DateTime? Start { get; set; }
        public DateTime? Finish { get; set; }
        public long? MaxInvest { get; set; }
    }

    [GraphQlObjectType("ComponentIconTextIconText")]
    public partial class ComponentIconTextIconText : IGenericMorph
    {
        public string Id { get; set; }
        public string Text { get; set; }
        public string SmallText { get; set; }
        public UploadFile Icon { get; set; }
    }

    [GraphQlObjectType("ComponentHtmlColorTextHtmlColorText")]
    public partial class ComponentHtmlColorTextHtmlColorText : IGenericMorph
    {
        public string Id { get; set; }
        public string Text { get; set; }
        public string Color { get; set; }
        public string Url { get; set; }
    }

    [GraphQlObjectType("ComponentMainCtaMainCta")]
    public partial class ComponentMainCtaMainCta : IGenericMorph
    {
        public string Id { get; set; }
        public string Text { get; set; }
        public string Url { get; set; }
        public string CtaText { get; set; }
        public string AddText { get; set; }
        public string BackColor { get; set; }
        public string TextColor { get; set; }
        public string HoverBackColor { get; set; }
        public bool? Flag { get; set; }
    }

    [GraphQlObjectType("ComponentHeaderSimpleUrlHeaderSimpleUrl")]
    public partial class ComponentHeaderSimpleUrlHeaderSimpleUrl : IGenericMorph
    {
        public string Id { get; set; }
        public string Text { get; set; }
        public string Url { get; set; }
        public string CtaText { get; set; }
        public string TextColor { get; set; }
    }

    [GraphQlObjectType("ComponentHighlightsHighlights")]
    public partial class ComponentHighlightsHighlights : IGenericMorph
    {
        public string Id { get; set; }
        public string Value { get; set; }
    }

    [GraphQlObjectType("ComponentDictionaryLinks")]
    public partial class ComponentDictionaryLinks : IGenericMorph
    {
        public string Id { get; set; }
        public string Name { get; set; }
        public string Url { get; set; }
    }

    [GraphQlObjectType("ComponentContractOnChainContractOnChain")]
    public partial class ComponentContractOnChainContractOnChain : IGenericMorph
    {
        public string Id { get; set; }
        public Contract ContractVersion { get; set; }
        public string Address { get; set; }
        public ContractTypeData ContractType { get; set; }
    }

    [GraphQlObjectType("ComponentCompilerSettingCompilerSettings")]
    public partial class ComponentCompilerSettingCompilerSettings : IGenericMorph
    {
        public string Id { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("evm_version")]
        #endif
        public EvmVersionData EvmVersion { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("supported_pragma_version")]
        #endif
        public PragmaVersionData SupportedPragmaVersion { get; set; }
        public bool? OptimizerEnabled { get; set; }
        public int? Runs { get; set; }
        public bool? ViaIr { get; set; }
    }

    [GraphQlObjectType("ComponentColorIconColorIcon")]
    public partial class ComponentColorIconColorIcon : IGenericMorph
    {
        public string Id { get; set; }
        public UploadFile Icon { get; set; }
        public string Color { get; set; }
    }

    [GraphQlObjectType("ComponentInvestorsInvestors")]
    public partial class ComponentInvestorsInvestors : IGenericMorph
    {
        public string Id { get; set; }
        public Investor Investor { get; set; }
        public string Category { get; set; }
    }

    [GraphQlObjectType("ComponentChainAddressesOnlyAddress")]
    public partial class ComponentChainAddressesOnlyAddress : IGenericMorph
    {
        public string Id { get; set; }
        public string Name { get; set; }
        public string Address { get; set; }
        public bool? IsLocked { get; set; }
    }

    [GraphQlObjectType("ComponentChainAddressesChainAddresses")]
    public partial class ComponentChainAddressesChainAddresses : IGenericMorph
    {
        public string Id { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("chain_setting")]
        #endif
        public ChainSetting ChainSetting { get; set; }
        public string Address { get; set; }
    }

    [GraphQlObjectType("ComponentFullTokenDistributionFullTokenDistribution")]
    public partial class ComponentFullTokenDistributionFullTokenDistribution : IGenericMorph
    {
        public string Id { get; set; }
        public ComponentTokenDistributionTokenDistribution Tge { get; set; }
        public ICollection<ComponentTokenDistributionTokenDistribution> Monthly { get; set; }
        public string Text { get; set; }
        public string DistributionType { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("non_evm_chain")]
        #endif
        public NonEvmChain NonEvmChain { get; set; }
    }

    [GraphQlObjectType("UploadFile")]
    public partial class UploadFile : IGenericMorph
    {
        public string DocumentId { get; set; }
        public string Name { get; set; }
        public string AlternativeText { get; set; }
        public string Caption { get; set; }
        public int? Width { get; set; }
        public int? Height { get; set; }
        public object Formats { get; set; }
        public string Hash { get; set; }
        public string Ext { get; set; }
        public string Mime { get; set; }
        public decimal? Size { get; set; }
        public string Url { get; set; }
        public string PreviewUrl { get; set; }
        public string Provider { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("provider_metadata")]
        #endif
        public object ProviderMetadata { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
        #endif
        public ICollection<IGenericMorph> Related { get; set; }
        public DateTime? CreatedAt { get; set; }
        public DateTime? UpdatedAt { get; set; }
        public DateTime? PublishedAt { get; set; }
    }

    public partial class UploadFileEntityResponseCollection
    {
        public ICollection<UploadFile> Nodes { get; set; }
        public Pagination PageInfo { get; set; }
    }

    public partial class UploadFileRelationResponseCollection
    {
        public ICollection<UploadFile> Nodes { get; set; }
    }

    [GraphQlObjectType("I18NLocale")]
    public partial class I18NLocale : IGenericMorph
    {
        public string DocumentId { get; set; }
        public string Name { get; set; }
        public string Code { get; set; }
        public DateTime? CreatedAt { get; set; }
        public DateTime? UpdatedAt { get; set; }
        public DateTime? PublishedAt { get; set; }
    }

    public partial class I18NLocaleEntityResponseCollection
    {
        public ICollection<I18NLocale> Nodes { get; set; }
        public Pagination PageInfo { get; set; }
    }

    [GraphQlObjectType("ReviewWorkflowsWorkflow")]
    public partial class ReviewWorkflowsWorkflow : IGenericMorph
    {
        public string DocumentId { get; set; }
        public string Name { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("stages_connection")]
        #endif
        public ReviewWorkflowsWorkflowStageRelationResponseCollection StagesConnection { get; set; }
        public ICollection<ReviewWorkflowsWorkflowStage> Stages { get; set; }
        public ReviewWorkflowsWorkflowStage StageRequiredToPublish { get; set; }
        public object ContentTypes { get; set; }
        public DateTime? CreatedAt { get; set; }
        public DateTime? UpdatedAt { get; set; }
        public DateTime? PublishedAt { get; set; }
    }

    public partial class ReviewWorkflowsWorkflowEntityResponseCollection
    {
        public ICollection<ReviewWorkflowsWorkflow> Nodes { get; set; }
        public Pagination PageInfo { get; set; }
    }

    [GraphQlObjectType("ReviewWorkflowsWorkflowStage")]
    public partial class ReviewWorkflowsWorkflowStage : IGenericMorph
    {
        public string DocumentId { get; set; }
        public string Name { get; set; }
        public string Color { get; set; }
        public ReviewWorkflowsWorkflow Workflow { get; set; }
        public DateTime? CreatedAt { get; set; }
        public DateTime? UpdatedAt { get; set; }
        public DateTime? PublishedAt { get; set; }
    }

    public partial class ReviewWorkflowsWorkflowStageEntityResponseCollection
    {
        public ICollection<ReviewWorkflowsWorkflowStage> Nodes { get; set; }
        public Pagination PageInfo { get; set; }
    }

    public partial class ReviewWorkflowsWorkflowStageRelationResponseCollection
    {
        public ICollection<ReviewWorkflowsWorkflowStage> Nodes { get; set; }
    }

    [GraphQlObjectType("UsersPermissionsPermission")]
    public partial class UsersPermissionsPermission : IGenericMorph
    {
        public string DocumentId { get; set; }
        public string Action { get; set; }
        public UsersPermissionsRole Role { get; set; }
        public DateTime? CreatedAt { get; set; }
        public DateTime? UpdatedAt { get; set; }
        public DateTime? PublishedAt { get; set; }
    }

    public partial class UsersPermissionsPermissionRelationResponseCollection
    {
        public ICollection<UsersPermissionsPermission> Nodes { get; set; }
    }

    [GraphQlObjectType("UsersPermissionsRole")]
    public partial class UsersPermissionsRole : IGenericMorph
    {
        public string DocumentId { get; set; }
        public string Name { get; set; }
        public string Description { get; set; }
        public string Type { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("permissions_connection")]
        #endif
        public UsersPermissionsPermissionRelationResponseCollection PermissionsConnection { get; set; }
        public ICollection<UsersPermissionsPermission> Permissions { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("users_connection")]
        #endif
        public UsersPermissionsUserRelationResponseCollection UsersConnection { get; set; }
        public ICollection<UsersPermissionsUser> Users { get; set; }
        public DateTime? CreatedAt { get; set; }
        public DateTime? UpdatedAt { get; set; }
        public DateTime? PublishedAt { get; set; }
    }

    public partial class UsersPermissionsRoleEntityResponseCollection
    {
        public ICollection<UsersPermissionsRole> Nodes { get; set; }
        public Pagination PageInfo { get; set; }
    }

    [GraphQlObjectType("UsersPermissionsUser")]
    public partial class UsersPermissionsUser : IGenericMorph
    {
        public string DocumentId { get; set; }
        public string Username { get; set; }
        public string Email { get; set; }
        public string Provider { get; set; }
        public bool? Confirmed { get; set; }
        public bool? Blocked { get; set; }
        public UsersPermissionsRole Role { get; set; }
        public DateTime? CreatedAt { get; set; }
        public DateTime? UpdatedAt { get; set; }
        public DateTime? PublishedAt { get; set; }
    }

    public partial class UsersPermissionsUserEntityResponse
    {
        public UsersPermissionsUser Data { get; set; }
    }

    public partial class UsersPermissionsUserEntityResponseCollection
    {
        public ICollection<UsersPermissionsUser> Nodes { get; set; }
        public Pagination PageInfo { get; set; }
    }

    public partial class UsersPermissionsUserRelationResponseCollection
    {
        public ICollection<UsersPermissionsUser> Nodes { get; set; }
    }

    [GraphQlObjectType("AboutUs")]
    public partial class AboutUs : IGenericMorph
    {
        public string DocumentId { get; set; }
        public string Title { get; set; }
        public string SmallText { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("BOT_CTA_Text")]
        #endif
        public string BotCtaText { get; set; }
        public ICollection<ComponentHtmlColorTextHtmlColorText> HtmlColorText { get; set; }
        public ICollection<ComponentIconTextIconText> IconText { get; set; }
        public ICollection<ComponentMainCtaMainCta> MainCta { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("sliders_connection")]
        #endif
        public UploadFileRelationResponseCollection SlidersConnection { get; set; }
        public ICollection<UploadFile> Sliders { get; set; }
        public UploadFile TopBg { get; set; }
        public DateTime? CreatedAt { get; set; }
        public DateTime? UpdatedAt { get; set; }
        public DateTime? PublishedAt { get; set; }
    }

    [GraphQlObjectType("Account")]
    public partial class Account : IGenericMorph
    {
        public string DocumentId { get; set; }
        public string Title { get; set; }
        public string SmallText { get; set; }
        public DateTime? CreatedAt { get; set; }
        public DateTime? UpdatedAt { get; set; }
        public DateTime? PublishedAt { get; set; }
    }

    [GraphQlObjectType("AuthAdministrator")]
    public partial class AuthAdministrator : IGenericMorph
    {
        public string DocumentId { get; set; }
        public string Wallet { get; set; }
        public DateTime? CreatedAt { get; set; }
        public DateTime? UpdatedAt { get; set; }
        public DateTime? PublishedAt { get; set; }
    }

    public partial class AuthAdministratorEntityResponseCollection
    {
        public ICollection<AuthAdministrator> Nodes { get; set; }
        public Pagination PageInfo { get; set; }
    }

    [GraphQlObjectType("AuthAdministratorsResource")]
    public partial class AuthAdministratorsResource : IGenericMorph
    {
        public string DocumentId { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("OnlyAdminResources_connection")]
        #endif
        public AuthResourceRelationResponseCollection OnlyAdminResourcesConnection { get; set; }
        public ICollection<AuthResource> OnlyAdminResources { get; set; }
        public DateTime? CreatedAt { get; set; }
        public DateTime? UpdatedAt { get; set; }
        public DateTime? PublishedAt { get; set; }
    }

    [GraphQlObjectType("AuthResource")]
    public partial class AuthResource : IGenericMorph
    {
        public string DocumentId { get; set; }
        public string Name { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("RoleIDs_connection")]
        #endif
        public AuthRoleRelationResponseCollection RoleIDsConnection { get; set; }
        public ICollection<AuthRole> RoleIDs { get; set; }
        public DateTime? CreatedAt { get; set; }
        public DateTime? UpdatedAt { get; set; }
        public DateTime? PublishedAt { get; set; }
    }

    public partial class AuthResourceEntityResponseCollection
    {
        public ICollection<AuthResource> Nodes { get; set; }
        public Pagination PageInfo { get; set; }
    }

    public partial class AuthResourceRelationResponseCollection
    {
        public ICollection<AuthResource> Nodes { get; set; }
    }

    [GraphQlObjectType("AuthRole")]
    public partial class AuthRole : IGenericMorph
    {
        public string DocumentId { get; set; }
        public string Name { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("UserIDs_connection")]
        #endif
        public AuthUserRelationResponseCollection UserIDsConnection { get; set; }
        public ICollection<AuthUser> UserIDs { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("ResourceIDs_connection")]
        #endif
        public AuthResourceRelationResponseCollection ResourceIDsConnection { get; set; }
        public ICollection<AuthResource> ResourceIDs { get; set; }
        public DateTime? CreatedAt { get; set; }
        public DateTime? UpdatedAt { get; set; }
        public DateTime? PublishedAt { get; set; }
    }

    public partial class AuthRoleEntityResponseCollection
    {
        public ICollection<AuthRole> Nodes { get; set; }
        public Pagination PageInfo { get; set; }
    }

    public partial class AuthRoleRelationResponseCollection
    {
        public ICollection<AuthRole> Nodes { get; set; }
    }

    [GraphQlObjectType("AuthUser")]
    public partial class AuthUser : IGenericMorph
    {
        public string DocumentId { get; set; }
        public string Wallet { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("RoleIDs_connection")]
        #endif
        public AuthRoleRelationResponseCollection RoleIDsConnection { get; set; }
        public ICollection<AuthRole> RoleIDs { get; set; }
        public DateTime? CreatedAt { get; set; }
        public DateTime? UpdatedAt { get; set; }
        public DateTime? PublishedAt { get; set; }
    }

    public partial class AuthUserEntityResponseCollection
    {
        public ICollection<AuthUser> Nodes { get; set; }
        public Pagination PageInfo { get; set; }
    }

    public partial class AuthUserRelationResponseCollection
    {
        public ICollection<AuthUser> Nodes { get; set; }
    }

    [GraphQlObjectType("AutoSignUp")]
    public partial class AutoSignUp : IGenericMorph
    {
        public string DocumentId { get; set; }
        public string Wallet { get; set; }
        public string Note { get; set; }
        public decimal? Amount { get; set; }
        public DateTime? CreatedAt { get; set; }
        public DateTime? UpdatedAt { get; set; }
        public DateTime? PublishedAt { get; set; }
    }

    public partial class AutoSignUpEntityResponseCollection
    {
        public ICollection<AutoSignUp> Nodes { get; set; }
        public Pagination PageInfo { get; set; }
    }

    [GraphQlObjectType("Boost")]
    public partial class Boost : IGenericMorph
    {
        public string DocumentId { get; set; }
        public string Title { get; set; }
        public string SmallText { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("BOT_CTA_Text")]
        #endif
        public string BotCtaText { get; set; }
        public string TopBgUrl { get; set; }
        public ICollection<ComponentIconTextIconText> IconText { get; set; }
        public ICollection<ComponentMainCtaMainCta> MainCta { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("sliders_connection")]
        #endif
        public UploadFileRelationResponseCollection SlidersConnection { get; set; }
        public ICollection<UploadFile> Sliders { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("TopBg_connection")]
        #endif
        public UploadFileRelationResponseCollection TopBgConnection { get; set; }
        public ICollection<UploadFile> TopBg { get; set; }
        public DateTime? CreatedAt { get; set; }
        public DateTime? UpdatedAt { get; set; }
        public DateTime? PublishedAt { get; set; }
    }

    [GraphQlObjectType("BuyPoolz")]
    public partial class BuyPoolz : IGenericMorph
    {
        public string DocumentId { get; set; }
        public string Name { get; set; }
        public string Url { get; set; }
        public UploadFile Icon { get; set; }
        public bool? IsDex { get; set; }
        public int? Order { get; set; }
        public DateTime? CreatedAt { get; set; }
        public DateTime? UpdatedAt { get; set; }
        public DateTime? PublishedAt { get; set; }
    }

    public partial class BuyPoolzEntityResponseCollection
    {
        public ICollection<BuyPoolz> Nodes { get; set; }
        public Pagination PageInfo { get; set; }
    }

    [GraphQlObjectType("BuyWith")]
    public partial class BuyWith : IGenericMorph
    {
        public string DocumentId { get; set; }
        public string Name { get; set; }
        public ICollection<ComponentChainAddressesChainAddresses> ChainAddresses { get; set; }
        public long? SourcePoolId { get; set; }
        public DateTime? CreatedAt { get; set; }
        public DateTime? UpdatedAt { get; set; }
        public DateTime? PublishedAt { get; set; }
    }

    public partial class BuyWithEntityResponseCollection
    {
        public ICollection<BuyWith> Nodes { get; set; }
        public Pagination PageInfo { get; set; }
    }

    [GraphQlObjectType("Chain")]
    public partial class Chain : IGenericMorph
    {
        public string DocumentId { get; set; }
        public string Name { get; set; }
        public string Symbol { get; set; }
        public bool? IsTest { get; set; }
        public long? ChainId { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("chain_setting")]
        #endif
        public ChainSetting ChainSetting { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("contracts_on_chain")]
        #endif
        public ContractsOnChain ContractsOnChain { get; set; }
        public DateTime? CreatedAt { get; set; }
        public DateTime? UpdatedAt { get; set; }
        public DateTime? PublishedAt { get; set; }
    }

    public partial class ChainEntityResponseCollection
    {
        public ICollection<Chain> Nodes { get; set; }
        public Pagination PageInfo { get; set; }
    }

    [GraphQlObjectType("ChainSetting")]
    public partial class ChainSetting : IGenericMorph
    {
        public string DocumentId { get; set; }
        public bool? IsEvm { get; set; }
        public string DisplayText { get; set; }
        public UploadFile WhiteLogo { get; set; }
        public bool? Show { get; set; }
        public ComponentColorIconColorIcon ColorIcon { get; set; }
        public bool? ShowInBoutique { get; set; }
        public string ScannerTxUrl { get; set; }
        public Chain Chain { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("lock_token_whitelist")]
        #endif
        public LockTokenWhitelist LockTokenWhitelist { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("projects_informations_connection")]
        #endif
        public ProjectsInformationRelationResponseCollection ProjectsInformationsConnection { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("projects_informations")]
        #endif
        public ICollection<ProjectsInformation> ProjectsInformations { get; set; }
        public DateTime? CreatedAt { get; set; }
        public DateTime? UpdatedAt { get; set; }
        public DateTime? PublishedAt { get; set; }
    }

    public partial class ChainSettingEntityResponseCollection
    {
        public ICollection<ChainSetting> Nodes { get; set; }
        public Pagination PageInfo { get; set; }
    }

    public partial class ChainSettingRelationResponseCollection
    {
        public ICollection<ChainSetting> Nodes { get; set; }
    }

    [GraphQlObjectType("Condition")]
    public partial class Condition : IGenericMorph
    {
        public string DocumentId { get; set; }
        public string Value { get; set; }
        public DateTime? CreatedAt { get; set; }
        public DateTime? UpdatedAt { get; set; }
        public DateTime? PublishedAt { get; set; }
    }

    [GraphQlObjectType("Contract")]
    public partial class Contract : IGenericMorph
    {
        public string DocumentId { get; set; }
        public string NameVersion { get; set; }
        public object Abi { get; set; }
        public object ByteCode { get; set; }
        public string ReleaseNotes { get; set; }
        public string GitLink { get; set; }
        public ComponentCompilerSettingCompilerSettings CompilerSetting { get; set; }
        public DateTime? CreatedAt { get; set; }
        public DateTime? UpdatedAt { get; set; }
        public DateTime? PublishedAt { get; set; }
    }

    public partial class ContractEntityResponseCollection
    {
        public ICollection<Contract> Nodes { get; set; }
        public Pagination PageInfo { get; set; }
    }

    [GraphQlObjectType("ContractType")]
    public partial class ContractTypeData : IGenericMorph
    {
        public string DocumentId { get; set; }
        public string ContractType { get; set; }
        public int? Order { get; set; }
        public bool? IsUpgradable { get; set; }
        public DateTime? CreatedAt { get; set; }
        public DateTime? UpdatedAt { get; set; }
        public DateTime? PublishedAt { get; set; }
    }

    public partial class ContractTypeEntityResponseCollection
    {
        public ICollection<ContractTypeData> Nodes { get; set; }
        public Pagination PageInfo { get; set; }
    }

    [GraphQlObjectType("ContractsOnChain")]
    public partial class ContractsOnChain : IGenericMorph
    {
        public string DocumentId { get; set; }
        public Chain Chain { get; set; }
        public ICollection<ComponentContractOnChainContractOnChain> Contracts { get; set; }
        public int? Decimals { get; set; }
        public string Explorer { get; set; }
        public string Faucet { get; set; }
        public string Rpc { get; set; }
        public string NativeCurrency { get; set; }
        public string WebSocket { get; set; }
        public string TheGraphUrl { get; set; }
        public DateTime? CreatedAt { get; set; }
        public DateTime? UpdatedAt { get; set; }
        public DateTime? PublishedAt { get; set; }
    }

    public partial class ContractsOnChainEntityResponseCollection
    {
        public ICollection<ContractsOnChain> Nodes { get; set; }
        public Pagination PageInfo { get; set; }
    }

    [GraphQlObjectType("Cover")]
    public partial class Cover : IGenericMorph
    {
        public string DocumentId { get; set; }
        public UploadFile Picture { get; set; }
        public DateTime? CreatedAt { get; set; }
        public DateTime? UpdatedAt { get; set; }
        public DateTime? PublishedAt { get; set; }
    }

    public partial class CoverEntityResponseCollection
    {
        public ICollection<Cover> Nodes { get; set; }
        public Pagination PageInfo { get; set; }
    }

    [GraphQlObjectType("DefaultWallet")]
    public partial class DefaultWallet : IGenericMorph
    {
        public string DocumentId { get; set; }
        public string Name { get; set; }
        public string Link { get; set; }
        public int? Order { get; set; }
        public UploadFile Icon { get; set; }
        public DateTime? CreatedAt { get; set; }
        public DateTime? UpdatedAt { get; set; }
        public DateTime? PublishedAt { get; set; }
    }

    public partial class DefaultWalletEntityResponseCollection
    {
        public ICollection<DefaultWallet> Nodes { get; set; }
        public Pagination PageInfo { get; set; }
    }

    [GraphQlObjectType("EvmVersion")]
    public partial class EvmVersionData : IGenericMorph
    {
        public string DocumentId { get; set; }
        public string EvmVersion { get; set; }
        public DateTime? CreatedAt { get; set; }
        public DateTime? UpdatedAt { get; set; }
        public DateTime? PublishedAt { get; set; }
    }

    public partial class EvmVersionEntityResponseCollection
    {
        public ICollection<EvmVersionData> Nodes { get; set; }
        public Pagination PageInfo { get; set; }
    }

    [GraphQlObjectType("Footer")]
    public partial class Footer : IGenericMorph
    {
        public string DocumentId { get; set; }
        public ICollection<ComponentSimpleUrlSimpleUrl> Company { get; set; }
        public ICollection<ComponentSimpleUrlSimpleUrl> Help { get; set; }
        public ICollection<ComponentSimpleUrlSimpleUrl> Information { get; set; }
        public ICollection<ComponentSimpleUrlSimpleUrl> Social { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("Boost_Social")]
        #endif
        public ICollection<ComponentSimpleUrlSimpleUrl> BoostSocial { get; set; }
        public DateTime? CreatedAt { get; set; }
        public DateTime? UpdatedAt { get; set; }
        public DateTime? PublishedAt { get; set; }
    }

    [GraphQlObjectType("Grow")]
    public partial class Grow : IGenericMorph
    {
        public string DocumentId { get; set; }
        public EnumGrowReward? Reward { get; set; }
        public string Text { get; set; }
        public UploadFile MainIcon { get; set; }
        public string ProjectName { get; set; }
        public int? Participants { get; set; }
        public UploadFile MainPicture { get; set; }
        public DateTime? StartTime { get; set; }
        public string SubTitle { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("data_ccode")]
        #endif
        public string DataCcode { get; set; }
        public string DescriptionMainText { get; set; }
        public string DescriptionSubText { get; set; }
        public DateTime? FinishTime { get; set; }
        public UploadFile Banner { get; set; }
        public string BannerUrl { get; set; }
        public string BannerText { get; set; }
        public int? Order { get; set; }
        public bool? ShowInMainBanner { get; set; }
        public bool? Show { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("grow_badge")]
        #endif
        public GrowBadge GrowBadge { get; set; }
        public DateTime? CreatedAt { get; set; }
        public DateTime? UpdatedAt { get; set; }
        public DateTime? PublishedAt { get; set; }
    }

    public partial class GrowEntityResponseCollection
    {
        public ICollection<Grow> Nodes { get; set; }
        public Pagination PageInfo { get; set; }
    }

    [GraphQlObjectType("GrowBadge")]
    public partial class GrowBadge : IGenericMorph
    {
        public string DocumentId { get; set; }
        public string Name { get; set; }
        public string BackgroundColor { get; set; }
        public string TooltipText { get; set; }
        public string Color { get; set; }
        public DateTime? CreatedAt { get; set; }
        public DateTime? UpdatedAt { get; set; }
        public DateTime? PublishedAt { get; set; }
    }

    public partial class GrowBadgeEntityResponseCollection
    {
        public ICollection<GrowBadge> Nodes { get; set; }
        public Pagination PageInfo { get; set; }
    }

    [GraphQlObjectType("Header")]
    public partial class Header : IGenericMorph
    {
        public string DocumentId { get; set; }
        public ICollection<ComponentHeaderSimpleUrlHeaderSimpleUrl> HeaderList { get; set; }
        public DateTime? CreatedAt { get; set; }
        public DateTime? UpdatedAt { get; set; }
        public DateTime? PublishedAt { get; set; }
    }

    [GraphQlObjectType("IdoBadge")]
    public partial class IdoBadge : IGenericMorph
    {
        public string DocumentId { get; set; }
        public string Name { get; set; }
        public string ExplainText { get; set; }
        public string ColorCode { get; set; }
        public DateTime? CreatedAt { get; set; }
        public DateTime? UpdatedAt { get; set; }
        public DateTime? PublishedAt { get; set; }
    }

    public partial class IdoBadgeEntityResponseCollection
    {
        public ICollection<IdoBadge> Nodes { get; set; }
        public Pagination PageInfo { get; set; }
    }

    [GraphQlObjectType("IgnoreLeaderBoardWallet")]
    public partial class IgnoreLeaderBoardWallet : IGenericMorph
    {
        public string DocumentId { get; set; }
        public string Wallet { get; set; }
        public string Reason { get; set; }
        public DateTime? CreatedAt { get; set; }
        public DateTime? UpdatedAt { get; set; }
        public DateTime? PublishedAt { get; set; }
    }

    public partial class IgnoreLeaderBoardWalletEntityResponseCollection
    {
        public ICollection<IgnoreLeaderBoardWallet> Nodes { get; set; }
        public Pagination PageInfo { get; set; }
    }

    [GraphQlObjectType("InvestTerm")]
    public partial class InvestTerm : IGenericMorph
    {
        public string DocumentId { get; set; }
        public string Value { get; set; }
        public DateTime? CreatedAt { get; set; }
        public DateTime? UpdatedAt { get; set; }
        public DateTime? PublishedAt { get; set; }
    }

    [GraphQlObjectType("Investor")]
    public partial class Investor : IGenericMorph
    {
        public string DocumentId { get; set; }
        public string Name { get; set; }
        public UploadFile Icon { get; set; }
        public DateTime? CreatedAt { get; set; }
        public DateTime? UpdatedAt { get; set; }
        public DateTime? PublishedAt { get; set; }
    }

    public partial class InvestorEntityResponseCollection
    {
        public ICollection<Investor> Nodes { get; set; }
        public Pagination PageInfo { get; set; }
    }

    [GraphQlObjectType("LatestType")]
    public partial class LatestType : IGenericMorph
    {
        public string DocumentId { get; set; }
        public ICollection<ComponentVersionVersion> Version { get; set; }
        public DateTime? CreatedAt { get; set; }
        public DateTime? UpdatedAt { get; set; }
        public DateTime? PublishedAt { get; set; }
    }

    [GraphQlObjectType("LinkType")]
    public partial class LinkType : IGenericMorph
    {
        public string DocumentId { get; set; }
        public string Name { get; set; }
        public bool? IsOnTop { get; set; }
        public UploadFile DarkIcon { get; set; }
        public UploadFile LightIcon { get; set; }
        public DateTime? CreatedAt { get; set; }
        public DateTime? UpdatedAt { get; set; }
        public DateTime? PublishedAt { get; set; }
    }

    public partial class LinkTypeEntityResponseCollection
    {
        public ICollection<LinkType> Nodes { get; set; }
        public Pagination PageInfo { get; set; }
    }

    [GraphQlObjectType("LockPoolzTerm")]
    public partial class LockPoolzTerm : IGenericMorph
    {
        public string DocumentId { get; set; }
        public string Value { get; set; }
        public DateTime? CreatedAt { get; set; }
        public DateTime? UpdatedAt { get; set; }
        public DateTime? PublishedAt { get; set; }
    }

    [GraphQlObjectType("LockTokenWhitelist")]
    public partial class LockTokenWhitelist : IGenericMorph
    {
        public string DocumentId { get; set; }
        public string Name { get; set; }
        public string Address { get; set; }
        public EnumLocktokenwhitelistType? Type { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("chain_settings_connection")]
        #endif
        public ChainSettingRelationResponseCollection ChainSettingsConnection { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("chain_settings")]
        #endif
        public ICollection<ChainSetting> ChainSettings { get; set; }
        public DateTime? CreatedAt { get; set; }
        public DateTime? UpdatedAt { get; set; }
        public DateTime? PublishedAt { get; set; }
    }

    public partial class LockTokenWhitelistEntityResponseCollection
    {
        public ICollection<LockTokenWhitelist> Nodes { get; set; }
        public Pagination PageInfo { get; set; }
    }

    [GraphQlObjectType("Main")]
    public partial class Main : IGenericMorph
    {
        public string DocumentId { get; set; }
        public ComponentSectionSection Sections { get; set; }
        public DateTime? CreatedAt { get; set; }
        public DateTime? UpdatedAt { get; set; }
        public DateTime? PublishedAt { get; set; }
    }

    [GraphQlObjectType("MarketCapBadge")]
    public partial class MarketCapBadge : IGenericMorph
    {
        public string DocumentId { get; set; }
        public string Link { get; set; }
        public UploadFile Icon { get; set; }
        public DateTime? CreatedAt { get; set; }
        public DateTime? UpdatedAt { get; set; }
        public DateTime? PublishedAt { get; set; }
    }

    public partial class MarketCapBadgeEntityResponseCollection
    {
        public ICollection<MarketCapBadge> Nodes { get; set; }
        public Pagination PageInfo { get; set; }
    }

    [GraphQlObjectType("MediaKit")]
    public partial class MediaKit : IGenericMorph
    {
        public string DocumentId { get; set; }
        public string Name { get; set; }
        public string Text { get; set; }
        public ComponentDictionaryLinks Link { get; set; }
        public DateTime? CreatedAt { get; set; }
        public DateTime? UpdatedAt { get; set; }
        public DateTime? PublishedAt { get; set; }
    }

    public partial class MediaKitEntityResponseCollection
    {
        public ICollection<MediaKit> Nodes { get; set; }
        public Pagination PageInfo { get; set; }
    }

    [GraphQlObjectType("NonEvmChain")]
    public partial class NonEvmChain : IGenericMorph
    {
        public string DocumentId { get; set; }
        public UploadFile Icon { get; set; }
        public string DisplayText { get; set; }
        public string Regex { get; set; }
        public DateTime? CreatedAt { get; set; }
        public DateTime? UpdatedAt { get; set; }
        public DateTime? PublishedAt { get; set; }
    }

    public partial class NonEvmChainEntityResponseCollection
    {
        public ICollection<NonEvmChain> Nodes { get; set; }
        public Pagination PageInfo { get; set; }
    }

    [GraphQlObjectType("OpenGrant")]
    public partial class OpenGrant : IGenericMorph
    {
        public string DocumentId { get; set; }
        public string Name { get; set; }
        public string Text { get; set; }
        public string Link { get; set; }
        public UploadFile Icon { get; set; }
        public DateTime? CreatedAt { get; set; }
        public DateTime? UpdatedAt { get; set; }
        public DateTime? PublishedAt { get; set; }
    }

    public partial class OpenGrantEntityResponseCollection
    {
        public ICollection<OpenGrant> Nodes { get; set; }
        public Pagination PageInfo { get; set; }
    }

    [GraphQlObjectType("OurPartner")]
    public partial class OurPartner : IGenericMorph
    {
        public string DocumentId { get; set; }
        public string Name { get; set; }
        public UploadFile DarkLogo { get; set; }
        public DateTime? CreatedAt { get; set; }
        public DateTime? UpdatedAt { get; set; }
        public DateTime? PublishedAt { get; set; }
    }

    public partial class OurPartnerEntityResponseCollection
    {
        public ICollection<OurPartner> Nodes { get; set; }
        public Pagination PageInfo { get; set; }
    }

    [GraphQlObjectType("PageInfo")]
    public partial class PageInfo : IGenericMorph
    {
        public string DocumentId { get; set; }
        public string Link { get; set; }
        public string Title { get; set; }
        public string Description { get; set; }
        public DateTime? CreatedAt { get; set; }
        public DateTime? UpdatedAt { get; set; }
        public DateTime? PublishedAt { get; set; }
    }

    public partial class PageInfoEntityResponseCollection
    {
        public ICollection<PageInfo> Nodes { get; set; }
        public Pagination PageInfo { get; set; }
    }

    [GraphQlObjectType("PoolzBoutique")]
    public partial class PoolzBoutique : IGenericMorph
    {
        public string DocumentId { get; set; }
        public string ProjectName { get; set; }
        public string TokenAddress { get; set; }
        public int? ChainId { get; set; }
        public UploadFile Logo { get; set; }
        public string WebSite { get; set; }
        public string Twitter { get; set; }
        public string Telegram { get; set; }
        public string Discord { get; set; }
        public string Color { get; set; }
        public DateTime? CreatedAt { get; set; }
        public DateTime? UpdatedAt { get; set; }
        public DateTime? PublishedAt { get; set; }
    }

    public partial class PoolzBoutiqueEntityResponseCollection
    {
        public ICollection<PoolzBoutique> Nodes { get; set; }
        public Pagination PageInfo { get; set; }
    }

    [GraphQlObjectType("PragmaVersion")]
    public partial class PragmaVersionData : IGenericMorph
    {
        public string DocumentId { get; set; }
        public string PragmaVersion { get; set; }
        public DateTime? CreatedAt { get; set; }
        public DateTime? UpdatedAt { get; set; }
        public DateTime? PublishedAt { get; set; }
    }

    public partial class PragmaVersionEntityResponseCollection
    {
        public ICollection<PragmaVersionData> Nodes { get; set; }
        public Pagination PageInfo { get; set; }
    }

    [GraphQlObjectType("Privacy")]
    public partial class Privacy : IGenericMorph
    {
        public string DocumentId { get; set; }
        public string Value { get; set; }
        public DateTime? CreatedAt { get; set; }
        public DateTime? UpdatedAt { get; set; }
        public DateTime? PublishedAt { get; set; }
    }

    [GraphQlObjectType("ProjectsInformation")]
    public partial class ProjectsInformation : IGenericMorph
    {
        public string DocumentId { get; set; }
        public string CryptorankKey { get; set; }
        public int? PoolzBackId { get; set; }
        public int? WhitelistId { get; set; }
        public string Name { get; set; }
        public UploadFile Logo { get; set; }
        public UploadFile Block { get; set; }
        public ComponentVisualTextVisualText VisualText { get; set; }
        public ComponentUploadPoolUploadPool UploadPool { get; set; }
        public bool? IsShow { get; set; }
        public ComponentSyntheticZoneSyntetic Syntetic { get; set; }
        public ComponentSyntheticZoneSyntetic Original { get; set; }
        public ICollection<ComponentInvestorsInvestors> Investors { get; set; }
        public string CoinmarketcapKey { get; set; }
        public string CoingeckoKey { get; set; }
        public bool? MainListShow { get; set; }
        public ComponentFullTokenDistributionFullTokenDistribution FullTokenDistribution { get; set; }
        public decimal? Athroi { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("chain_setting")]
        #endif
        public ChainSetting ChainSetting { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("ido_badge")]
        #endif
        public IdoBadge IdoBadge { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("Warning_Text")]
        #endif
        public string WarningText { get; set; }
        public string BlockLocations { get; set; }
        public ICollection<ComponentPhaseStartEndAmount> ProjectPhases { get; set; }
        public int? Order { get; set; }
        public DateTime? CreatedAt { get; set; }
        public DateTime? UpdatedAt { get; set; }
        public DateTime? PublishedAt { get; set; }
    }

    public partial class ProjectsInformationEntityResponseCollection
    {
        public ICollection<ProjectsInformation> Nodes { get; set; }
        public Pagination PageInfo { get; set; }
    }

    public partial class ProjectsInformationRelationResponseCollection
    {
        public ICollection<ProjectsInformation> Nodes { get; set; }
    }

    [GraphQlObjectType("SeasonPass")]
    public partial class SeasonPass : IGenericMorph
    {
        public string DocumentId { get; set; }
        public string Wallet { get; set; }
        public decimal? Amount { get; set; }
        public DateTime? ValidUntil { get; set; }
        public string Note { get; set; }
        public DateTime? CreatedAt { get; set; }
        public DateTime? UpdatedAt { get; set; }
        public DateTime? PublishedAt { get; set; }
    }

    public partial class SeasonPassEntityResponseCollection
    {
        public ICollection<SeasonPass> Nodes { get; set; }
        public Pagination PageInfo { get; set; }
    }

    [GraphQlObjectType("StakingCoolDown")]
    public partial class StakingCoolDown : IGenericMorph
    {
        public string DocumentId { get; set; }
        public string Amount { get; set; }
        public string CoolDownPeriod { get; set; }
        public int? Type { get; set; }
        public string Text { get; set; }
        public DateTime? CreatedAt { get; set; }
        public DateTime? UpdatedAt { get; set; }
        public DateTime? PublishedAt { get; set; }
    }

    public partial class StakingCoolDownEntityResponseCollection
    {
        public ICollection<StakingCoolDown> Nodes { get; set; }
        public Pagination PageInfo { get; set; }
    }

    [GraphQlObjectType("Tokenomic")]
    public partial class Tokenomic : IGenericMorph
    {
        public string DocumentId { get; set; }
        public ICollection<ComponentChainAddressesOnlyAddress> List { get; set; }
        public string PoolxToken { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("chain_setting")]
        #endif
        public ChainSetting ChainSetting { get; set; }
        public string MultiCallContractAddress { get; set; }
        public DateTime? CreatedAt { get; set; }
        public DateTime? UpdatedAt { get; set; }
        public DateTime? PublishedAt { get; set; }
    }

    [GraphQlObjectType("TradeContract")]
    public partial class TradeContract : IGenericMorph
    {
        public string DocumentId { get; set; }
        public string Name { get; set; }
        public ICollection<ComponentTokenomicsListOfStrings> AdressList { get; set; }
        public DateTime? CreatedAt { get; set; }
        public DateTime? UpdatedAt { get; set; }
        public DateTime? PublishedAt { get; set; }
    }

    public partial class TradeContractEntityResponseCollection
    {
        public ICollection<TradeContract> Nodes { get; set; }
        public Pagination PageInfo { get; set; }
    }

    [GraphQlObjectType("VaultFaq")]
    public partial class VaultFaq : IGenericMorph
    {
        public string DocumentId { get; set; }
        public string ShortText { get; set; }
        public string LongText { get; set; }
        public DateTime? CreatedAt { get; set; }
        public DateTime? UpdatedAt { get; set; }
        public DateTime? PublishedAt { get; set; }
    }

    public partial class VaultFaqEntityResponseCollection
    {
        public ICollection<VaultFaq> Nodes { get; set; }
        public Pagination PageInfo { get; set; }
    }

    public partial interface IGenericMorph
    {
    }

    public partial class UsersPermissionsMe
    {
        public string Id { get; set; }
        public string DocumentId { get; set; }
        public string Username { get; set; }
        public string Email { get; set; }
        public bool? Confirmed { get; set; }
        public bool? Blocked { get; set; }
        public UsersPermissionsMeRole Role { get; set; }
    }

    public partial class UsersPermissionsMeRole
    {
        public string Id { get; set; }
        public string Name { get; set; }
        public string Description { get; set; }
        public string Type { get; set; }
    }

    public partial class UsersPermissionsPasswordPayload
    {
        public bool? Ok { get; set; }
    }

    public partial class UsersPermissionsLoginPayload
    {
        public string Jwt { get; set; }
        public UsersPermissionsMe User { get; set; }
    }

    public partial class UsersPermissionsCreateRolePayload
    {
        public bool? Ok { get; set; }
    }

    public partial class UsersPermissionsUpdateRolePayload
    {
        public bool? Ok { get; set; }
    }

    public partial class UsersPermissionsDeleteRolePayload
    {
        public bool? Ok { get; set; }
    }

    public partial class Query
    {
        public UploadFile UploadFile { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("uploadFiles_connection")]
        #endif
        public UploadFileEntityResponseCollection UploadFilesConnection { get; set; }
        public ICollection<UploadFile> UploadFiles { get; set; }
        public I18NLocale I18NLocale { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("i18NLocales_connection")]
        #endif
        public I18NLocaleEntityResponseCollection I18NLocalesConnection { get; set; }
        public ICollection<I18NLocale> I18NLocales { get; set; }
        public ReviewWorkflowsWorkflow ReviewWorkflowsWorkflow { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("reviewWorkflowsWorkflows_connection")]
        #endif
        public ReviewWorkflowsWorkflowEntityResponseCollection ReviewWorkflowsWorkflowsConnection { get; set; }
        public ICollection<ReviewWorkflowsWorkflow> ReviewWorkflowsWorkflows { get; set; }
        public ReviewWorkflowsWorkflowStage ReviewWorkflowsWorkflowStage { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("reviewWorkflowsWorkflowStages_connection")]
        #endif
        public ReviewWorkflowsWorkflowStageEntityResponseCollection ReviewWorkflowsWorkflowStagesConnection { get; set; }
        public ICollection<ReviewWorkflowsWorkflowStage> ReviewWorkflowsWorkflowStages { get; set; }
        public UsersPermissionsRole UsersPermissionsRole { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("usersPermissionsRoles_connection")]
        #endif
        public UsersPermissionsRoleEntityResponseCollection UsersPermissionsRolesConnection { get; set; }
        public ICollection<UsersPermissionsRole> UsersPermissionsRoles { get; set; }
        public UsersPermissionsUser UsersPermissionsUser { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("usersPermissionsUsers_connection")]
        #endif
        public UsersPermissionsUserEntityResponseCollection UsersPermissionsUsersConnection { get; set; }
        public ICollection<UsersPermissionsUser> UsersPermissionsUsers { get; set; }
        public AboutUs AboutUs { get; set; }
        public Account Account { get; set; }
        public AuthAdministrator AuthAdministrator { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("authAdministrators_connection")]
        #endif
        public AuthAdministratorEntityResponseCollection AuthAdministratorsConnection { get; set; }
        public ICollection<AuthAdministrator> AuthAdministrators { get; set; }
        public AuthAdministratorsResource AuthAdministratorsResource { get; set; }
        public AuthResource AuthResource { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("authResources_connection")]
        #endif
        public AuthResourceEntityResponseCollection AuthResourcesConnection { get; set; }
        public ICollection<AuthResource> AuthResources { get; set; }
        public AuthRole AuthRole { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("authRoles_connection")]
        #endif
        public AuthRoleEntityResponseCollection AuthRolesConnection { get; set; }
        public ICollection<AuthRole> AuthRoles { get; set; }
        public AuthUser AuthUser { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("authUsers_connection")]
        #endif
        public AuthUserEntityResponseCollection AuthUsersConnection { get; set; }
        public ICollection<AuthUser> AuthUsers { get; set; }
        public AutoSignUp AutoSignUp { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("autoSignUps_connection")]
        #endif
        public AutoSignUpEntityResponseCollection AutoSignUpsConnection { get; set; }
        public ICollection<AutoSignUp> AutoSignUps { get; set; }
        public Boost Boost { get; set; }
        public BuyPoolz BuyPoolz { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("buyPoolzs_connection")]
        #endif
        public BuyPoolzEntityResponseCollection BuyPoolzsConnection { get; set; }
        public ICollection<BuyPoolz> BuyPoolzs { get; set; }
        public BuyWith BuyWith { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("buyWiths_connection")]
        #endif
        public BuyWithEntityResponseCollection BuyWithsConnection { get; set; }
        public ICollection<BuyWith> BuyWiths { get; set; }
        public Chain Chain { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("chains_connection")]
        #endif
        public ChainEntityResponseCollection ChainsConnection { get; set; }
        public ICollection<Chain> Chains { get; set; }
        public ChainSetting ChainSetting { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("chainSettings_connection")]
        #endif
        public ChainSettingEntityResponseCollection ChainSettingsConnection { get; set; }
        public ICollection<ChainSetting> ChainSettings { get; set; }
        public Condition Condition { get; set; }
        public Contract Contract { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("contracts_connection")]
        #endif
        public ContractEntityResponseCollection ContractsConnection { get; set; }
        public ICollection<Contract> Contracts { get; set; }
        public ContractTypeData ContractType { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("contractTypes_connection")]
        #endif
        public ContractTypeEntityResponseCollection ContractTypesConnection { get; set; }
        public ICollection<ContractTypeData> ContractTypes { get; set; }
        public ContractsOnChain ContractsOnChain { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("contractsOnChains_connection")]
        #endif
        public ContractsOnChainEntityResponseCollection ContractsOnChainsConnection { get; set; }
        public ICollection<ContractsOnChain> ContractsOnChains { get; set; }
        public Cover Cover { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("covers_connection")]
        #endif
        public CoverEntityResponseCollection CoversConnection { get; set; }
        public ICollection<Cover> Covers { get; set; }
        public DefaultWallet DefaultWallet { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("defaultWallets_connection")]
        #endif
        public DefaultWalletEntityResponseCollection DefaultWalletsConnection { get; set; }
        public ICollection<DefaultWallet> DefaultWallets { get; set; }
        public EvmVersionData EvmVersion { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("evmVersions_connection")]
        #endif
        public EvmVersionEntityResponseCollection EvmVersionsConnection { get; set; }
        public ICollection<EvmVersionData> EvmVersions { get; set; }
        public Footer Footer { get; set; }
        public Grow Grow { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("grows_connection")]
        #endif
        public GrowEntityResponseCollection GrowsConnection { get; set; }
        public ICollection<Grow> Grows { get; set; }
        public GrowBadge GrowBadge { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("growBadges_connection")]
        #endif
        public GrowBadgeEntityResponseCollection GrowBadgesConnection { get; set; }
        public ICollection<GrowBadge> GrowBadges { get; set; }
        public Header Header { get; set; }
        public IdoBadge IdoBadge { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("idoBadges_connection")]
        #endif
        public IdoBadgeEntityResponseCollection IdoBadgesConnection { get; set; }
        public ICollection<IdoBadge> IdoBadges { get; set; }
        public IgnoreLeaderBoardWallet IgnoreLeaderBoardWallet { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("ignoreLeaderBoardWallets_connection")]
        #endif
        public IgnoreLeaderBoardWalletEntityResponseCollection IgnoreLeaderBoardWalletsConnection { get; set; }
        public ICollection<IgnoreLeaderBoardWallet> IgnoreLeaderBoardWallets { get; set; }
        public InvestTerm InvestTerm { get; set; }
        public Investor Investor { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("investors_connection")]
        #endif
        public InvestorEntityResponseCollection InvestorsConnection { get; set; }
        public ICollection<Investor> Investors { get; set; }
        public LatestType LatestType { get; set; }
        public LinkType LinkType { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("linkTypes_connection")]
        #endif
        public LinkTypeEntityResponseCollection LinkTypesConnection { get; set; }
        public ICollection<LinkType> LinkTypes { get; set; }
        public LockPoolzTerm LockPoolzTerm { get; set; }
        public LockTokenWhitelist LockTokenWhitelist { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("lockTokenWhitelists_connection")]
        #endif
        public LockTokenWhitelistEntityResponseCollection LockTokenWhitelistsConnection { get; set; }
        public ICollection<LockTokenWhitelist> LockTokenWhitelists { get; set; }
        public Main Main { get; set; }
        public MarketCapBadge MarketCapBadge { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("marketCapBadges_connection")]
        #endif
        public MarketCapBadgeEntityResponseCollection MarketCapBadgesConnection { get; set; }
        public ICollection<MarketCapBadge> MarketCapBadges { get; set; }
        public MediaKit MediaKit { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("mediaKits_connection")]
        #endif
        public MediaKitEntityResponseCollection MediaKitsConnection { get; set; }
        public ICollection<MediaKit> MediaKits { get; set; }
        public NonEvmChain NonEvmChain { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("nonEvmChains_connection")]
        #endif
        public NonEvmChainEntityResponseCollection NonEvmChainsConnection { get; set; }
        public ICollection<NonEvmChain> NonEvmChains { get; set; }
        public OpenGrant OpenGrant { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("openGrants_connection")]
        #endif
        public OpenGrantEntityResponseCollection OpenGrantsConnection { get; set; }
        public ICollection<OpenGrant> OpenGrants { get; set; }
        public OurPartner OurPartner { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("ourPartners_connection")]
        #endif
        public OurPartnerEntityResponseCollection OurPartnersConnection { get; set; }
        public ICollection<OurPartner> OurPartners { get; set; }
        public PageInfo PageInfo { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("pageInfos_connection")]
        #endif
        public PageInfoEntityResponseCollection PageInfosConnection { get; set; }
        public ICollection<PageInfo> PageInfos { get; set; }
        public PoolzBoutique PoolzBoutique { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("poolzBoutiques_connection")]
        #endif
        public PoolzBoutiqueEntityResponseCollection PoolzBoutiquesConnection { get; set; }
        public ICollection<PoolzBoutique> PoolzBoutiques { get; set; }
        public PragmaVersionData PragmaVersion { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("pragmaVersions_connection")]
        #endif
        public PragmaVersionEntityResponseCollection PragmaVersionsConnection { get; set; }
        public ICollection<PragmaVersionData> PragmaVersions { get; set; }
        public Privacy Privacy { get; set; }
        public ProjectsInformation ProjectsInformation { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("projectsInformations_connection")]
        #endif
        public ProjectsInformationEntityResponseCollection ProjectsInformationsConnection { get; set; }
        public ICollection<ProjectsInformation> ProjectsInformations { get; set; }
        public SeasonPass SeasonPass { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("seasonPasses_connection")]
        #endif
        public SeasonPassEntityResponseCollection SeasonPassesConnection { get; set; }
        public ICollection<SeasonPass> SeasonPasses { get; set; }
        public StakingCoolDown StakingCoolDown { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("stakingCoolDowns_connection")]
        #endif
        public StakingCoolDownEntityResponseCollection StakingCoolDownsConnection { get; set; }
        public ICollection<StakingCoolDown> StakingCoolDowns { get; set; }
        public Tokenomic Tokenomic { get; set; }
        public TradeContract TradeContract { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("tradeContracts_connection")]
        #endif
        public TradeContractEntityResponseCollection TradeContractsConnection { get; set; }
        public ICollection<TradeContract> TradeContracts { get; set; }
        public VaultFaq VaultFaq { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("vaultFaqs_connection")]
        #endif
        public VaultFaqEntityResponseCollection VaultFaqsConnection { get; set; }
        public ICollection<VaultFaq> VaultFaqs { get; set; }
        public UsersPermissionsMe Me { get; set; }
    }

    public partial class Mutation
    {
        public ReviewWorkflowsWorkflow CreateReviewWorkflowsWorkflow { get; set; }
        public ReviewWorkflowsWorkflow UpdateReviewWorkflowsWorkflow { get; set; }
        public DeleteMutationResponse DeleteReviewWorkflowsWorkflow { get; set; }
        public ReviewWorkflowsWorkflowStage CreateReviewWorkflowsWorkflowStage { get; set; }
        public ReviewWorkflowsWorkflowStage UpdateReviewWorkflowsWorkflowStage { get; set; }
        public DeleteMutationResponse DeleteReviewWorkflowsWorkflowStage { get; set; }
        public AboutUs UpdateAboutUs { get; set; }
        public DeleteMutationResponse DeleteAboutUs { get; set; }
        public Account UpdateAccount { get; set; }
        public DeleteMutationResponse DeleteAccount { get; set; }
        public AuthAdministrator CreateAuthAdministrator { get; set; }
        public AuthAdministrator UpdateAuthAdministrator { get; set; }
        public DeleteMutationResponse DeleteAuthAdministrator { get; set; }
        public AuthAdministratorsResource UpdateAuthAdministratorsResource { get; set; }
        public DeleteMutationResponse DeleteAuthAdministratorsResource { get; set; }
        public AuthResource CreateAuthResource { get; set; }
        public AuthResource UpdateAuthResource { get; set; }
        public DeleteMutationResponse DeleteAuthResource { get; set; }
        public AuthRole CreateAuthRole { get; set; }
        public AuthRole UpdateAuthRole { get; set; }
        public DeleteMutationResponse DeleteAuthRole { get; set; }
        public AuthUser CreateAuthUser { get; set; }
        public AuthUser UpdateAuthUser { get; set; }
        public DeleteMutationResponse DeleteAuthUser { get; set; }
        public AutoSignUp CreateAutoSignUp { get; set; }
        public AutoSignUp UpdateAutoSignUp { get; set; }
        public DeleteMutationResponse DeleteAutoSignUp { get; set; }
        public Boost UpdateBoost { get; set; }
        public DeleteMutationResponse DeleteBoost { get; set; }
        public BuyPoolz CreateBuyPoolz { get; set; }
        public BuyPoolz UpdateBuyPoolz { get; set; }
        public DeleteMutationResponse DeleteBuyPoolz { get; set; }
        public BuyWith CreateBuyWith { get; set; }
        public BuyWith UpdateBuyWith { get; set; }
        public DeleteMutationResponse DeleteBuyWith { get; set; }
        public Chain CreateChain { get; set; }
        public Chain UpdateChain { get; set; }
        public DeleteMutationResponse DeleteChain { get; set; }
        public ChainSetting CreateChainSetting { get; set; }
        public ChainSetting UpdateChainSetting { get; set; }
        public DeleteMutationResponse DeleteChainSetting { get; set; }
        public Condition UpdateCondition { get; set; }
        public DeleteMutationResponse DeleteCondition { get; set; }
        public Contract CreateContract { get; set; }
        public Contract UpdateContract { get; set; }
        public DeleteMutationResponse DeleteContract { get; set; }
        public ContractTypeData CreateContractType { get; set; }
        public ContractTypeData UpdateContractType { get; set; }
        public DeleteMutationResponse DeleteContractType { get; set; }
        public ContractsOnChain CreateContractsOnChain { get; set; }
        public ContractsOnChain UpdateContractsOnChain { get; set; }
        public DeleteMutationResponse DeleteContractsOnChain { get; set; }
        public Cover CreateCover { get; set; }
        public Cover UpdateCover { get; set; }
        public DeleteMutationResponse DeleteCover { get; set; }
        public DefaultWallet CreateDefaultWallet { get; set; }
        public DefaultWallet UpdateDefaultWallet { get; set; }
        public DeleteMutationResponse DeleteDefaultWallet { get; set; }
        public EvmVersionData CreateEvmVersion { get; set; }
        public EvmVersionData UpdateEvmVersion { get; set; }
        public DeleteMutationResponse DeleteEvmVersion { get; set; }
        public Footer UpdateFooter { get; set; }
        public DeleteMutationResponse DeleteFooter { get; set; }
        public Grow CreateGrow { get; set; }
        public Grow UpdateGrow { get; set; }
        public DeleteMutationResponse DeleteGrow { get; set; }
        public GrowBadge CreateGrowBadge { get; set; }
        public GrowBadge UpdateGrowBadge { get; set; }
        public DeleteMutationResponse DeleteGrowBadge { get; set; }
        public Header UpdateHeader { get; set; }
        public DeleteMutationResponse DeleteHeader { get; set; }
        public IdoBadge CreateIdoBadge { get; set; }
        public IdoBadge UpdateIdoBadge { get; set; }
        public DeleteMutationResponse DeleteIdoBadge { get; set; }
        public IgnoreLeaderBoardWallet CreateIgnoreLeaderBoardWallet { get; set; }
        public IgnoreLeaderBoardWallet UpdateIgnoreLeaderBoardWallet { get; set; }
        public DeleteMutationResponse DeleteIgnoreLeaderBoardWallet { get; set; }
        public InvestTerm UpdateInvestTerm { get; set; }
        public DeleteMutationResponse DeleteInvestTerm { get; set; }
        public Investor CreateInvestor { get; set; }
        public Investor UpdateInvestor { get; set; }
        public DeleteMutationResponse DeleteInvestor { get; set; }
        public LatestType UpdateLatestType { get; set; }
        public DeleteMutationResponse DeleteLatestType { get; set; }
        public LinkType CreateLinkType { get; set; }
        public LinkType UpdateLinkType { get; set; }
        public DeleteMutationResponse DeleteLinkType { get; set; }
        public LockPoolzTerm UpdateLockPoolzTerm { get; set; }
        public DeleteMutationResponse DeleteLockPoolzTerm { get; set; }
        public LockTokenWhitelist CreateLockTokenWhitelist { get; set; }
        public LockTokenWhitelist UpdateLockTokenWhitelist { get; set; }
        public DeleteMutationResponse DeleteLockTokenWhitelist { get; set; }
        public Main UpdateMain { get; set; }
        public DeleteMutationResponse DeleteMain { get; set; }
        public MarketCapBadge CreateMarketCapBadge { get; set; }
        public MarketCapBadge UpdateMarketCapBadge { get; set; }
        public DeleteMutationResponse DeleteMarketCapBadge { get; set; }
        public MediaKit CreateMediaKit { get; set; }
        public MediaKit UpdateMediaKit { get; set; }
        public DeleteMutationResponse DeleteMediaKit { get; set; }
        public NonEvmChain CreateNonEvmChain { get; set; }
        public NonEvmChain UpdateNonEvmChain { get; set; }
        public DeleteMutationResponse DeleteNonEvmChain { get; set; }
        public OpenGrant CreateOpenGrant { get; set; }
        public OpenGrant UpdateOpenGrant { get; set; }
        public DeleteMutationResponse DeleteOpenGrant { get; set; }
        public OurPartner CreateOurPartner { get; set; }
        public OurPartner UpdateOurPartner { get; set; }
        public DeleteMutationResponse DeleteOurPartner { get; set; }
        public PageInfo CreatePageInfo { get; set; }
        public PageInfo UpdatePageInfo { get; set; }
        public DeleteMutationResponse DeletePageInfo { get; set; }
        public PoolzBoutique CreatePoolzBoutique { get; set; }
        public PoolzBoutique UpdatePoolzBoutique { get; set; }
        public DeleteMutationResponse DeletePoolzBoutique { get; set; }
        public PragmaVersionData CreatePragmaVersion { get; set; }
        public PragmaVersionData UpdatePragmaVersion { get; set; }
        public DeleteMutationResponse DeletePragmaVersion { get; set; }
        public Privacy UpdatePrivacy { get; set; }
        public DeleteMutationResponse DeletePrivacy { get; set; }
        public ProjectsInformation CreateProjectsInformation { get; set; }
        public ProjectsInformation UpdateProjectsInformation { get; set; }
        public DeleteMutationResponse DeleteProjectsInformation { get; set; }
        public SeasonPass CreateSeasonPass { get; set; }
        public SeasonPass UpdateSeasonPass { get; set; }
        public DeleteMutationResponse DeleteSeasonPass { get; set; }
        public StakingCoolDown CreateStakingCoolDown { get; set; }
        public StakingCoolDown UpdateStakingCoolDown { get; set; }
        public DeleteMutationResponse DeleteStakingCoolDown { get; set; }
        public Tokenomic UpdateTokenomic { get; set; }
        public DeleteMutationResponse DeleteTokenomic { get; set; }
        public TradeContract CreateTradeContract { get; set; }
        public TradeContract UpdateTradeContract { get; set; }
        public DeleteMutationResponse DeleteTradeContract { get; set; }
        public VaultFaq CreateVaultFaq { get; set; }
        public VaultFaq UpdateVaultFaq { get; set; }
        public DeleteMutationResponse DeleteVaultFaq { get; set; }
        public UploadFile UpdateUploadFile { get; set; }
        public UploadFile DeleteUploadFile { get; set; }
        public UsersPermissionsCreateRolePayload CreateUsersPermissionsRole { get; set; }
        public UsersPermissionsUpdateRolePayload UpdateUsersPermissionsRole { get; set; }
        public UsersPermissionsDeleteRolePayload DeleteUsersPermissionsRole { get; set; }
        public UsersPermissionsUserEntityResponse CreateUsersPermissionsUser { get; set; }
        public UsersPermissionsUserEntityResponse UpdateUsersPermissionsUser { get; set; }
        public UsersPermissionsUserEntityResponse DeleteUsersPermissionsUser { get; set; }
        public UsersPermissionsLoginPayload Login { get; set; }
        public UsersPermissionsLoginPayload Register { get; set; }
        public UsersPermissionsPasswordPayload ForgotPassword { get; set; }
        public UsersPermissionsLoginPayload ResetPassword { get; set; }
        public UsersPermissionsLoginPayload ChangePassword { get; set; }
        public UsersPermissionsLoginPayload EmailConfirmation { get; set; }
    }
    #endregion
}
